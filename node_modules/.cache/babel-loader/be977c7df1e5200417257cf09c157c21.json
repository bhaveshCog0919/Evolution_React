{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar Truncate = /*#__PURE__*/function (_React$Component) {\n  _inherits(Truncate, _React$Component);\n\n  var _super = _createSuper(Truncate);\n\n  function Truncate() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, Truncate);\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"extractReplaceLinksKeys\", function (content) {\n      var _self = _assertThisInitialized(_this),\n          i = 0;\n\n      _this.replacedLinks = [];\n      content.replace(/(<a[\\s]+([^>]+)>((?:.(?!\\<\\/a\\>))*.)<\\/a>)/g, function () {\n        var item = Array.prototype.slice.call(arguments, 1, 4);\n        item.key = '@'.repeat(item[2].length - 1) + '=' + i++;\n\n        _self.replacedLinks.push(item);\n\n        content = content.replace(item[0], item.key);\n      });\n      return content;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restoreReplacedLinks\", function (content) {\n      _this.replacedLinks.forEach(function (item) {\n        content = content.replace(item.key, item[0]);\n      });\n\n      return _this.createMarkup(content);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"innerText\", function (node) {\n      var div = document.createElement('div');\n      var contentKey = 'innerText' in window.HTMLElement.prototype ? 'innerText' : 'textContent';\n      var content = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n      div.innerHTML = _this.extractReplaceLinksKeys(content);\n      var text = div[contentKey];\n      var test = document.createElement('div');\n      test.innerHTML = 'foo<br/>bar';\n\n      if (test[contentKey].replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n        div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n        text = div[contentKey];\n      }\n\n      return text;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      _this.calcTargetWidth();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTruncate\", function (didTruncate) {\n      var onTruncate = _this.props.onTruncate;\n\n      if (typeof onTruncate === 'function') {\n        _this.timeout = window.requestAnimationFrame(function () {\n          onTruncate(didTruncate);\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calcTargetWidth\", function (callback) {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          target = _assertThisInitialize.elements.target,\n          calcTargetWidth = _assertThisInitialize.calcTargetWidth,\n          canvasContext = _assertThisInitialize.canvasContext,\n          width = _assertThisInitialize.props.width; // Calculation is no longer relevant, since node has been removed\n\n\n      if (!target) {\n        return;\n      }\n\n      var targetWidth = width || // Floor the result to deal with browser subpixel precision\n      Math.floor(target.parentNode.getBoundingClientRect().width); // Delay calculation until parent node is inserted to the document\n      // Mounting order in React is ChildComponent, ParentComponent\n\n      if (!targetWidth) {\n        return window.requestAnimationFrame(function () {\n          return calcTargetWidth(callback);\n        });\n      }\n\n      var style = window.getComputedStyle(target);\n      var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n      canvasContext.font = font;\n\n      _this.setState({\n        targetWidth: targetWidth\n      }, callback);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"measureWidth\", function (text) {\n      return _this.canvasContext.measureText(text).width;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"ellipsisWidth\", function (node) {\n      return node.offsetWidth;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trimRight\", function (text) {\n      return text.replace(/\\s+$/, '');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createMarkup\", function (str) {\n      return /*#__PURE__*/_react.default.createElement(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: str\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getLines\", function () {\n      var _assertThisInitialize2 = _assertThisInitialized(_this),\n          elements = _assertThisInitialize2.elements,\n          _assertThisInitialize3 = _assertThisInitialize2.props,\n          numLines = _assertThisInitialize3.lines,\n          ellipsis = _assertThisInitialize3.ellipsis,\n          trimWhitespace = _assertThisInitialize3.trimWhitespace,\n          targetWidth = _assertThisInitialize2.state.targetWidth,\n          innerText = _assertThisInitialize2.innerText,\n          measureWidth = _assertThisInitialize2.measureWidth,\n          onTruncate = _assertThisInitialize2.onTruncate,\n          trimRight = _assertThisInitialize2.trimRight,\n          renderLine = _assertThisInitialize2.renderLine,\n          restoreReplacedLinks = _assertThisInitialize2.restoreReplacedLinks;\n\n      var lines = [];\n      var text = innerText(elements.text);\n      var textLines = text.split('\\n').map(function (line) {\n        return line.split(' ');\n      });\n      var didTruncate = true;\n\n      var ellipsisWidth = _this.ellipsisWidth(_this.elements.ellipsis);\n\n      for (var line = 1; line <= numLines; line++) {\n        var textWords = textLines[0]; // Handle newline\n\n        if (textWords.length === 0) {\n          lines.push();\n          textLines.shift();\n          line--;\n          continue;\n        }\n\n        var resultLine = textWords.join(' ');\n\n        if (measureWidth(resultLine) <= targetWidth) {\n          if (textLines.length === 1) {\n            // Line is end of text and fits without truncating\n            didTruncate = false;\n            resultLine = restoreReplacedLinks(resultLine);\n            lines.push(resultLine);\n            break;\n          }\n        }\n\n        if (line === numLines) {\n          // Binary search determining the longest possible line inluding truncate string\n          var textRest = textWords.join(' ');\n          var lower = 0;\n          var upper = textRest.length - 1;\n\n          while (lower <= upper) {\n            var middle = Math.floor((lower + upper) / 2);\n            var testLine = textRest.slice(0, middle + 1);\n\n            if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n              lower = middle + 1;\n            } else {\n              upper = middle - 1;\n            }\n          }\n\n          var lastLineText = textRest.slice(0, lower);\n\n          if (trimWhitespace) {\n            lastLineText = trimRight(lastLineText); // Remove blank lines from the end of text\n\n            while (!lastLineText.length && lines.length) {\n              var prevLine = lines.pop();\n              lastLineText = trimRight(prevLine);\n            }\n          }\n\n          lastLineText = restoreReplacedLinks(lastLineText);\n          resultLine = /*#__PURE__*/_react.default.createElement(\"span\", null, lastLineText, ellipsis);\n        } else {\n          // Binary search determining when the line breaks\n          var _lower = 0;\n\n          var _upper = textWords.length - 1;\n\n          while (_lower <= _upper) {\n            var _middle = Math.floor((_lower + _upper) / 2);\n\n            var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n            if (measureWidth(_testLine) <= targetWidth) {\n              _lower = _middle + 1;\n            } else {\n              _upper = _middle - 1;\n            }\n          } // The first word of this line is too long to fit it\n\n\n          if (_lower === 0) {\n            // Jump to processing of last line\n            line = numLines - 1;\n            continue;\n          }\n\n          resultLine = textWords.slice(0, _lower).join(' ');\n          resultLine = restoreReplacedLinks(resultLine);\n          textLines[0].splice(0, _lower);\n        }\n\n        lines.push(resultLine);\n      }\n\n      onTruncate(didTruncate);\n      return lines.map(renderLine);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderLine\", function (line, i, arr) {\n      if (i === arr.length - 1) {\n        return /*#__PURE__*/_react.default.createElement(\"span\", {\n          key: i\n        }, line);\n      } else {\n        var br = /*#__PURE__*/_react.default.createElement(\"br\", {\n          key: i + 'br'\n        });\n\n        if (line) {\n          return [/*#__PURE__*/_react.default.createElement(\"span\", {\n            key: i\n          }, line), br];\n        } else {\n          return br;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"styles\", {\n      ellipsis: {\n        position: 'fixed',\n        visibility: 'hidden',\n        top: 0,\n        left: 0\n      }\n    });\n\n    _this.elements = {};\n    _this.replacedLinks = [];\n    return _this;\n  }\n\n  _createClass(Truncate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var text = this.elements.text,\n          calcTargetWidth = this.calcTargetWidth,\n          onResize = this.onResize;\n      var canvas = document.createElement('canvas');\n      this.canvasContext = canvas.getContext('2d');\n      calcTargetWidth(function () {\n        // Node not needed in document tree to read its content\n        if (text) {\n          text.parentNode.removeChild(text);\n        }\n      });\n      window.addEventListener('resize', onResize);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // Render was based on outdated refs and needs to be rerun\n      if (this.props.children !== prevProps.children) {\n        this.forceUpdate();\n      } // If the width prop has changed, recalculate size of contents\n\n\n      if (this.props.width !== prevProps.width) {\n        this.calcTargetWidth();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var ellipsis = this.elements.ellipsis,\n          onResize = this.onResize,\n          timeout = this.timeout;\n      ellipsis.parentNode.removeChild(ellipsis);\n      window.removeEventListener('resize', onResize);\n      window.cancelAnimationFrame(timeout);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var target = this.elements.target,\n          _this$props = this.props,\n          children = _this$props.children,\n          ellipsis = _this$props.ellipsis,\n          lines = _this$props.lines,\n          spanProps = _objectWithoutProperties(_this$props, [\"children\", \"ellipsis\", \"lines\"]),\n          targetWidth = this.state.targetWidth,\n          getLines = this.getLines,\n          onTruncate = this.onTruncate;\n\n      var text;\n      var mounted = !!(target && targetWidth);\n\n      if (typeof window !== 'undefined' && mounted) {\n        if (lines > 0) {\n          text = getLines();\n        } else {\n          text = children;\n          onTruncate(false);\n        }\n      }\n\n      delete spanProps.onTruncate;\n      delete spanProps.trimWhitespace;\n      return /*#__PURE__*/_react.default.createElement(\"span\", _extends({}, spanProps, {\n        ref: function ref(targetEl) {\n          _this2.elements.target = targetEl;\n        }\n      }), /*#__PURE__*/_react.default.createElement(\"span\", null, text), /*#__PURE__*/_react.default.createElement(\"span\", {\n        ref: function ref(textEl) {\n          _this2.elements.text = textEl;\n        }\n      }, children), /*#__PURE__*/_react.default.createElement(\"span\", {\n        ref: function ref(ellipsisEl) {\n          _this2.elements.ellipsis = ellipsisEl;\n        },\n        style: this.styles.ellipsis\n      }, ellipsis));\n    }\n  }]);\n\n  return Truncate;\n}(_react.default.Component);\n\nexports.default = Truncate;\n\n_defineProperty(Truncate, \"propTypes\", {\n  children: _propTypes.default.node,\n  ellipsis: _propTypes.default.node,\n  lines: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.number]),\n  trimWhitespace: _propTypes.default.bool,\n  width: _propTypes.default.number,\n  onTruncate: _propTypes.default.func\n});\n\n_defineProperty(Truncate, \"defaultProps\", {\n  children: '',\n  ellipsis: '…',\n  lines: 1,\n  trimWhitespace: false,\n  width: 0\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}