{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Dashboard/Dashboard.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalHeader, ModalBody, Col, CardBody, Form, Row, Button as BTN, UncontrolledTooltip, Card, CardHeader, Collapse, Input } from 'reactstrap';\nimport { CommonConfig } from '../../utils/constants';\nimport api from '../../utils/apiClient';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\nimport APIConstant from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport ShowMoreText from 'react-show-more-text';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveNotes = () => {\n      if (this.state.NotesTypeError === false && this.state.notesdescriptionError === false) {\n        const NotesForm = new FormData();\n        NotesForm.append('notesType', this.state.notesType);\n        NotesForm.append('notesdescription', this.state.notesdescription.trim());\n        NotesForm.append('entityid', this.state.NavID);\n        NotesForm.append('entitytype', 'Policy');\n        NotesForm.append('isflag', this.state.isImportant);\n        NotesForm.append('loggedInUserId', CommonConfig.loggedInUserId());\n        NotesForm.append('languageId', this.state.LanguageId);\n        api.post('api/addNotes', NotesForm).then(res => {\n          if (res.success) {\n            this.reset();\n            toast.success('Notes added successfully');\n            this.getNoteList({\n              PolicyId: this.state.NavID\n            });\n          } else {}\n        }).catch(err => {});\n      } else {\n        this.show(\"notesType\", this.state.NotesTypeError);\n        this.show(\"notesdescription\", this.state.notesdescriptionError);\n      }\n    };\n\n    this.resetNewBusiness = () => {\n      var t = new Date(this.state.rowInceptiondate);\n      var renewalMonth = \"\";\n\n      if (t.getMonth() + 1 < 10) {\n        renewalMonth = \"0\" + (t.getMonth() + 1);\n      } else {\n        renewalMonth = t.getMonth() + 1;\n      }\n\n      let renewalValue = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n      let finalRenewalDate = {\n        value: renewalMonth,\n        label: renewalValue[0].StringMapName\n      };\n      this.setState({\n        notesdescription: '',\n        notesdescriptionError: true,\n        responseType: '',\n        notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),\n        notesInceptionDate1: moment(this.state.inceptionDate).format('YYYY-MM-DD'),\n        reasonType: '',\n        DateTime: '',\n        renewalMonth: finalRenewalDate,\n        contactMode: '',\n        isImportant: 0,\n        isEditDate: false,\n        isEditRenewalMonth: false\n      });\n      this.show(\"notesdescription\", false);\n      this.setState({\n        addNoteCollapse: false\n      });\n    };\n\n    this.saveNotesNewBusiness = () => {\n      if (this.state.notesdescriptionError === false) {\n        if (this.state.responseType == \"\") {\n          toast.error('Please Select Response Type');\n          return;\n        }\n\n        if (this.state.responseType == \"Not Interested\") {\n          if (this.state.reasonType == \"\") {\n            toast.error('Please Select Reason Type');\n            return;\n          }\n        }\n\n        if (this.state.contactMode == \"\") {\n          toast.error('Please Select Contact mode');\n          return;\n        }\n\n        if (this.state.renewalMonth == \"\") {\n          toast.error('Please Select Renewal Month');\n          return;\n        }\n\n        var data = {\n          'EntityType': 'Policy',\n          'EntityId': this.state.NavID,\n          'PolicyId': this.state.NavID,\n          'isflag': this.state.isImportant,\n          'Response': this.state.responseType,\n          'Reason': this.state.reasonType,\n          'NoteText': this.state.notesdescription.trim(),\n          'FollowUpDateTime': this.state.DateTime,\n          // 'RenewalMonth': this.state.renewalMonth,\n          'InceptionDate': this.state.notesInceptionDate1,\n          'ContactMode': this.state.contactMode,\n          'CurrentUser': CommonConfig.loggedInUserData().EntityId\n        };\n        console.log(\"dataaaaaa..........\", data);\n        api.post('api/saveFollowUpNote', data).then(res => {\n          console.log(\"dataaaaaa..........\", res);\n\n          if (res.data.success) {\n            this.resetNewBusiness();\n            toast.success('Follow-Up note added successfully');\n            this.getNoteList({\n              PolicyId: this.state.currentPolicyId\n            });\n          } else {\n            toast.error(res.data.msg);\n          }\n        }).catch(err => {});\n      } else {\n        if (this.state.responseType == '') {\n          this.show(\"responseType\", true, \"responseTypeError\", \"Please Select Response\");\n        }\n\n        if (this.state.contactMode == '') {\n          this.show(\"contactMode\", true, \"contactModeError\", \"Please Select Contact mode\");\n        }\n\n        if (this.state.renewalMonth == '') {\n          this.show(\"renewalMonth\", true, \"renewalMonthError\", \"Please Select Renewal month\");\n        }\n\n        this.show(\"notesType\", this.state.NotesTypeError);\n        this.show(\"notesdescription\", this.state.notesdescriptionError);\n      }\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'notesdescription') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            notesdescriptionError: true\n          });\n          this.show(\"notesdescription\", true);\n        } else {\n          this.setState({\n            notesdescriptionError: false,\n            notesdescription: e.target.value\n          });\n          this.show(\"notesdescription\", false);\n        }\n      }\n\n      if (e.target.name === 'policyFrom') {\n        if (e.target.value === '' || e.target.value === null) {\n          this.setState({\n            policyFrom: ''\n          });\n        } else {\n          this.setState({\n            policyFrom: e.target.value,\n            policyTo: ''\n          });\n          this.show('policyTo', false, 'policyToError', '');\n        }\n      }\n\n      if (e.target.name === 'policyTo') {\n        if (e.target.value === '' || e.target.value === null) {\n          this.setState({\n            policyTo: ''\n          });\n        } else {\n          if (!CommonConfig.isEmpty(this.state.policyFrom)) {\n            var isToDateGreater = moment(e.target.value).isSameOrAfter(this.state.policyFrom);\n\n            if (!isToDateGreater) {\n              this.show('policyTo', true, 'policyToError', 'To date must be greater then From date.');\n            } else {\n              this.show('policyTo', false, 'policyToError', '');\n            }\n          } else {\n            this.show('policyTo', false, 'policyToError', '');\n          }\n\n          this.setState({\n            policyTo: e.target.value\n          });\n        }\n      }\n\n      if (e.target.name === 'inceptionDate') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            inceptionDateError: true\n          });\n          this.show(\"inceptionDate\", true, \"inceptionDateError\", \"Please enter Inception Date\");\n        } else {\n          var t = new Date(e.target.value);\n          var renewalMonth = \"\";\n\n          if (t.getMonth() + 1 < 10) {\n            renewalMonth = \"0\" + (t.getMonth() + 1);\n          } else {\n            renewalMonth = t.getMonth() + 1;\n          }\n\n          let data = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n          var inceptionDate = moment(e.target.value).format('DD-MM-YYYY');\n          console.log(\"data.......\", e.target.value);\n          let finalRenewalDate = {\n            value: renewalMonth,\n            label: data[0].StringMapName\n          };\n          this.setState({\n            notesInceptionDate: inceptionDate,\n            notesInceptionDate1: e.target.value,\n            inceptionDateError: false,\n            renewalMonth: finalRenewalDate\n          });\n          this.show('inceptionDate', false, \"inceptionDateError\", \"\");\n        }\n      }\n    };\n\n    this.reset = () => {\n      this.setState({\n        notesdescription: '',\n        notesdescriptionError: true,\n        notesType: '',\n        NotesTypeError: true,\n        isImportant: 0\n      });\n      this.show(\"notesdescription\", false);\n      this.show('notesType', false);\n      this.setState({\n        addNoteCollapse: false\n      });\n    };\n\n    let columns = [{\n      body: this.actionTemplate.bind(this),\n      header: \"Action\",\n      sortable: false,\n      filter: false,\n      id: 0\n    }, {\n      body: this.formatPolicyDetail.bind(this),\n      field: \"PolicyData\",\n      header: \"Policy No/Type\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 1\n    }, {\n      body: this.formatContactDetail.bind(this),\n      field: \"ClientDetails\",\n      header: \"Client/Contacts\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 2\n    }, {\n      body: this.formatVesselData.bind(this),\n      field: \"VesselDetails\",\n      header: \"Vessel\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 3\n    }, {\n      field: \"InsuranceCompanyName\",\n      header: \"Insurer\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 4\n    }, {\n      body: this.formatPremiun.bind(this),\n      field: \"PremiumDetails\",\n      header: \"SI/Premium\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 5\n    }, {\n      body: this.formatDate.bind(this),\n      field: \"RenewalDate\",\n      header: \"Renewal\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 6\n    }, {\n      body: this.departmentData.bind(this),\n      field: \"DepartmentDetails\",\n      header: \"Department\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 6\n    }, {\n      body: this.formatStage.bind(this),\n      field: \"StageReferredData\",\n      header: \"Stage/Referred To\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 7\n    }, {\n      field: \"HandlerPerson\",\n      header: \"Handler\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 8\n    }, {\n      field: \"Status\",\n      header: \"Status\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 9\n    }];\n    this.state = {\n      LanguageId: props.i18n.language === 'en' ? 'en-GB' : props.i18n.language === 'es' ? 'es-ES' : props.i18n.language === 'ie' ? 'en-IE' : props.i18n.language,\n      cols: columns,\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      policyStage: this.props.match.params.mode,\n      policyCount: 0,\n      policyList: [],\n      first: 1,\n      rows: 10,\n      StageCountData: [],\n      openNotePopup: false,\n      addNoteCollapse: false,\n      policyNoteList: [],\n      noteType: [],\n      NavID: null,\n      TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n      isImportant: 0,\n      notesType: '',\n      notesdescription: '',\n      NotesTypeError: true,\n      notesdescriptionError: true,\n      addNoteCollapse: false,\n      CurrentUserid: CommonConfig.loggedInUserData().EntityId,\n      policyTypeArray: [],\n      policyType: 'Vessel',\n      monthArray: [],\n      policyMonth: moment().format('M'),\n      policyMonthError: false,\n      yearArray: [],\n      policyYear: moment().format('YYYY'),\n      policyYearError: false,\n      isMonthYear: true,\n      policyFrom: '',\n      policyFromError: false,\n      policyTo: '',\n      policyToError: false,\n      ReasonArray: [],\n      ResponseTypeArray: [],\n      showReasonDD: false,\n      responseType: '',\n      responseTypeError: false,\n      reasonTypeError: false,\n      reasonType: '',\n      DateTime: '',\n      reasonsShow: false,\n      contactMode: '',\n      contactModeError: false,\n      contactModeList: [],\n      // renewalMonth:'',\n      renewalMonthList: [],\n      renewalMonthError: false,\n      notesInceptionDate: '',\n      notesInceptionDate1: '',\n      isEditRenewalMonth: false,\n      isEditDate: false,\n      InceptionDate: '',\n      currentPolicyId: '',\n      rowInceptiondate: '',\n      BusinessTypeList: [],\n      businessType: 'New Business',\n      meOrAll: CommonConfig.loggedInUserData().SecurityGroupName == 'New Business' ? 'Me' : 'All',\n      meOrAllList: [{\n        label: 'Me',\n        value: 'Me'\n      }, {\n        label: 'All',\n        value: 'All'\n      }],\n      SecurityGroupList: [{\n        label: 'New Business',\n        value: 'New Business'\n      }, {\n        label: 'Renewal',\n        value: 'Renewal'\n      }, {\n        label: 'Underwriting',\n        value: 'Underwriting'\n      }],\n      SecurityGroupName: '',\n      language: 'All',\n      languageList: [],\n      languageError: false,\n      isSubAgent: false\n    };\n    this.colOptions = [];\n\n    for (let col of columns) {\n      this.colOptions.push({\n        label: col.header,\n        value: col\n      });\n    }\n\n    this.onPage = this.onPage.bind(this);\n  }\n\n  changePolicyDateView() {\n    this.setState({\n      isMonthYear: !this.state.isMonthYear\n    });\n  }\n\n  getPolicyStageCount(policyCount, policyData) {\n    let data = {\n      TeamType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? this.state.TeamType ? this.state.TeamType : CommonConfig.loggedInUserData().SecurityGroupName : CommonConfig.loggedInUserData().SecurityGroupName,\n      PolicyType: this.state.policyType,\n      PolicyMonth: this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth : '',\n      PolicyYear: this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear : '',\n      PolicyFrom: !this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n      PolicyTo: !this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : '',\n      PolicyLanguage: this.state.language,\n      IsSubAgent: this.state.isSubAgent ? 1 : 0,\n      MeOrAll: this.state.meOrAll,\n      CurrentUser: CommonConfig.loggedInUserData().EntityId,\n      BusinessType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? this.state.businessType : ''\n    };\n    api.post('api/getPolicyStageCount', data).then(res => {\n      if (res.success) {\n        console.log(\"getPolicyStageCount\", res.data);\n\n        if (policyCount == \"update\") {\n          this.setState({\n            StageCountData: res.data,\n            policyStage: policyData\n          });\n        } else {\n          this.setState({\n            StageCountData: res.data,\n            policyStage: this.props.match.params.mode == undefined ? res.data[0].StringMapKey : this.props.match.params.mode\n          });\n        } //toDo: Count and Data\n        //this.getPolicyList(this.props.match.params.mode == undefined ? res.data[0] : { 'StringMapKey': this.props.match.params.mode });\n\n      } else {\n        console.log(\"Else\");\n      }\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  componentDidMount() {\n    var data = {\n      Count: 0,\n      StringMapKey: \"\"\n    };\n\n    if (CommonConfig.loggedInUserData().SecurityGroupName == 'Renewal') {\n      data.StringMapKey = 'Review';\n    } else if (CommonConfig.loggedInUserData().SecurityGroupName == 'New Business') {\n      data.StringMapKey = 'Lead';\n    } else if (CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting') {\n      data.StringMapKey = 'New Business';\n      this.setState({\n        SecurityGroupName: \"Underwriting\"\n      });\n    }\n\n    this.getPolicyList(data);\n    this.getPolicyStageCount('', '');\n    this.getNotesType();\n    this.getLanguageList();\n    this.getDropDownValues('POLICYTYPE', 'policyTypeArray');\n    this.getDropDownValues('POLICYBUSINESSTYPE', 'BusinessTypeList');\n    this.getDropDownValues('MONTH', 'renewalMonthList');\n    this.getDropDownValues('CONTACTMODE', 'contactModeList'); // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n\n    this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray'); // Get Month\n\n    let monthArray = [{\n      label: 'January',\n      value: 1\n    }, {\n      label: 'February',\n      value: 2\n    }, {\n      label: 'March',\n      value: 3\n    }, {\n      label: 'April',\n      value: 4\n    }, {\n      label: 'May',\n      value: 5\n    }, {\n      label: 'June',\n      value: 6\n    }, {\n      label: 'July',\n      value: 7\n    }, {\n      label: 'August',\n      value: 8\n    }, {\n      label: 'September',\n      value: 9\n    }, {\n      label: 'October',\n      value: 10\n    }, {\n      label: 'November',\n      value: 11\n    }, {\n      label: 'December',\n      value: 12\n    }];\n    this.setState({\n      monthArray: monthArray\n    }); // Get Year - Get last 10 year from current year\n\n    let startYear = moment().format('YYYY');\n    let yearArray = [];\n\n    for (let index = startYear; index >= parseInt(startYear) - 10; index--) {\n      yearArray.push({\n        label: index,\n        value: index\n      });\n    }\n\n    this.setState({\n      yearArray: yearArray\n    });\n  }\n\n  getDropDownValues(stringMapType, setStateName) {\n    try {\n      let data = {\n        stringmaptype: stringMapType,\n        orderby: 'sortorder'\n      };\n\n      if (stringMapType == \"MONTH\") {\n        data = {\n          stringmaptype: stringMapType,\n          orderby: 'StringMapKey'\n        };\n      }\n\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  async getDropDownReasonValues(response, setStateName) {\n    try {\n      const data = {\n        StingMapKey: response\n      };\n      await api.post(APIConstant.path.dropdownbycodeforreason, data).then(res => {\n        if (res.success) {\n          console.log(\"ressssssssssssss/....\", res);\n          this.setState({\n            ReasonArray: res.data[0]\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  onPage(event) {\n    let firstPage = event.first + 1;\n    let l = event.rows * (event.page + 1);\n    let lastPage = l < this.state.policyList.length ? l : this.state.policyList.length;\n    var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.policyList.length + ' records';\n    this.setState({\n      selectedPage: event.first,\n      str: str,\n      rowsPerPage: event.rows\n    });\n  }\n\n  getPolicyList(stageData) {\n    this.state.policyList = [];\n    let PolicyStage = stageData.StringMapKey;\n    let data = {\n      PolicyStage: stageData.StringMapKey,\n      TeamType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? this.state.TeamType : CommonConfig.loggedInUserData().SecurityGroupName,\n      CurrentUser: CommonConfig.loggedInUserData().EntityId,\n      pPageIndex: this.state.first,\n      pRowsPerPage: 10000,\n      policyType: this.state.policyType,\n      PolicyMonth: this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth : '',\n      PolicyYear: this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear : '',\n      PolicyFrom: !this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n      PolicyTo: !this.state.isMonthYear ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : '',\n      PolicyLanguage: this.state.language,\n      IsSubAgent: this.state.isSubAgent ? 1 : 0,\n      MeOrAll: this.state.meOrAll,\n      BusinessType: stageData.StringMapKey == undefined ? '' : stageData.StringMapKey\n    };\n    this.setState({\n      savedData: data\n    });\n    api.post('api/getPolicyListByStage', data).then(res => {\n      console.log(\"getPolicyListByStage\", res.data);\n\n      if (res.success) {\n        console.log(\"res....\", res); // this.getPolicyStageCount({ TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n        //     PolicyType: this.state.policyType,\n        //     PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n        //     PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n        //     PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n        //     PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : ''});\n\n        let firstPage = res.data.length ? '1' : '0';\n        let lastPage = this.state.rowsPerPage < res.data.length ? this.state.rowsPerPage : res.data.length;\n        let str = firstPage + ' to ' + lastPage + ' out of ' + res.data.length + ' records';\n        this.setState({\n          policyList: res.data,\n          str: str,\n          policyCount: stageData.Count,\n          first: this.state.first,\n          policyStage: PolicyStage\n        });\n        this.getPolicyStageCount('update', PolicyStage); // this.setState({policyStage: stageData.StringMapKey });\n        // let CountData = {\n        //     PolicyStage: stageData.StringMapKey,\n        //     TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n        //     PolicyType: this.state.policyType,\n        //     PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n        //     PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n        //     PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n        //     PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : ''\n        // }\n        // api.post('api/getPolicyStageCount', CountData).then(resCount => {\n        //     if (resCount.success) {\n        //         console.log(\"getPolicyStageCount\", resCount.data);\n        //         this.setState({ StageCountData: resCount.data, policyStage: this.props.match.params.mode == undefined ? resCount.data[0].StringMapKey : this.props.match.params.mode });                \n        //     } else {\n        //         console.log(\"Else\");\n        //     }\n        // });\n      } else {\n        console.log(\"Else\");\n      }\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  goToLeadPage() {\n    this.props.history.push({\n      pathname: '/Master/LeadManagement'\n    });\n  }\n\n  actionTemplate(rowData, column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-eye\",\n      className: \"p-button-warning\",\n      onClick: () => this.edit(rowData),\n      style: {\n        marginRight: '.5em'\n      },\n      tooltip: \"View\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }), this.getImageIcon(rowData));\n  }\n\n  edit(rowData) {\n    window.open(window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1', '_blank'); // this.setLock(rowData);\n    // window.open( window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1','_blank');\n  } // openLock(rowData){\n  //     if(rowData.LockedByPersonId == this.state.CurrentUserid ){\n  //         this.releaseLock(rowData);\n  //     }else{\n  //         toast.warn(\"Only \" +rowData.LcokedByPerson +\" can unlock this Policy\");\n  //     }\n  //     console.log(\"lock realeased.....\")\n  // }\n\n\n  async setLock(rowData) {\n    let data = {\n      'PolicyId': rowData.PolicyId\n    };\n    await api.post('api/setLock', data).then(res => {\n      if (res.success) {\n        if (res.data[0].returnValue == '') {\n          console.log(\"notes......\", res.data);\n          window.open(window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1', '_blank');\n        } else {\n          alert(res.data[0].retunValue);\n        }\n      } else {\n        toast.warn(\"Something went Wrong.\");\n      }\n    }).catch(err => {\n      console.log(\"setLock err\", err);\n    });\n  }\n\n  getLanguageList() {\n    var formattedLanguage = [];\n\n    try {\n      api.get(APIConstant.path.getLanguage).then(res => {\n        if (res.success) {\n          for (var i = 0; i < res.data.length; i++) {\n            formattedLanguage.push({\n              label: res.data[i].Language,\n              value: res.data[i].Language\n            });\n          }\n\n          this.setState({\n            languageList: formattedLanguage\n          });\n        } else {}\n      }).catch(err => {\n        console.log('error in languagelist', err);\n      });\n    } catch (err) {\n      console.log('error in languagelist', err);\n    }\n  }\n\n  getImageIcon(rowData) {\n    var linkType = '';\n\n    if (rowData.LockedByPerson == '') {\n      linkType = 'NoLock';\n    } else {\n      if (rowData.IsCurrentUserUW == 0 && rowData.IsSelfLocked == 1) {\n        linkType = 'NormalSelfLock';\n      } else if (rowData.IsCurrentUserUW == 1 && rowData.IsSelfLocked == 1) {\n        linkType = 'UWSelfLock';\n      } else if (rowData.IsCurrentUserUW == 0 && rowData.IsSelfLocked == 0) {\n        linkType = 'NormalOtherLock';\n      } else if (rowData.IsCurrentUserUW == 1 && rowData.IsSelfLocked == 0) {\n        linkType = 'UWOtherLock';\n      }\n    }\n\n    console.log('linkType', linkType);\n\n    switch (linkType) {\n      case 'NormalSelfLock':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          class: \"fa fa-user-circle-o\",\n          \"aria-hidden\": \"true\",\n          style: {\n            fontSize: '25px'\n          },\n          id: \"NSL\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n          placement: \"right\",\n          target: \"NSL\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 21\n          }\n        }, \"locked By Me\"));\n\n      case 'UWSelfLock':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          class: \"fa fa-user-circle-o\",\n          style: {\n            fontSize: '25px'\n          },\n          \"aria-hidden\": \"true\",\n          id: 'USL' + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n          placement: \"right\",\n          target: \"USL\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 21\n          }\n        }, \"locked By Me\"));\n\n      case 'NormalOtherLock':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          class: \"fa fa-lock\",\n          \"aria-hidden\": \"true\",\n          style: {\n            fontSize: '25px'\n          },\n          id: \"NOL\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n          placement: \"right\",\n          target: \"NOL\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 18\n          }\n        }, \"locked By\" + rowData.LockedByPerson));\n\n      case 'UWOtherLock':\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 20\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          class: \"fa fa-lock\",\n          onClick: () => this.releaseLock(rowData),\n          style: {\n            fontSize: '25px',\n            cursor: 'pointer'\n          },\n          \"aria-hidden\": \"true\",\n          id: \"UWO\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 17\n          }\n        }, \" \"), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n          placement: \"right\",\n          target: \"UWO\" + rowData.policyNumber,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 21\n          }\n        }, \"locked By\" + rowData.LockedByPerson));\n\n      case 'Nolock':\n        return null;\n    }\n  }\n\n  async releaseLock(rowData) {\n    let data = {\n      'PolicyId': rowData.PolicyId,\n      'ReleaseAll': 0\n    };\n    await api.post('api/releaseLock', data).then(async res => {\n      if (res.success) {\n        if (res.data[0][0].returnValue == '') {\n          setTimeout(async () => {\n            await this.reloadSearchResult({\n              'StringMapKey': this.state.policyStage,\n              'Count': this.state.policyCount\n            }, rowData);\n          }, 100);\n        } else {\n          toast.warn(res.data[0][0].returnValue);\n        }\n      } else {\n        toast.error(\"SomeThing went wrong.\");\n      }\n    }).catch(err => {\n      console.log(\"setLock err\", err);\n    });\n  }\n\n  reloadSearchResult(stageData, rowData) {\n    let data = this.state.savedData;\n    let PolicyStage = stageData.StringMapKey;\n    api.post('api/getPolicyListByStage', data).then(res => {\n      console.log(\"getPolicyListByStage\", res.data);\n\n      if (res.success) {\n        let firstPage = res.data.length ? '1' : '0';\n        let lastPage = this.state.rowsPerPage < res.data.length ? this.state.rowsPerPage : res.data.length;\n        let str = firstPage + ' to ' + lastPage + ' out of ' + res.data.length + ' records';\n        this.setState({\n          policyList: res.data,\n          str: str,\n          policyCount: stageData.Count,\n          first: this.state.first,\n          policyStage: PolicyStage\n        });\n        this.getPolicyStageCount('update', PolicyStage);\n        toast.success(\"Policy \" + rowData.PolicyNumber + \" unlocked Successfully\");\n      } else {\n        console.log(\"Else\");\n      }\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  formatStage(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }\n    }, rowData.Stage), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }\n    }, rowData.ReferredToPerson), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      onClick: () => this.getNoteList(rowData),\n      style: {\n        fontSize: '25px',\n        cursor: 'pointer'\n      },\n      className: \"pi pi-comment\",\n      href: \"#\",\n      id: \"CommentTooltip\" + rowData.PolicyId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n      placement: \"bottom\",\n      target: \"CommentTooltip\" + rowData.PolicyId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 21\n      }\n    }, CommonConfig.isEmpty(rowData.Note) ? rowData.Stage : rowData.Note)));\n  }\n\n  departmentData(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }, rowData.Department), rowData.Department == \"SubAgent\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }\n    }, rowData.SubAgentName), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 21\n      }\n    }, rowData.SubAgentPhone), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 21\n      }\n    }, rowData.SubAgentEmail)) : null);\n  }\n\n  formatPolicyDetail(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }\n    }, rowData.PolicyType), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 17\n      }\n    }, rowData.PolicyNumber), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 17\n      }\n    }, rowData.DocLang));\n  }\n\n  formatContactDetail(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 17\n      }\n    }, rowData.NAME), rowData.AreaCode != undefined && rowData.AreaCode != null && rowData.AreaCode != '' ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 17\n      }\n    }, rowData.CountryCode + ' ' + rowData.AreaCode + ' ' + rowData.PhoneNumber) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 19\n      }\n    }, rowData.CountryCode + ' ' + rowData.PhoneNumber), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 17\n      }\n    }, rowData.Email));\n  }\n\n  formatVesselData(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 17\n      }\n    }, rowData.VesselClassName), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }\n    }, rowData.VesselTypeName));\n  }\n\n  formatPremiun(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 17\n      }\n    }, rowData.PremiumDetails));\n  }\n\n  formatDate(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 17\n      }\n    }, rowData.RenewalDate));\n  }\n\n  getNoteList(rowData) {\n    // let date =moment(rowData.InceptionDate).getMonth();\n    var t = '';\n\n    if (rowData.InceptionDate != undefined || rowData.InceptionDate != null) {\n      t = new Date(rowData.InceptionDate);\n      this.setState({\n        rowInceptiondate: rowData.InceptionDate,\n        notesInceptionDate: moment(rowData.InceptionDate).format('DD-MM-YYYY'),\n        notesInceptionDate1: moment(rowData.InceptionDate).format('YYYY-MM-DD'),\n        InceptionDate: rowData.InceptionDate\n      });\n    } else {\n      t = new Date(this.state.rowInceptiondate);\n    }\n\n    var renewalMonth = \"\";\n\n    if (t.getMonth() + 1 < 10) {\n      renewalMonth = \"0\" + (t.getMonth() + 1);\n    } else {\n      renewalMonth = t.getMonth() + 1;\n    }\n\n    let renewalValue = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n    let finalRenewalDate = {\n      value: renewalMonth,\n      label: renewalValue[0].StringMapName\n    };\n    this.setState({\n      NavID: null,\n      renewalMonth: finalRenewalDate,\n      currentPolicyId: rowData.PolicyId\n    });\n    const data = {\n      'entityId': rowData.PolicyId,\n      'entityType': 'Policy',\n      'CurrentUser': CommonConfig.loggedInUserData().EntityId\n    }; // if (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") {\n\n    api.post('api/getNewBusineesNotes', data).then(res => {\n      if (res.success) {\n        console.log(\" new business notes......\", res.data);\n        this.setState({\n          policyNoteList: res.data,\n          openNotePopup: true,\n          NavID: rowData.PolicyId\n        });\n      } else {\n        toast.warn(\"No notes found for Policy.\");\n      }\n    }).catch(err => {\n      console.log(\"getNoteList err\", err);\n    }); // } else {\n    //     api.post('api/getNotes', data).then(res => {\n    //         if (res.success) {\n    //             console.log(\"notes......\", res.data)\n    //             this.setState({ policyNoteList: res.data, openNotePopup: true, NavID: rowData.PolicyId });\n    //         } else {\n    //             toast.warn(\"No notes found for Policy.\");\n    //         }\n    //     }).catch(err => {\n    //         console.log(\"getNoteList err\", err);\n    //     });\n    // }\n  }\n\n  getNotesType() {\n    try {\n      const data = {\n        stringmaptype: 'NOTETYPE'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            noteType: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  onSubAgentChange(val) {\n    this.setState({\n      isSubAgent: val\n    });\n  }\n\n  selectType(value, type) {\n    if (type === 'notesType') {\n      if (value === '' || value === null) {\n        this.setState({\n          NotesTypeError: true,\n          notesType: value\n        });\n        this.show('notesType', true);\n      } else {\n        this.setState({\n          NotesTypeError: false,\n          notesType: value.value\n        });\n        this.show('notesType', false);\n      }\n    }\n\n    if (type === 'BusinessType') {\n      if (value === '' || value === null) {\n        this.setState({\n          businessType: value\n        });\n      } else {\n        this.setState({\n          businessType: value.value\n        });\n      }\n    }\n\n    if (type === 'policyMonth') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          policyMonth: ''\n        });\n      } else {\n        this.setState({\n          policyMonth: value.value\n        });\n      }\n    }\n\n    if (type === 'policyYear') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          policyYear: ''\n        });\n      } else {\n        this.setState({\n          policyYear: value.value\n        });\n      }\n    }\n\n    if (type === 'policyType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          policyType: ''\n        });\n      } else {\n        this.setState({\n          policyType: value.value\n        });\n      }\n    }\n\n    if (type === 'language') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          language: ''\n        });\n      } else {\n        this.setState({\n          language: value.value\n        });\n      }\n    }\n\n    if (type === 'meOrAll') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          meOrAll: ''\n        });\n      } else {\n        this.setState({\n          meOrAll: value.value\n        });\n      }\n    }\n\n    if (type === 'responseType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          responseType: '',\n          responseTypeError: true,\n          showReasonDD: false\n        });\n        this.show('responseType', true, \"responseTypeError\", \"Please select Response\");\n      } else {\n        this.getDropDownReasonValues(value.value, 'ReasonArray');\n        this.setState({\n          responseType: value.value,\n          responseTypeError: false\n        });\n        this.show('responseType', false, \"responseTypeError\", \"\"); // this.getDropDownReasonValues(value.value, 'ReasonArray')\n        // if(this.state.ReasonArray){\n\n        if (value.value == \"Not Interested\" || value.value == \"Lost\" || value.value == \"Purge\" || value.value == \"Abandoned\") {\n          this.setState({\n            showReasonDD: true\n          });\n        } else {\n          this.setState({\n            showReasonDD: false\n          });\n        }\n      }\n    }\n\n    if (type === 'reasonType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          reasonType: '',\n          reasonTypeError: true\n        });\n        this.show('reasonType', true, \"reasonTypeError\", \"Please select Reason\");\n      } else {\n        this.setState({\n          reasonType: value.value,\n          reasonTypeError: false\n        });\n        this.show('reasonType', false, \"reasonTypeError\", \"\");\n      }\n    }\n\n    if (type === 'contactMode') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n        this.setState({\n          contactMode: '',\n          contactModeError: true\n        });\n        this.show('contactMode', true, \"contactModeError\", \"Please select Contact mode\");\n      } else {\n        this.setState({\n          contactMode: value.value,\n          contactModeError: false\n        });\n        this.show('contactMode', false, \"contactModeError\", \"\");\n      }\n    }\n\n    if (type === 'renewalMonth') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n        this.setState({\n          renewalMonth: '',\n          renewalMonthError: true\n        });\n        this.show('renewalMonth', true, \"renewalMonthError\", \"Please select Renewal month\");\n      } else {\n        var date = new Date(); // let currentMonth = date.getMonth() + 1;\n        // var firstDay;\n        // let inceptionDate = new Date(moment(this.state.notesInceptionDate).format(\"DD-MM-YYYY\"));\n        // let inceptionMonth = inceptionDate.getMonth() + 1 ;\n        // let inceptionfirstDay = new Date(inceptionDate.getFullYear(), Number(value.value) - 1, 1);\n\n        var ShowMonth = value.value;\n        console.log(ShowMonth);\n        var curmonth = new Date().getMonth() + 1;\n        console.log(curmonth);\n        if (ShowMonth < curmonth) var curyear = new Date().getFullYear() + 1;else var curyear = new Date().getFullYear();\n        console.log(\"curyear\", curyear);\n        var inceptionDate = moment([parseInt(curyear), parseInt(value.value) - 1]).format('DD-MM-YYYY');\n        var inceptionDate1 = moment([parseInt(curyear), parseInt(value.value) - 1]).format('YYYY-MM-DD'); // if(currentMonth > Number(value.value)){\n        //     firstDay = new Date(date.getFullYear() + 1, Number(value.value) - 1, 1);\n        // }\n        // else{\n        //     firstDay = new Date(date.getFullYear(), Number(value.value) - 1, 1);\n        // }\n        // if((Number(value.value) > inceptionMonth)){\n        //     firstDay = new Date(inceptionDate.getFullYear(), Number(value.value) - 1, 1);\n        //     console.log(\"in if\",moment(firstDay).format('DD-MM-YYYY'));\n        // }\n        // else{\n        //     firstDay = new Date(inceptionDate.getFullYear() + 1, Number(value.value) - 1, 1);\n        //     console.log(\"in else\",moment(firstDay).format('DD-MM-YYYY'));\n        // }\n\n        this.setState({\n          renewalMonth: value.value,\n          renewalMonthError: true,\n          notesInceptionDate: inceptionDate,\n          notesInceptionDate1: inceptionDate1\n        });\n        this.show('renewalMonth', false, \"renewalMonthError\", \"\");\n      }\n    }\n\n    if (type === 'TeamType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          TeamType: ''\n        });\n      } else {\n        this.setState({\n          TeamType: value.value\n        });\n        var data = {\n          Count: 0,\n          StringMapKey: \"\"\n        };\n\n        if (value.value == 'Renewal') {\n          data.StringMapKey = 'Review';\n        } else if (value.value == 'New Business') {\n          data.StringMapKey = 'Lead';\n        } else if (value.value == 'Underwriting') {\n          data.StringMapKey = 'New Business';\n        }\n\n        setTimeout(() => {\n          this.getPolicyList(data); // this.getPolicyStageCount('', '');\n\n          this.getNotesType();\n          this.getDropDownValues('POLICYTYPE', 'policyTypeArray'); // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n\n          this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray');\n        }, 100);\n      }\n    }\n  }\n\n  editDate(task) {\n    if (task == \"view\") {\n      this.setState({\n        isEditDate: false\n      });\n    } else {\n      this.setState({\n        isEditDate: true\n      });\n    }\n  }\n\n  editRenewalMonth(task) {\n    if (task == 'view') {\n      this.setState({\n        isEditRenewalMonth: false\n      });\n    } else {\n      this.setState({\n        isEditRenewalMonth: true\n      });\n    }\n  }\n\n  Important() {\n    this.state.isImportant === 0 ? this.setState({\n      isImportant: 1\n    }) : this.setState({\n      isImportant: 0\n    });\n  }\n\n  // show(field, condition) {\n  //     if (condition) {\n  //         document.getElementById(field).className = \"form-control is-invalid\";\n  //     } else {\n  //         document.getElementById(field).className = \"form-control\";\n  //     }\n  // }\n  show(field, condition, errorField, message) {\n    if (condition) {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control is-invalid\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  render() {\n    const {\n      t,\n      i18n\n    } = this.props;\n    let columns = this.state.cols.map((col, i) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        key: i,\n        field: col.field,\n        header: col.header,\n        body: col.body,\n        sortable: col.sortable,\n        filter: col.filter,\n        filterMatchMode: col.filterMatchMode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1126,\n          columnNumber: 20\n        }\n      });\n    });\n\n    if (this.props.isIdleTimeOut) {\n      this.props.history.push('/');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"animated fadeIn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 29\n      }\n    }, this.state.policyStage, \" \")), CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 96\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 29\n      }\n    }, \"Select Dashboard\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"TeamType\",\n      id: \"TeamType\",\n      value: this.state.TeamType,\n      onChange: e => this.selectType(e.target, 'TeamType'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 33\n      }\n    }, \"Select Team Type\"), this.state.SecurityGroupList.map((item, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: item.value,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 45\n        }\n      }, item.label);\n    }))) : null, /*#__PURE__*/React.createElement(Col, {\n      md: \"10\",\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151,\n        columnNumber: 25\n      }\n    }, this.state.StageCountData.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: this.state.policyStage == ct.StringMapKey ? \"dashbordSelectorSelect\" : '',\n        style: {\n          display: 'inline-block',\n          marginRight: 7,\n          textDecoration: \"underline\",\n          cursor: \"pointer\",\n          fontSize: '15px'\n        },\n        onClick: () => this.getPolicyList(ct),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1153,\n          columnNumber: 41\n        }\n      }, ct.StringMapKey, \"(\", ct.Count, \")\");\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: e => e.preventDefault(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 49\n      }\n    }, \"Policy Type\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"policyType\",\n      id: \"policyType\",\n      value: this.state.policyType,\n      onChange: e => this.selectType(e.target, 'policyType'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 53\n      }\n    }, \"Select Policy Type\"), this.state.policyTypeArray.map((policyType, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: policyType.StringMapKey,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 65\n        }\n      }, policyType.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"policyTypeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 49\n      }\n    }))), this.state.TeamType == 'Underwriting' ? null : /*#__PURE__*/React.createElement(Col, {\n      md: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 45\n      }\n    }, this.state.isMonthYear ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1183,\n        columnNumber: 61\n      }\n    }, \"Month\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"policyMonth\",\n      id: \"policyMonth\",\n      value: this.state.policyMonth,\n      onChange: e => this.selectType(e.target, 'policyMonth'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 65\n      }\n    }, \"Select Month\"), this.state.monthArray.map((month, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: month.value,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1187,\n          columnNumber: 77\n        }\n      }, month.label);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"policyMonthError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 61\n      }\n    }))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1195,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 65\n      }\n    }, \"From\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"policyFrom\",\n      id: \"policyFrom\",\n      value: this.state.policyFrom,\n      onBlur: e => this.handleChange(e),\n      onChange: e => this.handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"policyFromError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202,\n        columnNumber: 65\n      }\n    }))), this.state.isMonthYear ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 61\n      }\n    }, \"Year\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"policyYear\",\n      id: \"policyYear\",\n      value: this.state.policyYear,\n      onChange: e => this.selectType(e.target, 'policyYear'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1210,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1211,\n        columnNumber: 65\n      }\n    }, \"Select Year\"), this.state.yearArray.map((year, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: year.value,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 77\n        }\n      }, year.label);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"policyYearError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217,\n        columnNumber: 61\n      }\n    }))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1223,\n        columnNumber: 65\n      }\n    }, \"To\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"policyTo\",\n      id: \"policyTo\",\n      value: this.state.policyTo,\n      onBlur: e => this.handleChange(e),\n      onChange: e => this.handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"policyToError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 65\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      style: {\n        alignSelf: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1233,\n        columnNumber: 49\n      }\n    }, this.state.isMonthYear ? /*#__PURE__*/React.createElement(\"label\", {\n      style: {\n        textDecoration: 'underline'\n      },\n      onClick: () => this.changePolicyDateView(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235,\n        columnNumber: 57\n      }\n    }, \"Change to Date Range\") : /*#__PURE__*/React.createElement(\"label\", {\n      style: {\n        textDecoration: 'underline'\n      },\n      onClick: () => this.changePolicyDateView(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237,\n        columnNumber: 61\n      }\n    }, \"Change to Month/Year\")))), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1245,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1246,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1247,\n        columnNumber: 49\n      }\n    }, \"Language\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"language\",\n      id: \"language\",\n      value: this.state.language,\n      onChange: e => this.selectType(e.target, 'language'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"All\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1249,\n        columnNumber: 53\n      }\n    }, \"All\"), this.state.languageList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1251,\n          columnNumber: 65\n        }\n      }, x.label);\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259,\n        columnNumber: 49\n      }\n    }, \"Me or All\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"MeOrAll\",\n      id: \"MeOrAll\",\n      value: this.state.meOrAll,\n      onChange: e => this.selectType(e.target, 'meOrAll'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1260,\n        columnNumber: 49\n      }\n    }, this.state.meOrAllList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1262,\n          columnNumber: 65\n        }\n      }, x.label);\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      style: {\n        marginTop: \"25px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272,\n        columnNumber: 49\n      }\n    }, \"Sub Agent\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      style: {\n        marginTop: \"25px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1273,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"checkbox\",\n      name: \"isSubAgent\",\n      id: \"isSubAgent\",\n      checked: this.state.isSubAgent,\n      onChange: () => this.onSubAgentChange(!this.state.isSubAgent),\n      value: this.state.isSubAgent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 49\n      }\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      className: \"text-left\",\n      style: {\n        alignSelf: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      type: \"submit\",\n      color: \"success\",\n      title: \"Go\",\n      style: {\n        marginRight: '5px'\n      },\n      onClick: () => this.getPolicyList({\n        'StringMapKey': this.state.policyStage,\n        'Count': this.state.policyCount\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 45\n      }\n    }, \" Go \"), this.state.policyStage == 'Lead' && CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(BTN, {\n      type: \"button\",\n      color: \"success\",\n      title: \"New Lead\",\n      onClick: () => this.goToLeadPage(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284,\n        columnNumber: 49\n      }\n    }, \" New Lead \") : null)))))), /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.policyList,\n      first: this.state.selectedPage,\n      onPage: e => this.onPage(e),\n      paginator: true,\n      rows: this.state.rowsPerPage,\n      totalRecords: this.state.policyList.length,\n      exportFilename: \"StringMap List\",\n      currentPageReportTemplate: this.state.str,\n      paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n      rowsPerPageOptions: this.state.rowsPerPageOptions,\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      responsive: true,\n      resizableColumns: true,\n      columnResizeMode: \"fit\",\n      scrollable: true,\n      scrollHeight: \"340px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1305,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      selectionMode: \"multiple\",\n      style: {\n        width: '3em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 25\n      }\n    }), columns)), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.openNotePopup,\n      className: 'modal-lg',\n      style: {\n        maxWidth: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.setState({\n        openNotePopup: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 21\n      }\n    }, \" Notes \"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1332,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1333,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      id: \"headingOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1334,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      block: true,\n      color: \"link\",\n      className: \"text-left m-0 p-0\",\n      onClick: () => this.setState({\n        addNoteCollapse: !this.state.addNoteCollapse\n      }),\n      \"aria-expanded\": this.state.addNoteCollapse,\n      \"aria-controls\": \"collapseOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1335,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"m-0 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 37\n      }\n    }, \" AddNotes \", /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        float: \"right\"\n      },\n      className: this.state.addNoteCollapse ? \"fa fa-chevron-up\" : \"fa fa-chevron-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1336,\n        columnNumber: 71\n      }\n    }), \" \"))), /*#__PURE__*/React.createElement(Collapse, {\n      isOpen: this.state.addNoteCollapse,\n      \"data-parent\": \"#accordion\",\n      id: \"collapseOne\",\n      \"aria-labelledby\": \"headingOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1340,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      style: {\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 33\n      }\n    }, CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1346,\n        columnNumber: 49\n      }\n    }, \"Contact Mode\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"contactMode\",\n      id: \"contactMode\",\n      onChange: e => this.selectType(e.target, 'contactMode'),\n      value: this.state.contactMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1348,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1349,\n        columnNumber: 53\n      }\n    }, \"Select\"), this.state.contactModeList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1351,\n          columnNumber: 64\n        }\n      }, x.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"contactModeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 53\n      }\n    })), !this.state.isEditRenewalMonth ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 49\n      }\n    }, \" Renewal Month : \", CommonConfig.isEmpty(this.state.renewalMonth) !== true ? this.state.renewalMonth.label : this.state.renewalMonth), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BTN, {\n      style: {\n        float: \"right\"\n      },\n      color: \"primary\",\n      onClick: this.state.isEditRenewalMonth ? () => this.editRenewalMonth(\"view\") : () => this.editRenewalMonth(\"edit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 53\n      }\n    })))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1374,\n        columnNumber: 49\n      }\n    }, \" Renewal Month :\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"renewalMonth\",\n      id: \"renewalMonth\",\n      onChange: e => this.selectType(e.target, 'renewalMonth'),\n      value: this.state.renewalMonth.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1376,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1377,\n        columnNumber: 53\n      }\n    }, \"Select\"), this.state.renewalMonthList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1379,\n          columnNumber: 64\n        }\n      }, x.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"renewalMonthError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 53\n      }\n    }))), !this.state.isEditDate ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1391,\n        columnNumber: 49\n      }\n    }, \"Inception date: \", this.state.notesInceptionDate), /*#__PURE__*/React.createElement(BTN, {\n      style: {\n        float: \"right\"\n      },\n      color: \"primary\",\n      onClick: this.state.isEditDate ? () => this.editDate(\"view\") : () => this.editDate(\"edit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1396,\n        columnNumber: 49\n      }\n    }))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400,\n        columnNumber: 46\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 49\n      }\n    }, \"Inception date: \", this.state.notesInceptionDate), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"inceptionDate\",\n      id: \"inceptionDate\",\n      placeholder: \"Inception Date\",\n      style: {\n        width: '80%',\n        display: \"inline-block\"\n      },\n      onChange: e => this.handleChange(e, 'inceptionDate'),\n      value: this.state.notesInceptionDate1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"iceptionDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1409,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1425,\n        columnNumber: 53\n      }\n    }, \"Response*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"responseType\",\n      id: \"responseType\",\n      onChange: e => this.selectType(e.target, 'responseType'),\n      value: this.state.responseType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1426,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 57\n      }\n    }, \"Select\"), this.state.ResponseTypeArray.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 69\n        }\n      }, ct.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"responseTypeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1433,\n        columnNumber: 53\n      }\n    }))), this.state.showReasonDD ? /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1437,\n        columnNumber: 50\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1439,\n        columnNumber: 57\n      }\n    }, \"Reason\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"reasonType\",\n      id: \"reasonType\",\n      onChange: e => this.selectType(e.target, 'reasonType'),\n      value: this.state.reasonType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 61\n      }\n    }, \"Select\"), this.state.ReasonArray.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1443,\n          columnNumber: 73\n        }\n      }, ct.StringMapName);\n    })))) : null)) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 41\n      }\n    }, CommonConfig.loggedInUserData().SecurityGroupName != \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 50\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 53\n      }\n    }, t(\"contactNotes:NotesType.label\"), \"*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"notesType\",\n      id: \"notesType\",\n      onChange: e => this.selectType(e.target, 'notesType'),\n      value: this.state.notesType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 57\n      }\n    }, t(\"contactNotes:NotesType.placeholder\")), this.state.noteType.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1460,\n          columnNumber: 69\n        }\n      }, ct.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 53\n      }\n    }, t(\"contactNotes:NotesType.error_blank\"))) : null, /*#__PURE__*/React.createElement(\"a\", {\n      title: t(\"contactNotes:ImportantNotes\"),\n      href: \"javascript:void(0)\",\n      onClick: () => this.Important(),\n      style: {\n        color: this.state.isImportant === 0 ? '#aaaaaa' : '#ff0000',\n        fontSize: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-exclamation-circle\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 234\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1469,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1472,\n        columnNumber: 49\n      }\n    }, t(\"contactNotes:Notes.label\"), \"*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"notesdescription\",\n      id: \"notesdescription\",\n      placeholder: t(\"contactNotes:Notes.placeholder\"),\n      value: this.state.notesdescription,\n      onChange: e => this.handleChange(e),\n      autoResize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1473,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 49\n      }\n    }, t(\"contactNotes:Notes.error_blank\"))))), CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479,\n        columnNumber: 42\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 53\n      }\n    }, \"Next Follow-Up Date & Time\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"datetime-local\",\n      id: \"DateTime\",\n      name: \"DateTime\",\n      value: this.state.DateTime,\n      onChange: e => this.handleChange(e, 'DateTime'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 53\n      }\n    })))) : null, /*#__PURE__*/React.createElement(Row, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1490,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1491,\n        columnNumber: 41\n      }\n    }, this.state.isNoteEdit ? CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 54\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotesNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 122\n      }\n    }), \" Update\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.resetNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 118\n      }\n    }), \" Cancel\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotes(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1499,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1499,\n        columnNumber: 111\n      }\n    }), \" Update\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1500,\n        columnNumber: 107\n      }\n    }), \" Cancel\")) : CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1504,\n        columnNumber: 58\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotesNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 126\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.resetNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1506,\n        columnNumber: 122\n      }\n    }), \" Cancel\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 68\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotes(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 115\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1509,\n        columnNumber: 111\n      }\n    }), \" Cancel\"))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"added-note-outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 29\n      }\n    }, this.state.policyNoteList.length, \" notes\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 29\n      }\n    }, this.state.policyNoteList.map((notes, i) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1525,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"addednote-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1526,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: notes.IsFlag.data[0] === 0 ? '#aaaaaa' : '#ff0000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-exclamation-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 129\n        }\n      })), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 53\n        }\n      }, notes.NoteType), (notes.ContactMode == null || notes.ContactMode == '') && (notes.RenewalMonth == null || notes.RenewalMonth == '') ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1530,\n          columnNumber: 54\n        }\n      }, notes.ContactMode == null || notes.ContactMode == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1532,\n          columnNumber: 56\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1533,\n          columnNumber: 58\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1533,\n          columnNumber: 61\n        }\n      }, \"Contact Mode:\"), \" \", notes.ContactMode)), notes.RenewalMonth == null || notes.RenewalMonth == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1537,\n          columnNumber: 56\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 58\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1538,\n          columnNumber: 61\n        }\n      }, \"Renewal Month:\"), \" \", notes.RenewalMonth))), (notes.Response == null || notes.Response == '') && (notes.Reason == null || notes.Reason == '') ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1544,\n          columnNumber: 54\n        }\n      }, notes.Response == null || notes.Response == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1546,\n          columnNumber: 58\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 60\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 63\n        }\n      }, \"Response:\"), \" \", notes.Response)), /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1550,\n          columnNumber: 56\n        }\n      }, notes.Reason == null || notes.Reason == '' ? null : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 108\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 111\n        }\n      }, \"Reason: \"), \" \", notes.Reason))), notes.FollowUpDateTime == '0000-00-00 00:00:00' || notes.FollowUpDateTime == null || notes.FollowUpDateTime == \"\" ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1556,\n          columnNumber: 56\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1557,\n          columnNumber: 58\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 60\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1558,\n          columnNumber: 63\n        }\n      }, \"Follow Up DateTime: \"), \" \", moment(notes.FollowUpDateTime).format(CommonConfig.dateFormat.dateTime)))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1589,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(ShowMoreText, {\n        lines: 2,\n        more: \"Show more\",\n        less: \"Show less\",\n        anchorClass: \"\",\n        onClick: this.executeOnClick,\n        expanded: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1589,\n          columnNumber: 58\n        }\n      }, notes.NoteText)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1599,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1600,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1601,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1601,\n          columnNumber: 64\n        }\n      }, \"Added By: \"), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1602,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-user\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1602,\n          columnNumber: 112\n        }\n      }), \" \", notes.CreatedByName), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1603,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-calendar\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1603,\n          columnNumber: 84\n        }\n      }), \" \", moment(notes.CreatedOn).format(CommonConfig.dateFormat.dateTime))), notes.UpdatedByName != null ? /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1606,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1607,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1607,\n          columnNumber: 68\n        }\n      }, \"Updated By\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-user\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1608,\n          columnNumber: 116\n        }\n      }), \" \", notes.UpdatedByName), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1609,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-calendar\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1609,\n          columnNumber: 88\n        }\n      }), \" \", moment(notes.UpdatedOn).format(CommonConfig.dateFormat.dateTime))) : null)));\n    }))))));\n  }\n\n}\n\nexport default withTranslation()(Dashboard);","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Dashboard/Dashboard.js"],"names":["React","Component","DataTable","Column","Button","Modal","ModalHeader","ModalBody","Col","CardBody","Form","Row","BTN","UncontrolledTooltip","Card","CardHeader","Collapse","Input","CommonConfig","api","moment","toast","APIConstant","withTranslation","ShowMoreText","Dashboard","constructor","props","saveNotes","state","NotesTypeError","notesdescriptionError","NotesForm","FormData","append","notesType","notesdescription","trim","NavID","isImportant","loggedInUserId","LanguageId","post","then","res","success","reset","getNoteList","PolicyId","catch","err","show","resetNewBusiness","t","Date","rowInceptiondate","renewalMonth","getMonth","renewalValue","renewalMonthList","filter","x","StringMapKey","finalRenewalDate","value","label","StringMapName","setState","responseType","notesInceptionDate","InceptionDate","format","notesInceptionDate1","inceptionDate","reasonType","DateTime","contactMode","isEditDate","isEditRenewalMonth","addNoteCollapse","saveNotesNewBusiness","error","data","loggedInUserData","EntityId","console","log","currentPolicyId","msg","handleChange","e","target","name","isEmpty","policyFrom","policyTo","isToDateGreater","isSameOrAfter","inceptionDateError","columns","body","actionTemplate","bind","header","sortable","id","formatPolicyDetail","field","filterMatchMode","formatContactDetail","formatVesselData","formatPremiun","formatDate","departmentData","formatStage","i18n","language","cols","rowsPerPageOptions","dataTableConfig","rowsPerPage","policyStage","match","params","mode","policyCount","policyList","first","rows","StageCountData","openNotePopup","policyNoteList","noteType","TeamType","SecurityGroupName","CurrentUserid","policyTypeArray","policyType","monthArray","policyMonth","policyMonthError","yearArray","policyYear","policyYearError","isMonthYear","policyFromError","policyToError","ReasonArray","ResponseTypeArray","showReasonDD","responseTypeError","reasonTypeError","reasonsShow","contactModeError","contactModeList","renewalMonthError","BusinessTypeList","businessType","meOrAll","meOrAllList","SecurityGroupList","languageList","languageError","isSubAgent","colOptions","col","push","onPage","changePolicyDateView","getPolicyStageCount","policyData","PolicyType","PolicyMonth","PolicyYear","PolicyFrom","PolicyTo","PolicyLanguage","IsSubAgent","MeOrAll","CurrentUser","BusinessType","undefined","componentDidMount","Count","getPolicyList","getNotesType","getLanguageList","getDropDownValues","startYear","index","parseInt","stringMapType","setStateName","stringmaptype","orderby","path","dropdownbycode","getDropDownReasonValues","response","StingMapKey","dropdownbycodeforreason","event","firstPage","l","page","lastPage","length","str","selectedPage","stageData","PolicyStage","pPageIndex","pRowsPerPage","savedData","goToLeadPage","history","pathname","rowData","column","edit","marginRight","position","getImageIcon","window","open","location","origin","setLock","returnValue","alert","retunValue","warn","formattedLanguage","get","getLanguage","i","Language","linkType","LockedByPerson","IsCurrentUserUW","IsSelfLocked","fontSize","policyNumber","releaseLock","cursor","setTimeout","reloadSearchResult","PolicyNumber","Stage","ReferredToPerson","Note","Department","SubAgentName","SubAgentPhone","SubAgentEmail","DocLang","NAME","AreaCode","CountryCode","PhoneNumber","Email","VesselClassName","VesselTypeName","PremiumDetails","RenewalDate","onSubAgentChange","val","selectType","type","date","ShowMonth","curmonth","curyear","getFullYear","inceptionDate1","editDate","task","editRenewalMonth","Important","condition","errorField","message","document","getElementById","className","innerHTML","render","map","isIdleTimeOut","item","textAlign","ct","display","textDecoration","preventDefault","month","year","alignSelf","marginTop","el","dt","globalFilter","width","maxWidth","float","handleSubmit","padding","color","isNoteEdit","notes","IsFlag","NoteType","ContactMode","RenewalMonth","Response","Reason","FollowUpDateTime","dateFormat","dateTime","executeOnClick","NoteText","CreatedByName","CreatedOn","UpdatedByName","UpdatedOn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalHeader, ModalBody, Col, CardBody, Form, Row, Button as BTN, UncontrolledTooltip, Card, CardHeader, Collapse, Input } from 'reactstrap';\nimport { CommonConfig } from '../../utils/constants';\nimport api from '../../utils/apiClient';\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\nimport APIConstant from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport ShowMoreText from 'react-show-more-text';\n\nclass Dashboard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let columns = [\n            { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, id: 0 },\n            { body: this.formatPolicyDetail.bind(this), field: \"PolicyData\", header: \"Policy No/Type\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1 },\n            { body: this.formatContactDetail.bind(this), field: \"ClientDetails\", header: \"Client/Contacts\", sortable: true, filter: true, filterMatchMode: 'contains', id: 2 },\n            { body: this.formatVesselData.bind(this), field: \"VesselDetails\", header: \"Vessel\", sortable: true, filter: true, filterMatchMode: 'contains', id: 3 },\n            { field: \"InsuranceCompanyName\", header: \"Insurer\", sortable: true, filter: true, filterMatchMode: 'contains', id: 4 },\n            { body: this.formatPremiun.bind(this),field:\"PremiumDetails\", header: \"SI/Premium\", sortable: true, filter: true, filterMatchMode: 'contains', id: 5 },\n            { body: this.formatDate.bind(this), field: \"RenewalDate\", header: \"Renewal\", sortable: true, filter: true, filterMatchMode: 'contains', id: 6 },\n            { body: this.departmentData.bind(this), field: \"DepartmentDetails\", header: \"Department\", sortable: true, filter: true, filterMatchMode: 'contains', id: 6 },\n            { body: this.formatStage.bind(this),field: \"StageReferredData\", header: \"Stage/Referred To\", sortable: true, filter: true, filterMatchMode: 'contains', id: 7 },\n            { field: \"HandlerPerson\", header: \"Handler\", sortable: true, filter: true, filterMatchMode: 'contains', id: 8 },\n            { field: \"Status\", header: \"Status\", sortable: true, filter: true, filterMatchMode: 'contains', id: 9 },\n        ];\n\n        this.state = {\n            LanguageId: (props.i18n.language === 'en') ? 'en-GB' : (props.i18n.language === 'es') ? 'es-ES' : (props.i18n.language === 'ie') ? 'en-IE' : props.i18n.language,\n            cols: columns,\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            policyStage: this.props.match.params.mode,\n            policyCount: 0,\n            policyList: [],\n            first: 1,\n            rows: 10,\n            StageCountData: [],\n            openNotePopup: false,\n            addNoteCollapse: false,\n            policyNoteList: [],\n            noteType: [],\n            NavID: null,\n            TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n            isImportant: 0,\n            notesType: '',\n            notesdescription: '',\n            NotesTypeError: true,\n            notesdescriptionError: true,\n            addNoteCollapse: false,\n            CurrentUserid: CommonConfig.loggedInUserData().EntityId,\n\n            policyTypeArray: [],\n            policyType: 'Vessel',\n            monthArray: [],\n            policyMonth: moment().format('M'),\n            policyMonthError: false,\n            yearArray: [],\n            policyYear: moment().format('YYYY'),\n            policyYearError: false,\n            isMonthYear: true,\n            policyFrom: '',\n            policyFromError: false,\n            policyTo: '',\n            policyToError: false,\n            ReasonArray: [],\n            ResponseTypeArray: [],\n            showReasonDD: false,\n            responseType: '',\n            responseTypeError:false,\n            reasonTypeError:false,\n            reasonType: '',\n            DateTime: '',\n            reasonsShow: false,\n            contactMode:'',\n            contactModeError: false,\n            contactModeList:[],\n            // renewalMonth:'',\n            renewalMonthList:[],\n            renewalMonthError: false,\n            notesInceptionDate: '',\n            notesInceptionDate1:'',\n            isEditRenewalMonth: false,\n            isEditDate: false,\n            InceptionDate:'',\n            currentPolicyId:'',\n            rowInceptiondate:'',\n            BusinessTypeList:[],\n            businessType:'New Business',\n            meOrAll:  CommonConfig.loggedInUserData().SecurityGroupName == 'New Business'  ? 'Me' : 'All',\n\n            meOrAllList:[\n                { label : 'Me' , value: 'Me'},\n                { label : 'All' , value: 'All'}\n            ],\n\n            SecurityGroupList: [\n                { label: 'New Business', value: 'New Business' },\n                { label: 'Renewal', value: 'Renewal' },\n                { label: 'Underwriting', value: 'Underwriting' },\n            ],\n            SecurityGroupName: '',\n            language: 'All',\n            languageList:[],\n            languageError: false,\n            isSubAgent: false,\n        };\n\n        this.colOptions = [];\n\n        for (let col of columns) {\n            this.colOptions.push({ label: col.header, value: col });\n        }\n        this.onPage = this.onPage.bind(this);\n    }\n\n    changePolicyDateView() {\n        this.setState({ isMonthYear: !this.state.isMonthYear });\n    }\n\n    getPolicyStageCount(policyCount, policyData) {\n        let data = {\n            TeamType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? (this.state.TeamType ? this.state.TeamType : CommonConfig.loggedInUserData().SecurityGroupName) : CommonConfig.loggedInUserData().SecurityGroupName,\n            PolicyType: this.state.policyType,\n            PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n            PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n            PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n            PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : '',\n            PolicyLanguage: this.state.language,\n            IsSubAgent: this.state.isSubAgent ? 1 : 0,\n            MeOrAll: this.state.meOrAll,\n            CurrentUser: CommonConfig.loggedInUserData().EntityId,\n            BusinessType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? this.state.businessType :'',\n\n        }\n        api.post('api/getPolicyStageCount', data).then(res => {\n            if (res.success) {\n                console.log(\"getPolicyStageCount\", res.data);\n\n                if (policyCount == \"update\") {\n                    this.setState({ StageCountData: res.data, policyStage: policyData });\n                } else {\n                    this.setState({ StageCountData: res.data, policyStage: this.props.match.params.mode == undefined ? res.data[0].StringMapKey : this.props.match.params.mode });\n                }\n\n                //toDo: Count and Data\n                //this.getPolicyList(this.props.match.params.mode == undefined ? res.data[0] : { 'StringMapKey': this.props.match.params.mode });\n            } else {\n                console.log(\"Else\");\n            }\n        }).catch(err => {\n            console.log(\"errr\", err)\n        })\n    }\n\n    componentDidMount() {\n        var data = {\n            Count: 0,\n            StringMapKey: \"\",\n        };\n        if(CommonConfig.loggedInUserData().SecurityGroupName == 'Renewal'){\n            data.StringMapKey = 'Review';\n        }\n        else if(CommonConfig.loggedInUserData().SecurityGroupName == 'New Business'){\n            data.StringMapKey = 'Lead';\n        }\n        else if(CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting'){\n            data.StringMapKey = 'New Business';\n            this.setState({SecurityGroupName: \"Underwriting\"});\n        }\n        this.getPolicyList(data);\n        this.getPolicyStageCount('', '');\n        this.getNotesType();\n        this.getLanguageList();\n        this.getDropDownValues('POLICYTYPE', 'policyTypeArray');\n        this.getDropDownValues('POLICYBUSINESSTYPE', 'BusinessTypeList');\n        this.getDropDownValues('MONTH', 'renewalMonthList',);\n        this.getDropDownValues('CONTACTMODE', 'contactModeList');\n        // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n        this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray');\n\n        // Get Month\n        let monthArray = [\n            { label: 'January', value: 1 },\n            { label: 'February', value: 2 },\n            { label: 'March', value: 3 },\n            { label: 'April', value: 4 },\n            { label: 'May', value: 5 },\n            { label: 'June', value: 6 },\n            { label: 'July', value: 7 },\n            { label: 'August', value: 8 },\n            { label: 'September', value: 9 },\n            { label: 'October', value: 10 },\n            { label: 'November', value: 11 },\n            { label: 'December', value: 12 },\n        ];\n        this.setState({ monthArray: monthArray });\n\n        // Get Year - Get last 10 year from current year\n        let startYear = moment().format('YYYY');\n        let yearArray = [];\n        for (let index = startYear; index >= (parseInt(startYear) - 10); index--) {\n            yearArray.push({ label: index, value: index });\n        }\n        this.setState({ yearArray: yearArray });\n    }\n\n    getDropDownValues(stringMapType, setStateName) {\n        try {\n            let data = {\n                stringmaptype: stringMapType,\n                orderby: 'sortorder'\n            };\n            if (stringMapType == \"MONTH\"){\n                 data = {\n                    stringmaptype: stringMapType,\n                    orderby: 'StringMapKey'\n                };  \n            }\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    this.setState({ [setStateName]: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n    }\n\n    async getDropDownReasonValues(response, setStateName) {\n        try {\n            const data = {\n                StingMapKey: response,\n            };\n            await api.post(APIConstant.path.dropdownbycodeforreason, data).then(res => {\n                if (res.success) {\n                    console.log(\"ressssssssssssss/....\", res)\n                    this.setState({ ReasonArray: res.data[0] });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n    }\n\n    onPage(event) {\n        let firstPage = event.first + 1;\n        let l = event.rows * (event.page + 1);\n        let lastPage = (l < this.state.policyList.length) ? l : this.state.policyList.length\n        var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.policyList.length + ' records';\n        this.setState({ selectedPage: event.first, str: str, rowsPerPage: event.rows });\n    }\n\n\n    getPolicyList(stageData) {\n        this.state.policyList = []\n        let PolicyStage = stageData.StringMapKey;\n        let data = {\n            PolicyStage: stageData.StringMapKey,\n            TeamType: CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? this.state.TeamType : CommonConfig.loggedInUserData().SecurityGroupName,\n            CurrentUser: CommonConfig.loggedInUserData().EntityId,\n            pPageIndex: this.state.first,\n            pRowsPerPage: 10000,\n            policyType: this.state.policyType,\n            PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n            PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n            PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n            PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : '',\n            PolicyLanguage: this.state.language,\n            IsSubAgent:this.state.isSubAgent ? 1 : 0 ,\n            MeOrAll: this.state.meOrAll,\n            BusinessType: (stageData.StringMapKey == undefined) ? '' : stageData.StringMapKey,\n        }\n        this.setState({savedData: data});\n        api.post('api/getPolicyListByStage', data).then(res => {\n            console.log(\"getPolicyListByStage\", res.data);\n            if (res.success) {\n              console.log(\"res....\", res)\n                // this.getPolicyStageCount({ TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n                //     PolicyType: this.state.policyType,\n                //     PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n                //     PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n                //     PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n                //     PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : ''});\n                let firstPage = (res.data.length) ? '1' : '0';\n                let lastPage = (this.state.rowsPerPage < res.data.length) ? this.state.rowsPerPage : res.data.length;\n                let str = firstPage + ' to ' + lastPage + ' out of ' + res.data.length + ' records';\n                this.setState({ policyList: res.data, str: str, policyCount: stageData.Count, first: this.state.first, policyStage: PolicyStage });\n                this.getPolicyStageCount('update', PolicyStage);\n                // this.setState({policyStage: stageData.StringMapKey });\n\n\n\n                // let CountData = {\n                //     PolicyStage: stageData.StringMapKey,\n                //     TeamType: CommonConfig.loggedInUserData().SecurityGroupName,\n                //     PolicyType: this.state.policyType,\n                //     PolicyMonth: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyMonth) ? '' : this.state.policyMonth) : '',\n                //     PolicyYear: (this.state.isMonthYear) ? (CommonConfig.isEmpty(this.state.policyYear) ? '' : this.state.policyYear) : '',\n                //     PolicyFrom: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyFrom) ? '' : this.state.policyFrom : '',\n                //     PolicyTo: (!this.state.isMonthYear) ? CommonConfig.isEmpty(this.state.policyTo) ? '' : this.state.policyTo : ''\n                // }\n                // api.post('api/getPolicyStageCount', CountData).then(resCount => {\n                //     if (resCount.success) {\n                //         console.log(\"getPolicyStageCount\", resCount.data);\n                //         this.setState({ StageCountData: resCount.data, policyStage: this.props.match.params.mode == undefined ? resCount.data[0].StringMapKey : this.props.match.params.mode });                \n                //     } else {\n                //         console.log(\"Else\");\n                //     }\n                // });\n            } else {\n                console.log(\"Else\");\n            }\n        }).catch(err => {\n            console.log(\"errr\", err)\n        })\n    }\n\n    goToLeadPage(){\n        this.props.history.push({\n            pathname: '/Master/LeadManagement'    \n      });\n    }\n\n    actionTemplate(rowData, column) {\n        return <div className=\"policy-list-data\">\n            <Button type=\"button\" icon=\"pi pi-eye\" className=\"p-button-warning\" onClick={() => this.edit(rowData)}\n                style={{ marginRight: '.5em' }} tooltip=\"View\" tooltipOptions={{ position: 'bottom' }}>\n            </Button>\n            {\n                this.getImageIcon(rowData)\n            }\n            {/* {rowData.LockedByPerson == \"\" ? null :\n                <Button type =\"button\" icon=\"fas fa-lock\"  \n                    tooltip={\"Locked By: \" + rowData.LockedByPerson }  tooltipOptions={{ position: 'bottom' }} >\n                </Button>\n            }\n            {(rowData.LockedByPerson != \"\" && this.state.SecurityGroupName == 'Underwriting')?\n                <Button type =\"button\" icon=\"fas fa-lock\"  onClick={() => this.releaseLock(rowData)} \n                    tooltip={\"Unlock Policy\" }  tooltipOptions={{ position: 'bottom' }} >\n                </Button>\n                : null\n            } */}\n        </div>;\n    }\n\n    edit(rowData) {\n\n        window.open( window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1','_blank');     \n                    \n        // this.setLock(rowData);\n        // window.open( window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1','_blank');\n    }\n\n    // openLock(rowData){\n    //     if(rowData.LockedByPersonId == this.state.CurrentUserid ){\n    //         this.releaseLock(rowData);\n    //     }else{\n    //         toast.warn(\"Only \" +rowData.LcokedByPerson +\" can unlock this Policy\");\n    //     }\n        \n    //     console.log(\"lock realeased.....\")\n    // }\n\n    async setLock(rowData){\n        let data = {\n            'PolicyId' : rowData.PolicyId\n        };\n        \n       await api.post('api/setLock', data).then(res => {\n            if (res.success) {\n                if(res.data[0].returnValue == ''){\n                    console.log(\"notes......\",res.data)\n                    window.open( window.location.origin + '/#' + '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1','_blank');\n                }else{\n                    alert(res.data[0].retunValue);\n                }\n            } else {\n                toast.warn(\"Something went Wrong.\");\n            }\n        }).catch(err => {\n            console.log(\"setLock err\", err);\n        });\n\n    }\n\n    getLanguageList() {\n        var formattedLanguage = [];\n        try {\n            api.get(APIConstant.path.getLanguage).then(res => {\n                if (res.success) {\n                    for (var i = 0; i < res.data.length; i++) {\n                        formattedLanguage.push({\n                            label: res.data[i].Language,\n                            value: res.data[i].Language,\n                        });\n                    }\n                    this.setState({ languageList: formattedLanguage });\n                } else {\n                }\n            }).catch(err => {\n                console.log('error in languagelist',err)\n            });\n        } catch (err) {\n            console.log('error in languagelist',err)\n        }\n    }\n\n\n    getImageIcon(rowData){\n        var linkType= '';\n        if(rowData.LockedByPerson ==''){\n            linkType= 'NoLock';\n        }else{\n            if(rowData.IsCurrentUserUW == 0 && rowData.IsSelfLocked ==1){\n                linkType= 'NormalSelfLock';\n            }else if(rowData.IsCurrentUserUW == 1 && rowData.IsSelfLocked ==1){\n                linkType= 'UWSelfLock';\n            }else if(rowData.IsCurrentUserUW == 0 && rowData.IsSelfLocked ==0){\n                linkType= 'NormalOtherLock';\n            }else if(rowData.IsCurrentUserUW ==1 && rowData.IsSelfLocked ==0){\n                linkType= 'UWOtherLock';\n            }\n        }\n        console.log('linkType',linkType)\n        \n        switch (linkType){\n            \n        case 'NormalSelfLock' : \n            return <span> \n                <i class=\"fa fa-user-circle-o\" aria-hidden=\"true\" style={{ fontSize: '25px'}} id={\"NSL\"+rowData.policyNumber}></i>\n                    <UncontrolledTooltip placement=\"right\" target={\"NSL\"+rowData.policyNumber}>\n                        {\"locked By Me\"}\n                    </UncontrolledTooltip>\n                 </span>\n        case 'UWSelfLock':\n            return <span>\n                    <i class=\"fa fa-user-circle-o\" style={{ fontSize: '25px'}} aria-hidden=\"true\" id={'USL'+ rowData.policyNumber}></i>\n                    <UncontrolledTooltip placement=\"right\" target={\"USL\"+ rowData.policyNumber}>\n                        {\"locked By Me\"}\n                    </UncontrolledTooltip>\n                    </span>\n        case 'NormalOtherLock':\n            return <span>\n                <i class=\"fa fa-lock\" aria-hidden=\"true\" style={{ fontSize: '25px'}} id={\"NOL\"+ rowData.policyNumber}></i> \n                 <UncontrolledTooltip placement=\"right\" target={\"NOL\"+ rowData.policyNumber} >\n                        {\"locked By\" + rowData.LockedByPerson}\n                    </UncontrolledTooltip>\n                </span>\n        case 'UWOtherLock' :\n            return <span>\n                <i class=\"fa fa-lock\" onClick={()=>this.releaseLock(rowData)} style={{ fontSize: '25px' , cursor: 'pointer'}} aria-hidden=\"true\" id={\"UWO\"+ rowData.policyNumber}> </i>\n                {/* <img src= 'img' onClick={()=>this.releaseLock(rowData)} alt=\"UWO\" /> */}\n                    <UncontrolledTooltip placement=\"right\" target={\"UWO\"+ rowData.policyNumber} >\n                        {\"locked By\" + rowData.LockedByPerson}\n                    </UncontrolledTooltip>\n                    </span>\n        case 'Nolock':\n            return null;\n        }\n    }\n\n\n    async releaseLock(rowData){\n        let data = {\n            'PolicyId' : rowData.PolicyId,\n             'ReleaseAll': 0\n        };\n        \n         await api.post('api/releaseLock', data).then( async res => {\n            if (res.success) {\n                if(res.data[0][0].returnValue==''){\n                    setTimeout(async() => {\n                       await this.reloadSearchResult({'StringMapKey': this.state.policyStage, 'Count': this.state.policyCount }, rowData)\n                    }, 100);  \n                    \n                }else{\n                    toast.warn(res.data[0][0].returnValue);\n                }\n            } else {\n                toast.error(\"SomeThing went wrong.\");\n            }\n        }).catch(err => {\n            console.log(\"setLock err\", err);\n        });\n\n    }\n\n    reloadSearchResult(stageData , rowData){\n        let data = this.state.savedData\n        let PolicyStage = stageData.StringMapKey;\n        api.post('api/getPolicyListByStage', data).then(res => {\n            console.log(\"getPolicyListByStage\", res.data);\n            if (res.success) {\n\n                let firstPage = (res.data.length) ? '1' : '0';\n                let lastPage = (this.state.rowsPerPage < res.data.length) ? this.state.rowsPerPage : res.data.length;\n                let str = firstPage + ' to ' + lastPage + ' out of ' + res.data.length + ' records';\n                this.setState({ policyList: res.data, str: str, policyCount: stageData.Count, first: this.state.first, policyStage: PolicyStage });\n                this.getPolicyStageCount('update', PolicyStage);\n                toast.success(\"Policy \"+rowData.PolicyNumber+ \" unlocked Successfully\");\n            } else {\n                console.log(\"Else\");\n            }\n        }).catch(err => {\n            console.log(\"errr\", err)\n        })\n    }\n\n    formatStage(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.Stage}</p>\n                <p>{rowData.ReferredToPerson}</p>\n                <span>\n                    <i onClick={() => this.getNoteList(rowData)} style={{ fontSize: '25px', cursor: 'pointer' }} className=\"pi pi-comment\" href=\"#\" id={\"CommentTooltip\" + rowData.PolicyId}></i>\n                    <UncontrolledTooltip placement=\"bottom\" target={\"CommentTooltip\" + rowData.PolicyId}>\n                        {CommonConfig.isEmpty(rowData.Note) ? rowData.Stage : rowData.Note}\n                    </UncontrolledTooltip>\n                </span>\n            </div>\n        )\n    }\n\n    departmentData(rowData){\n        return(\n            <div className=\"policy-list-data\">\n                <p>{rowData.Department}</p>\n                {rowData.Department == \"SubAgent\"\n                ?<> \n                <p>{rowData.SubAgentName}</p>\n                    <p>{rowData.SubAgentPhone}</p>\n                    <p>{rowData.SubAgentEmail}</p>\n                </>\n                : null}\n            </div>\n        )\n    }\n\n    formatPolicyDetail(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.PolicyType}</p>\n                <p>{rowData.PolicyNumber}</p>\n                <p>{rowData.DocLang}</p>\n            </div>\n        )\n    }\n\n    formatContactDetail(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.NAME}</p>\n                {(rowData.AreaCode != undefined && rowData.AreaCode != null && rowData.AreaCode != '')?\n                <p>{rowData.CountryCode+' '+rowData.AreaCode+' '+rowData.PhoneNumber}</p>\n                : <p>{rowData.CountryCode+' '+rowData.PhoneNumber}</p> }\n                {/* <p>{CommonConfig.formatPhoneNumber(rowData.CountryCode + rowData.PhoneNumber)}</p> */}\n                <p>{rowData.Email}</p>\n            </div>\n        )\n    }\n\n    formatVesselData(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.VesselClassName}</p>\n                <p>{rowData.VesselTypeName}</p>\n            </div>\n        )\n    }\n\n    formatPremiun(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>\n                    {rowData.PremiumDetails}\n                </p>\n        {/* <p>{rowData.CurrentPremium} - {rowData.RenewalPremium} ( {rowData.PreiumDifferencePercentage}% )</p> */}\n                {/* <p>{rowData.PreiumDifference}</p> */}\n            </div>\n        )\n    }\n\n    formatDate(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                {/* <p>{moment(rowData.InceptionDate).format(CommonConfig.dateFormat.dateOnly)}</p> */}\n                {/* <p>{moment(rowData.RenewalDate).format(CommonConfig.dateFormat.dateOnly)}</p> */}\n                <p>{rowData.RenewalDate}</p>\n            </div>\n        )\n    }\n\n\n    getNoteList(rowData) {\n        // let date =moment(rowData.InceptionDate).getMonth();\n        var t ='';\n        if(rowData.InceptionDate != undefined || rowData.InceptionDate != null){\n            t = new Date(rowData.InceptionDate);\n            this.setState({rowInceptiondate: rowData.InceptionDate,\n                notesInceptionDate: moment(rowData.InceptionDate).format('DD-MM-YYYY'),\n                notesInceptionDate1: moment(rowData.InceptionDate).format('YYYY-MM-DD'),\n                InceptionDate: rowData.InceptionDate });\n        }else{\n            t = new Date(this.state.rowInceptiondate);\n        }\n\n        \n        var renewalMonth = \"\";\n        if(t.getMonth() + 1 < 10){\n            renewalMonth = \"0\"+ (t.getMonth() + 1);  \n        }  \n        else{\n            renewalMonth = (t.getMonth() + 1);\n        } \n        let renewalValue = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n        let finalRenewalDate = {\n            value : renewalMonth,\n            label : renewalValue[0].StringMapName\n        }\n    \n        this.setState({ NavID: null  , renewalMonth: finalRenewalDate, currentPolicyId: rowData.PolicyId});\n\n        const data = {\n            'entityId': rowData.PolicyId,\n            'entityType': 'Policy',\n            'CurrentUser': CommonConfig.loggedInUserData().EntityId\n        };\n\n        // if (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") {\n            api.post('api/getNewBusineesNotes', data).then(res => {\n                if (res.success) {\n                    console.log(\" new business notes......\", res.data)\n                    this.setState({ policyNoteList: res.data, openNotePopup: true, NavID: rowData.PolicyId });\n                } else {\n                    toast.warn(\"No notes found for Policy.\");\n                }\n            }).catch(err => {\n                console.log(\"getNoteList err\", err);\n            });\n        // } else {\n        //     api.post('api/getNotes', data).then(res => {\n        //         if (res.success) {\n        //             console.log(\"notes......\", res.data)\n        //             this.setState({ policyNoteList: res.data, openNotePopup: true, NavID: rowData.PolicyId });\n        //         } else {\n        //             toast.warn(\"No notes found for Policy.\");\n        //         }\n        //     }).catch(err => {\n        //         console.log(\"getNoteList err\", err);\n        //     });\n        // }\n    }\n\n\n    getNotesType() {\n        try {\n            const data = {\n                stringmaptype: 'NOTETYPE'\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    this.setState({ noteType: res.data });\n                } else {\n\n                }\n            }).catch(err => {\n\n            });\n        } catch (error) {\n\n        }\n    }\n\n    onSubAgentChange(val){\n        this.setState({isSubAgent: val});\n    }\n\n\n    selectType(value, type) {\n        if (type === 'notesType') {\n            if (value === '' || value === null) {\n                this.setState({ NotesTypeError: true, notesType: value });\n                this.show('notesType', true);\n            } else {\n                this.setState({ NotesTypeError: false, notesType: value.value });\n                this.show('notesType', false);\n            }\n        }\n\n        if (type === 'BusinessType') {\n           if (value === '' || value === null) {\n                this.setState({ businessType: value });\n            } else {\n                this.setState({ businessType: value.value});\n\n            }\n        }\n\n        if (type === 'policyMonth') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ policyMonth: '' });\n            } else {\n                this.setState({ policyMonth: value.value });\n            }\n        }\n\n        if (type === 'policyYear') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ policyYear: '' });\n            } else {\n                this.setState({ policyYear: value.value });\n            }\n        }\n\n        if (type === 'policyType') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ policyType: '' });\n            } else {\n                this.setState({ policyType: value.value });\n            }\n        }\n\n        \n        if (type === 'language') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ language: '' });\n            } else {\n                this.setState({ language: value.value });\n            }\n        }\n\n        if (type === 'meOrAll') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ meOrAll: '' });\n            } else {\n                this.setState({ meOrAll: value.value });\n            }\n        }\n\n        if (type === 'responseType') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ responseType: '', responseTypeError: true ,showReasonDD: false });\n                this.show('responseType', true ,\"responseTypeError\", \"Please select Response\")\n            } else {\n                this.getDropDownReasonValues(value.value, 'ReasonArray')\n                this.setState({ responseType: value.value , responseTypeError:false});\n                this.show('responseType', false ,\"responseTypeError\", \"\")\n\n                // this.getDropDownReasonValues(value.value, 'ReasonArray')\n                // if(this.state.ReasonArray){\n                if (value.value == \"Not Interested\" || value.value == \"Lost\" || value.value == \"Purge\"|| value.value == \"Abandoned\" ){\n                    this.setState({showReasonDD: true});\n                }else{\n                    this.setState({showReasonDD: false});\n                }\n            }\n        }\n        \n        if (type === 'reasonType') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ reasonType: '', reasonTypeError: true });\n                this.show('reasonType', true ,\"reasonTypeError\", \"Please select Reason\")\n            } else {\n                this.setState({ reasonType: value.value ,reasonTypeError:false});\n                this.show('reasonType', false ,\"reasonTypeError\", \"\");\n            }\n        }\n\n        if (type === 'contactMode') {\n            if (value.value == '' || value.value == undefined || value.value == null) {\n                this.setState({ contactMode: '', contactModeError: true });\n                this.show('contactMode', true, \"contactModeError\", \"Please select Contact mode\");\n            } else {\n                this.setState({ contactMode: value.value, contactModeError: false });\n                this.show('contactMode', false, \"contactModeError\", \"\");\n            }\n        }\n\n        if (type === 'renewalMonth') {\n            if (value.value == '' || value.value == undefined || value.value == null) {\n                this.setState({ renewalMonth: '', renewalMonthError:true });\n                this.show('renewalMonth', true, \"renewalMonthError\", \"Please select Renewal month\");\n            } else {\n                var date = new Date();\n                // let currentMonth = date.getMonth() + 1;\n                // var firstDay;\n                // let inceptionDate = new Date(moment(this.state.notesInceptionDate).format(\"DD-MM-YYYY\"));\n                // let inceptionMonth = inceptionDate.getMonth() + 1 ;\n                // let inceptionfirstDay = new Date(inceptionDate.getFullYear(), Number(value.value) - 1, 1);\n                var ShowMonth = value.value;\n                 console.log(ShowMonth);\n\n                var curmonth = new Date().getMonth() + 1;\n                console.log(curmonth);\n                if (ShowMonth < curmonth)\n        \n                    var curyear = new Date().getFullYear() + 1;\n                else\n                    var curyear = new Date().getFullYear();\n                console.log(\"curyear\", curyear);\n        \n                var inceptionDate = moment([parseInt(curyear), parseInt(value.value) - 1]).format('DD-MM-YYYY');\n                var inceptionDate1 = moment([parseInt(curyear), parseInt(value.value) - 1]).format('YYYY-MM-DD');\n                // if(currentMonth > Number(value.value)){\n                //     firstDay = new Date(date.getFullYear() + 1, Number(value.value) - 1, 1);\n                // }\n                // else{\n                //     firstDay = new Date(date.getFullYear(), Number(value.value) - 1, 1);\n                // }\n\n                // if((Number(value.value) > inceptionMonth)){\n                //     firstDay = new Date(inceptionDate.getFullYear(), Number(value.value) - 1, 1);\n                //     console.log(\"in if\",moment(firstDay).format('DD-MM-YYYY'));\n                // }\n                // else{\n                //     firstDay = new Date(inceptionDate.getFullYear() + 1, Number(value.value) - 1, 1);\n                //     console.log(\"in else\",moment(firstDay).format('DD-MM-YYYY'));\n                // }\n                this.setState({ renewalMonth: value.value, renewalMonthError:true , notesInceptionDate: inceptionDate,notesInceptionDate1: inceptionDate1});\n                this.show('renewalMonth', false, \"renewalMonthError\", \"\");\n\n            }\n        }\n\n        if (type === 'TeamType') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ TeamType: '' });\n            } else {\n                this.setState({ TeamType: value.value });\n                var data = {\n                    Count: 0,\n                    StringMapKey: \"\",\n                }\n                if(value.value == 'Renewal'){\n                    data.StringMapKey = 'Review';\n                }\n                else if(value.value == 'New Business'){\n                    data.StringMapKey = 'Lead';\n                }\n                else if(value.value == 'Underwriting'){\n                    data.StringMapKey = 'New Business';\n                }\n                setTimeout(() => {\n                this.getPolicyList(data);\n                // this.getPolicyStageCount('', '');\n                this.getNotesType();\n                this.getDropDownValues('POLICYTYPE', 'policyTypeArray');\n                // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n                this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray');  \n                }, 100);\n\n            }\n        }\n    }\n\n    editDate(task) {\n        if (task == \"view\") {\n            this.setState({ isEditDate: false });\n        } else {\n            this.setState({ isEditDate: true });\n        }\n    }\n\n    editRenewalMonth(task){\n        if(task == 'view'){\n            this.setState({ isEditRenewalMonth : false});\n        } else {\n            this.setState({ isEditRenewalMonth: true });\n        }\n    }\n\n    Important() {\n        (this.state.isImportant === 0 ? this.setState({ isImportant: 1 }) : this.setState({ isImportant: 0 }))\n    }\n\n    saveNotes = () => {\n        if (\n            this.state.NotesTypeError === false &&\n            this.state.notesdescriptionError === false) {\n\n            const NotesForm = new FormData();\n            NotesForm.append('notesType', this.state.notesType);\n            NotesForm.append('notesdescription', this.state.notesdescription.trim());\n            NotesForm.append('entityid', this.state.NavID);\n            NotesForm.append('entitytype', 'Policy');\n            NotesForm.append('isflag', this.state.isImportant);\n            NotesForm.append('loggedInUserId', CommonConfig.loggedInUserId());\n            NotesForm.append('languageId', this.state.LanguageId);\n\n            api.post('api/addNotes', NotesForm).then(res => {\n                if (res.success) {\n                    this.reset();\n                    toast.success('Notes added successfully');\n                    this.getNoteList({ PolicyId: this.state.NavID });\n                } else {\n\n                }\n            }).catch(err => {\n            });\n        } else {\n            this.show(\"notesType\", this.state.NotesTypeError);\n            this.show(\"notesdescription\", this.state.notesdescriptionError);\n        }\n    }\n\n    resetNewBusiness = () => {\n        var t = new Date(this.state.rowInceptiondate);\n        \n        var renewalMonth = \"\";\n        if(t.getMonth() + 1 < 10){\n            renewalMonth = \"0\"+ (t.getMonth() + 1);  \n        }  \n        else{\n            renewalMonth = (t.getMonth() + 1);\n        } \n        let renewalValue = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n        let finalRenewalDate = {\n            value : renewalMonth,\n            label : renewalValue[0].StringMapName\n        }\n        this.setState({\n            notesdescription: '', notesdescriptionError: true,\n            responseType: '',\n            notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),\n            notesInceptionDate1: moment(this.state.inceptionDate).format('YYYY-MM-DD'),\n            reasonType: '',\n            DateTime: '',\n            renewalMonth: finalRenewalDate,\n            contactMode:'',\n            isImportant: 0,\n            isEditDate: false,\n            isEditRenewalMonth: false,\n\n        });\n\n        this.show(\"notesdescription\", false);\n\n        this.setState({ addNoteCollapse: false });\n    }\n\n    saveNotesNewBusiness = () => {\n        if (this.state.notesdescriptionError === false) {\n            if (this.state.responseType == \"\") {\n                toast.error('Please Select Response Type');\n                return\n            }\n\n            if (this.state.responseType == \"Not Interested\") {\n                if (this.state.reasonType == \"\") {\n                    toast.error('Please Select Reason Type');\n                    return\n                }\n            }\n\n            if (this.state.contactMode == \"\") {\n                toast.error('Please Select Contact mode');\n                return\n            }\n            \n            if (this.state.renewalMonth == \"\") {\n                toast.error('Please Select Renewal Month');\n                return\n            }\n            var data = {\n                'EntityType': 'Policy',\n                'EntityId': this.state.NavID,\n                'PolicyId': this.state.NavID,\n                'isflag': this.state.isImportant,\n                'Response': this.state.responseType,\n                'Reason': this.state.reasonType,\n                'NoteText': this.state.notesdescription.trim(),\n                'FollowUpDateTime': this.state.DateTime,\n                // 'RenewalMonth': this.state.renewalMonth,\n                'InceptionDate': this.state.notesInceptionDate1,\n                'ContactMode': this.state.contactMode,\n                'CurrentUser': CommonConfig.loggedInUserData().EntityId\n            }\n            console.log(\"dataaaaaa..........\",data)\n            api.post('api/saveFollowUpNote', data).then(res => {\n                console.log(\"dataaaaaa..........\",res)\n\n                if (res.data.success) {\n                    this.resetNewBusiness();\n                    toast.success('Follow-Up note added successfully');\n                    this.getNoteList({ PolicyId: this.state.currentPolicyId });\n                } else {\n                    toast.error(res.data.msg);\n                }\n            }).catch(err => {\n            });\n        } else {\n            if(this.state.responseType ==''){\n                this.show(\"responseType\", true, \"responseTypeError\" , \"Please Select Response\" )\n            }\n            if(this.state.contactMode ==''){\n                this.show(\"contactMode\", true, \"contactModeError\" , \"Please Select Contact mode\" )\n            }\n            if(this.state.renewalMonth ==''){\n                this.show(\"renewalMonth\", true, \"renewalMonthError\" , \"Please Select Renewal month\" )\n            }\n            this.show(\"notesType\", this.state.NotesTypeError);\n            this.show(\"notesdescription\", this.state.notesdescriptionError);\n        }\n    }\n\n    // show(field, condition) {\n    //     if (condition) {\n    //         document.getElementById(field).className = \"form-control is-invalid\";\n    //     } else {\n    //         document.getElementById(field).className = \"form-control\";\n    //     }\n    // }\n\n    \n    show(field, condition, errorField, message) {\n        if (condition) {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control is-invalid\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n        } else {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = null;\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n        if (e.target.name === 'notesdescription') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ notesdescriptionError: true });\n                this.show(\"notesdescription\", true);\n            } else {\n                this.setState({ notesdescriptionError: false, notesdescription: e.target.value });\n                this.show(\"notesdescription\", false);\n            }\n        }\n\n        if (e.target.name === 'policyFrom') {\n            if (e.target.value === '' || e.target.value === null) {\n                this.setState({ policyFrom: '' });\n            } else {\n                this.setState({ policyFrom: e.target.value, policyTo: '' });\n                this.show('policyTo', false, 'policyToError', '');\n            }\n        }\n\n        if (e.target.name === 'policyTo') {\n            if (e.target.value === '' || e.target.value === null) {\n                this.setState({ policyTo: '' });\n            } else {\n                if (!CommonConfig.isEmpty(this.state.policyFrom)) {\n                    var isToDateGreater = moment(e.target.value).isSameOrAfter(this.state.policyFrom);\n                    if (!isToDateGreater) {\n                        this.show('policyTo', true, 'policyToError', 'To date must be greater then From date.');\n                    } else {\n                        this.show('policyTo', false, 'policyToError', '');\n                    }\n                } else {\n                    this.show('policyTo', false, 'policyToError', '');\n                }\n                this.setState({ policyTo: e.target.value });\n            }\n        }\n        if(e.target.name === 'inceptionDate'){\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ inceptionDateError: true });\n                this.show(\"inceptionDate\", true, \"inceptionDateError\", \"Please enter Inception Date\");\n            }else {  \n                var t = new Date(e.target.value);\n                var renewalMonth = \"\";\n                if(t.getMonth() + 1 < 10){\n                    renewalMonth = \"0\"+ (t.getMonth() + 1);  \n                }  \n                else{\n                    renewalMonth = (t.getMonth() + 1);\n                } \n                let data = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n                var inceptionDate = moment(e.target.value).format('DD-MM-YYYY');                \n                console.log(\"data.......\",e.target.value);\n                let finalRenewalDate = {\n                    value : renewalMonth,\n                    label : data[0].StringMapName\n                }\n                this.setState({ notesInceptionDate: inceptionDate ,notesInceptionDate1: e.target.value, inceptionDateError: false ,renewalMonth: finalRenewalDate });\n                this.show('inceptionDate', false , \"inceptionDateError\", \"\");\n            }\n        }\n    }\n\n    reset = () => {\n        this.setState({\n            notesdescription: '', notesdescriptionError: true,\n            notesType: '', NotesTypeError: true,\n            isImportant: 0,\n        });\n        this.show(\"notesdescription\", false);\n        this.show('notesType', false);\n\n        this.setState({ addNoteCollapse: false });\n    }\n\n\n\n    render() {\n        const { t, i18n } = this.props;\n\n        let columns = this.state.cols.map((col, i) => {\n            return <Column key={i} field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode={col.filterMatchMode}/>;\n        });\n\n        if (this.props.isIdleTimeOut) {\n            this.props.history.push('/')\n        }\n\n        return (\n            <div className=\"animated fadeIn\">\n                <div className=\"table-custom\">\n                    <Row>\n                        <Col md='2'>\n                            <h4>{this.state.policyStage} </h4>\n                            {/* <h4>{this.state.policyStage} ({this.state.policyCount})</h4> */}\n                        </Col>\n                        {CommonConfig.loggedInUserData().SecurityGroupName == 'Underwriting' ? <Col md='2'>\n                            <label>Select Dashboard</label>\n                            <Input type=\"select\" name=\"TeamType\" id=\"TeamType\" value={this.state.TeamType} onChange={(e) => this.selectType(e.target, 'TeamType')}>\n                                <option value=\"\">Select Team Type</option>\n                                {this.state.SecurityGroupList.map((item, i) => {\n                                    return (<option value={item.value} key={i}>{item.label}</option>)\n                                })\n                                }\n                            </Input>\n                        </Col> : null}\n                        <Col md='10' style={{ textAlign: \"right\" }}>\n                            {this.state.StageCountData.map((ct, i) => {\n                                return (<div className={this.state.policyStage == ct.StringMapKey ? \"dashbordSelectorSelect\" : ''} style={{ display: 'inline-block', marginRight: 7, textDecoration: \"underline\", cursor: \"pointer\", fontSize: '15px' }} onClick={() => this.getPolicyList(ct)}>{ct.StringMapKey}({ct.Count})</div>)\n                            })}\n                        </Col>\n                    </Row>\n                    <Row>\n\n                        <CardBody>\n                            <Form onSubmit={e => e.preventDefault()}>\n                                <div>\n                                    <Row>\n                                        <Col md=\"2\">\n                                            <div className=\"input-box\">\n                                                <label>Policy Type</label>\n                                                <Input type=\"select\" name=\"policyType\" id=\"policyType\" value={this.state.policyType} onChange={(e) => this.selectType(e.target, 'policyType')}>\n                                                    <option value=\"\">Select Policy Type</option>\n                                                    {this.state.policyTypeArray.map((policyType, i) => {\n                                                        return (<option value={policyType.StringMapKey} key={i}>{policyType.StringMapName}</option>)\n                                                    })\n                                                    }\n                                                </Input>\n                                                <em id=\"policyTypeError\" className=\"error invalid-feedback\"></em>\n                                            </div>\n                                        </Col>\n                                        {this.state.TeamType == 'Underwriting' ? null :\n                                        <Col md=\"5\">\n    \n                                            <Row>\n                                                {(this.state.isMonthYear) ? (\n                                                    <Col md=\"4\">\n                                                        <div className=\"input-box\">\n                                                            <label>Month</label>\n                                                            <Input type=\"select\" name=\"policyMonth\" id=\"policyMonth\" value={this.state.policyMonth} onChange={(e) => this.selectType(e.target, 'policyMonth')}>\n                                                                <option value=\"\">Select Month</option>\n                                                                {this.state.monthArray.map((month, i) => {\n                                                                    return (<option value={month.value} key={i}>{month.label}</option>)\n                                                                })\n                                                                }\n                                                            </Input>\n                                                            <em id=\"policyMonthError\" className=\"error invalid-feedback\"></em>\n                                                        </div>\n                                                    </Col>\n                                                ) : (\n                                                        <Col md=\"4\">\n                                                            <div className=\"input-box\">\n                                                                <label>From</label>\n                                                                <Input type=\"date\" name=\"policyFrom\" id=\"policyFrom\"\n                                                                    value={this.state.policyFrom}\n                                                                    onBlur={(e) => this.handleChange(e)}\n                                                                    onChange={(e) => this.handleChange(e)} />\n                                                                <em id=\"policyFromError\" className=\"error invalid-feedback\"></em>\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                {(this.state.isMonthYear) ? (\n                                                    <Col md=\"4\">\n                                                        <div className=\"input-box\">\n                                                            <label>Year</label>\n                                                            <Input type=\"select\" name=\"policyYear\" id=\"policyYear\" value={this.state.policyYear} onChange={(e) => this.selectType(e.target, 'policyYear')}>\n                                                                <option value=\"\">Select Year</option>\n                                                                {this.state.yearArray.map((year, i) => {\n                                                                    return (<option value={year.value} key={i}>{year.label}</option>)\n                                                                })\n                                                                }\n                                                            </Input>\n                                                            <em id=\"policyYearError\" className=\"error invalid-feedback\"></em>\n                                                        </div>\n                                                    </Col>\n                                                ) : (\n                                                        <Col md=\"4\">\n                                                            <div className=\"input-box\">\n                                                                <label>To</label>\n                                                                <Input type=\"date\" name=\"policyTo\" id=\"policyTo\"\n                                                                    value={this.state.policyTo}\n                                                                    onBlur={(e) => this.handleChange(e)}\n                                                                    onChange={(e) => this.handleChange(e)} />\n                                                                <em id=\"policyToError\" className=\"error invalid-feedback\"></em>\n                                                            </div>\n                                                        </Col>\n                                                    )}\n\n                                                <Col md=\"4\" style={{ alignSelf: 'center' }}>\n                                                    {(this.state.isMonthYear) ? (\n                                                        <label style={{ textDecoration: 'underline' }} onClick={() => this.changePolicyDateView()}>Change to Date Range</label>\n                                                    ) : (\n                                                            <label style={{ textDecoration: 'underline' }} onClick={() => this.changePolicyDateView()}>Change to Month/Year</label>\n                                                        )}\n                                                </Col>\n                                            </Row>\n                                        {/* } */}\n                                        </Col>\n                                    \n                                        }\n                                        <Col md=\"1\">\n                                            <div className=\"input-box\">\n                                                <label>Language</label>\n                                                <Input type=\"select\" name=\"language\" id=\"language\" value={this.state.language} onChange={(e) => this.selectType(e.target, 'language')}>\n                                                    <option value=\"All\">All</option>\n                                                    {this.state.languageList.map((x) => {\n                                                        return (<option value={x.value}>{x.label}</option>)\n                                                    })\n                                                    }\n                                                </Input>\n                                            </div>\n                                        </Col>\n                                        <Col md=\"1\">\n                                            <div className=\"input-box\">\n                                                <label>Me or All</label>\n                                                <Input type=\"select\" name=\"MeOrAll\" id=\"MeOrAll\" value={this.state.meOrAll} onChange={(e) => this.selectType(e.target, 'meOrAll')}>\n                                                    {this.state.meOrAllList.map((x) => {\n                                                        return (<option value={x.value}>{x.label}</option>)\n                                                    })\n                                                    }\n                                                </Input>\n                                            </div>\n                                        </Col>\n                                        <Col md=\"1\">\n                                            <div className='input-box'>\n                                                <Row>\n                                               <Col md=\"8\" style={{ marginTop:\"25px\"}}>\n                                                <label>Sub Agent</label></Col>\n                                                <Col md='4'  style={{ marginTop:\"25px\"}}>\n                                                <Input type=\"checkbox\" name=\"isSubAgent\" id=\"isSubAgent\" checked={this.state.isSubAgent} onChange={() => this.onSubAgentChange(!this.state.isSubAgent)} value={this.state.isSubAgent} />\n                                                </Col>\n\n                                                </Row>\n                                            </div>\n                                        </Col>\n                                        <Col md=\"2\" className=\"text-left\" style={{ alignSelf: 'center' }}>\n                                            <BTN type=\"submit\" color=\"success\" title=\"Go\" style={{ marginRight: '5px' }} onClick={() => this.getPolicyList({ 'StringMapKey': this.state.policyStage, 'Count': this.state.policyCount })}> Go </BTN>\n\n                                            {(this.state.policyStage == 'Lead' && CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ) ? \n                                                <BTN type=\"button\" color=\"success\" title=\"New Lead\" onClick={() => this.goToLeadPage()}> New Lead </BTN>\n                                                : null }\n                                        </Col>\n                                    </Row>\n                                    {/* <Row>\n                                        <Col md=\"5\">\n                                            <div className=\"input-box\">\n                                                <label>Me or All</label>\n                                                <Input type=\"select\" name=\"MeOrAll\" id=\"MeOrAll\" value={this.state.meOrAll} onChange={(e) => this.selectType(e.target, 'meOrAll')}>\n                                                    {this.state.meOrAllList.map((x) => {\n                                                        return (<option value={x.value}>{x.label}</option>)\n                                                    })\n                                                    }\n                                                </Input>\n                                            </div>\n                                        </Col>\n                                    </Row> */}\n                                </div>\n                            </Form>\n                        </CardBody>\n                    </Row>\n                    <DataTable\n                        ref={(el) => this.dt = el}\n                        value={this.state.policyList}\n                        first={this.state.selectedPage}\n                        onPage={(e) => this.onPage(e)}\n                        paginator={true}\n                        rows={this.state.rowsPerPage}\n                        totalRecords={this.state.policyList.length}\n                        exportFilename=\"StringMap List\"\n                        currentPageReportTemplate={this.state.str}\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                        rowsPerPageOptions={this.state.rowsPerPageOptions}\n                        globalFilter={this.state.globalFilter}\n                        emptyMessage=\"No records found\"\n                        responsive={true}\n                        resizableColumns={true}\n                        columnResizeMode=\"fit\"\n                        scrollable={true}\n                        scrollHeight=\"340px\">\n                        <Column selectionMode=\"multiple\" style={{ width: '3em' }} />\n                        {columns}\n                    </DataTable>\n                </div>\n\n                <Modal isOpen={this.state.openNotePopup} className={'modal-lg'} style={{ maxWidth: '70%' }}>\n                    <ModalHeader toggle={() => this.setState({ openNotePopup: false })}> Notes </ModalHeader>\n\n                    <ModalBody>\n                        <Card className=\"mb-0\">\n                            <CardHeader id=\"headingOne\">\n                                <BTN block color=\"link\" className=\"text-left m-0 p-0\" onClick={() => this.setState({ addNoteCollapse: !this.state.addNoteCollapse })} aria-expanded={this.state.addNoteCollapse} aria-controls=\"collapseOne\">\n                                    <h5 className=\"m-0 p-0\"> AddNotes <i style={{ float: \"right\" }} className={this.state.addNoteCollapse ? \"fa fa-chevron-up\" : \"fa fa-chevron-down\"}></i> </h5>\n                                </BTN>\n                            </CardHeader>\n\n                            <Collapse isOpen={this.state.addNoteCollapse} data-parent=\"#accordion\" id=\"collapseOne\" aria-labelledby=\"headingOne\">\n                                <form onSubmit={this.handleSubmit} style={{ padding: 10 }}>\n                                    {CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                                        (<>\n                                        <Row>\n                                            <Col md='4'>\n                                                <label>Contact Mode</label>\n\n                                                    <Input type=\"select\" name =\"contactMode\" id=\"contactMode\" onChange={(e) => this.selectType(e.target,'contactMode')} value={this.state.contactMode}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.contactModeList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }\n                                                    </Input>\n                                                    <em id=\"contactModeError\" className=\"error invalid-feedback\"></em>\n\n                                                {/* </div> */}\n                                            </Col>\n                                            {!this.state.isEditRenewalMonth ? \n                                            <Col md='4'>\n                                                <label> Renewal Month : {CommonConfig.isEmpty(this.state.renewalMonth) !== true ? this.state.renewalMonth.label : this.state.renewalMonth}</label>\n                                                <>\n                                                    <BTN style={{ float: \"right\" }} color=\"primary\"\n                                                        onClick={this.state.isEditRenewalMonth ? () => this.editRenewalMonth(\"view\") : () => this.editRenewalMonth(\"edit\")}\n                                                    >\n                                                    <i className=\"fa fa-pencil\"></i>\n                                                        \n                                                    </BTN>\n                                                    </>\n                                            </Col>\n                                            :\n                                            <Col md='4'>\n                                                <>\n                                                <label> Renewal Month :</label>\n\n                                                    <Input type=\"select\" name =\"renewalMonth\" id=\"renewalMonth\" onChange={(e) => this.selectType(e.target,'renewalMonth')} value={this.state.renewalMonth.value}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.renewalMonthList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }    \n                                                    </Input>\n                                                    <em id=\"renewalMonthError\" className=\"error invalid-feedback\"></em>\n                                                {/* </div> */}\n                                                </>\n                                                 \n                                            </Col>\n                                            }\n                                            {!this.state.isEditDate?\n                                            <Col md='4'>\n                                                <label>Inception date: {this.state.notesInceptionDate}</label>\n                                                \n                                                <BTN style={{ float: \"right\" }} color=\"primary\"\n                                                    onClick={this.state.isEditDate ? () => this.editDate(\"view\") : () => this.editDate(\"edit\")}\n                                                >\n                                                <i className=\"fa fa-pencil\"></i>\n                                                </BTN>\n                                                \n                                            </Col>\n                                            :<Col md='4'>\n                                                <label>Inception date: {this.state.notesInceptionDate}</label>\n                                                <div>\n                                                    <Input type='date' name=\"inceptionDate\" id=\"inceptionDate\"\n                                                        placeholder=\"Inception Date\"\n                                                        style={{ width: '80%', display: \"inline-block\" }}\n                                                        onChange={(e) => this.handleChange(e ,'inceptionDate')}\n                                                        value={this.state.notesInceptionDate1}\n                                                    />\n                                                    <em id=\"iceptionDateError\" className=\"error invalid-feedback\"></em>\n                                                </div>\n\n                                                {/* <label>Inception date: </label>\n                                                <Input type=\"date\" id=\"inceptionDate\" name=\"inceptionDate\"\n                                                        value={moment(this.state.notesInceptionDate).format('DD-MM-YYYY')}\n                                                        onChange={(e) => this.handleChange(e, 'inceptionDate')}\n                                                >\n                                                </Input>\n                                                <em id=\"iceptionDateError\" className=\"error invalid-feedback\"></em> */}\n                                            </Col>\n                                            }\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"3\">\n                                                <div className=\"input-box with-icon\">\n                                                    <label>Response*</label>\n                                                    <Input type=\"select\" name=\"responseType\" id=\"responseType\" onChange={(e) => this.selectType(e.target, 'responseType')} value={this.state.responseType}>\n                                                        <option value=''>Select</option>\n                                                        {this.state.ResponseTypeArray.map((ct, i) => {\n                                                            return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                                                        })\n                                                        }\n                                                    </Input>\n                                                    <em id=\"responseTypeError\" className=\"error invalid-feedback\"></em>\n                                                </div>\n                                            </Col>\n                                            {this.state.showReasonDD ?\n                                                (<Col md=\"6\">\n                                                    <div className=\"input-box with-icon\">\n                                                        <label>Reason</label>\n                                                        <Input type=\"select\" name=\"reasonType\" id=\"reasonType\" onChange={(e) => this.selectType(e.target, 'reasonType')} value={this.state.reasonType}>\n                                                            <option value=''>Select</option>\n                                                            {this.state.ReasonArray.map((ct, i) => {\n                                                                return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                                                            })\n                                                            }\n                                                        </Input>\n                                                    </div>\n                                                </Col>) : (null)}\n                                        </Row>\n                                        </>) \n                                    : (null)}\n                                    <Row>\n                                        <Col md=\"6\">\n                                            {CommonConfig.loggedInUserData().SecurityGroupName != \"New Business\" ?\n                                                (<div className=\"input-box with-icon\">\n                                                    <label>{t(\"contactNotes:NotesType.label\")}*</label>\n                                                    <Input type=\"select\" name=\"notesType\" id=\"notesType\" onChange={(e) => this.selectType(e.target, 'notesType')} value={this.state.notesType}>\n                                                        <option value=''>{t(\"contactNotes:NotesType.placeholder\")}</option>\n                                                        {this.state.noteType.map((ct, i) => {\n                                                            return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                                                        })\n                                                        }\n                                                    </Input>\n                                                    <em className=\"error invalid-feedback\">{t(\"contactNotes:NotesType.error_blank\")}</em>\n                                                </div>) : (null)}\n                                            <a title={t(\"contactNotes:ImportantNotes\")} href=\"javascript:void(0)\" onClick={() => this.Important()} style={{ color: this.state.isImportant === 0 ? '#aaaaaa' : '#ff0000', fontSize: 25 }}><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i></a>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md=\"12\">\n                                            <div className=\"input-box\">\n                                                <label>{t(\"contactNotes:Notes.label\")}*</label>\n                                                <Input type=\"textarea\" name=\"notesdescription\" id=\"notesdescription\" placeholder={t(\"contactNotes:Notes.placeholder\")} value={this.state.notesdescription} onChange={e => this.handleChange(e)} autoResize={true} />\n                                                <em className=\"error invalid-feedback\">{t(\"contactNotes:Notes.error_blank\")}</em>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    {CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                                        (<Row>\n                                            <Col md=\"6\">\n                                                <div className=\"input-box with-icon\">\n                                                    <label>Next Follow-Up Date & Time</label>\n                                                    <Input type=\"datetime-local\" id=\"DateTime\" name=\"DateTime\"\n                                                        value={this.state.DateTime}\n                                                        onChange={(e) => this.handleChange(e, 'DateTime')}>\n                                                    </Input>\n                                                </div>\n                                            </Col>\n                                        </Row>) : (null)}\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            {(this.state.isNoteEdit) ?\n                                                (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                                                    (<div className=\"pull-right\">\n                                                        <BTN color=\"success\" onClick={() => this.saveNotesNewBusiness()}><i class=\"fa fa-check\"></i> Update</BTN>{' '}\n                                                        <BTN color=\"primary\" onClick={() => this.resetNewBusiness()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                                                    </div>)\n                                                    : (<div className=\"pull-right\">\n                                                        <BTN color=\"success\" onClick={() => this.saveNotes()}><i class=\"fa fa-check\"></i> Update</BTN>{' '}\n                                                        <BTN color=\"primary\" onClick={() => this.reset()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                                                    </div>)\n                                                ) : (\n                                                    (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                                                        (<div className=\"pull-right\">\n                                                            <BTN color=\"success\" onClick={() => this.saveNotesNewBusiness()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                                                            <BTN color=\"primary\" onClick={() => this.resetNewBusiness()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                                                        </div>) : (<div className=\"pull-right\">\n                                                            <BTN color=\"success\" onClick={() => this.saveNotes()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                                                            <BTN color=\"primary\" onClick={() => this.reset()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                                                        </div>))\n                                                )\n                                            }\n                                        </Col>\n                                    </Row>\n                                </form>\n                            </Collapse>\n                        </Card>\n\n                        <div className=\"added-note-outer\">\n                            <h4>{this.state.policyNoteList.length} notes</h4>\n                            <ul>\n                                {\n                                    this.state.policyNoteList.map((notes, i) => {\n                                        return (\n                                            <li>\n                                                <div className=\"addednote-left\">\n                                                    <span style={{ color: notes.IsFlag.data[0] === 0 ? '#aaaaaa' : '#ff0000' }}><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i></span>\n                                                    <h3>{notes.NoteType}</h3>\n                                                    {(notes.ContactMode == null || notes.ContactMode == '') && (notes.RenewalMonth == null || notes.RenewalMonth == '' ) ? null:\n                                                     <Row>\n                                                       {notes.ContactMode == null || notes.ContactMode == ''? null :\n                                                       <Col md='6'>\n                                                         <p><b>Contact Mode:</b> {notes.ContactMode}</p> \n                                                       </Col>\n                                                       }\n                                                       {notes.RenewalMonth == null || notes.RenewalMonth == ''? null:\n                                                       <Col md='6'>\n                                                         <p><b>Renewal Month:</b> {notes.RenewalMonth}</p> \n                                                       </Col>\n                                                       }\n                                                     </Row>\n                                                     }\n                                                     {(notes.Response == null || notes.Response == '') && (notes.Reason == null || notes.Reason == '' ) ? null:\n                                                     <Row>\n                                                       {notes.Response == null || notes.Response == ''? null:\n                                                         <Col md=\"6\">\n                                                           <p><b>Response:</b> {notes.Response}</p> \n                                                         </Col>\n                                                       }\n                                                       <Col md='6'>\n                                                       {notes.Reason == null || notes.Reason == '' ? null: <p><b>Reason: </b> {notes.Reason}</p> }\n                                                       </Col>\n                                                     </Row>\n                                                     }\n                                                     {notes.FollowUpDateTime == '0000-00-00 00:00:00' || notes.FollowUpDateTime == null || notes.FollowUpDateTime == \"\" ? null :\n                                                       <Row>\n                                                         <Col>\n                                                           <p><b>Follow Up DateTime: </b> {moment(notes.FollowUpDateTime).format(CommonConfig.dateFormat.dateTime)}</p> \n                                                         </Col>\n                                                       </Row>\n                                                    }\n                                                    {/* {(CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") ?\n                                                        (<div>\n                                                            <Row>\n                                                                <Col md='6'>\n                                                                <p><b>Conatact Mode:</b> {notes.ContactMode}</p> \n                                                                </Col>\n                                                                <Col md='6'>\n                                                                <p><b>Renewal Month:</b> {notes.RenewalMonth}</p> \n                                                                </Col>\n\n                                                            </Row>\n                                                            <Row>\n                                                                <Col md=\"6\">\n                                                                <p><b>Response:</b> {notes.Response}</p> \n                                                                </Col>\n                                                                <Col md='6'>\n                                                                    {notes.Reason != null && notes.Reason != '' ? <p><b>Reason: </b> {notes.Reason}</p> : null}\n                                                                </Col>\n                                                            </Row>\n                                                            <Row>\n                                                            {notes.FollowUpDateTime == '0000-00-00 00:00:00' || notes.FollowUpDateTime != \"Invalid date\"|| notes.FollowUpDateTime != \"\" ? null :\n                                                              <Col>\n                                                              <p><b>Follow Up DateTime: </b> {moment(notes.FollowUpDateTime).format(CommonConfig.dateFormat.dateTime)}</p> \n                                                              </Col>\n                                                              }\n                                                            </Row>\n                                                        </div>) : (null)} */}\n                                                    <div><ShowMoreText\n                                                            lines={2}\n                                                            more='Show more'\n                                                            less='Show less'\n                                                            anchorClass=''\n                                                            onClick={this.executeOnClick}\n                                                            expanded={false}>\n                                                            {notes.NoteText}\n                                                        </ShowMoreText>\n                                                    </div>\n                                                    <Row>\n                                                        <Col md='6'>\n                                                            <p><b>Added By: </b> </p>\n                                                            <span className=\"date\" style={{ marginRight: 10 }}><i class=\"fa fa-user\" aria-hidden=\"true\"></i> {notes.CreatedByName}</span>\n                                                            <span className=\"date\"><i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> {moment(notes.CreatedOn).format(CommonConfig.dateFormat.dateTime)}</span>\n                                                        </Col>\n                                                        {(notes.UpdatedByName != null) ? (\n                                                            <Col md='6'>\n                                                                <p><b>Updated By</b></p>\n                                                                <span className=\"date\" style={{ marginRight: 10 }}><i class=\"fa fa-user\" aria-hidden=\"true\"></i> {notes.UpdatedByName}</span>\n                                                                <span className=\"date\"><i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> {moment(notes.UpdatedOn).format(CommonConfig.dateFormat.dateTime)}</span>\n                                                            </Col>\n                                                        ) : (null)}\n                                                    </Row>\n                                                </div>\n\n                                            </li>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </div>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(Dashboard);\n"]},"metadata":{},"sourceType":"module"}