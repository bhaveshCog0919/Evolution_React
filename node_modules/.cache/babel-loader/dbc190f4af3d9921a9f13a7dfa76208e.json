{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/SidebarNav/Notes.js\";\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { Sidebar } from 'primereact/sidebar';\nimport { ScrollPanel } from 'primereact/scrollpanel';\nimport { Button } from 'primereact/button';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button as BTN, Row, Col, Input, Card, CardHeader, CardBody, Collapse } from 'reactstrap';\nimport api from '../../utils/apiClient';\nimport APIConstant from '../../utils/constants';\nimport moment from 'moment';\nimport { CommonConfig } from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport ShowMoreText from 'react-show-more-text';\n\nclass PersonNotes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loading = () => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"animated fadeIn pt-1 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, \"Loading...\");\n\n    this.saveNotes = () => {\n      if (this.state.NotesTypeError === false && this.state.notesdescriptionError === false) {\n        const NotesForm = new FormData();\n        NotesForm.append('noteId', this.state.noteID);\n        NotesForm.append('notesType', this.state.notesType);\n        NotesForm.append('notesdescription', this.state.notesdescription.trim());\n        NotesForm.append('entityid', this.state.EntityId);\n        NotesForm.append('entitytype', this.state.EntityType);\n        NotesForm.append('isflag', this.state.isImportant);\n        NotesForm.append('loggedInUserId', CommonConfig.loggedInUserId());\n        NotesForm.append('languageId', this.state.LanguageId);\n        api.post('api/addNotes', NotesForm).then(res => {\n          if (res.success) {\n            this.reset();\n            toast.success('Notes added successfully');\n            toast.success(res.message);\n            this.getNoteList();\n          } else {}\n        }).catch(err => {});\n      } else {\n        this.show(\"notesType\", this.state.NotesTypeError);\n        this.show(\"notesdescription\", this.state.notesdescriptionError);\n      }\n    };\n\n    this.saveNotesNewBusiness = () => {\n      if (this.state.notesdescriptionError === false) {\n        if (this.state.responseType == \"\") {\n          toast.error('Please Select Response Type');\n          return;\n        }\n\n        if (this.state.responseType == \"Not Interested\") {\n          if (this.state.reasonType == \"\") {\n            toast.error('Please Select Reason Type');\n            return;\n          }\n        }\n\n        if (this.state.contactMode == \"\") {\n          toast.error('Please Select Contact mode');\n          return;\n        }\n\n        if (this.state.renewalMonth == \"\") {\n          toast.error('Please Select Renewal Month');\n          return;\n        }\n\n        var data = {\n          'EntityType': 'Policy',\n          'EntityId': this.state.NavID,\n          'PolicyId': this.state.NavID,\n          'isflag': this.state.isImportant,\n          'Response': this.state.responseType,\n          'Reason': this.state.reasonType,\n          'NoteText': this.state.notesdescription.trim(),\n          'FollowUpDateTime': this.state.DateTime,\n          // 'RenewalMonth': this.state.renewalMonth,\n          'InceptionDate': this.state.notesInceptionDate1,\n          'ContactMode': this.state.contactMode,\n          'CurrentUser': CommonConfig.loggedInUserData().EntityId\n        };\n        console.log(\"dataaaaaa..........\", data);\n        api.post('api/saveFollowUpNote', data).then(res => {\n          if (res.data.success) {\n            toast.success('Follow-Up note added successfully');\n            this.resetNewBusiness();\n            this.getNoteList({\n              PolicyId: this.state.NavID\n            });\n          } else {\n            toast.error(res.data.msg);\n          }\n        }).catch(err => {});\n      } else {\n        if (this.state.responseType == '') {\n          this.show(\"responseType\", true, \"responseTypeError\", \"Please Select Response\");\n        }\n\n        if (this.state.contactMode == '') {\n          this.show(\"contactMode\", true, \"contactModeError\", \"Please Select Contact mode\");\n        }\n\n        if (this.state.renewalMonth == '') {\n          this.show(\"renewalMonth\", true, \"renewalMonthError\", \"Please Select Renewal month\");\n        }\n\n        this.show(\"notesType\", this.state.NotesTypeError);\n        this.show(\"notesdescription\", this.state.notesdescriptionError);\n      }\n    };\n\n    this.resetNewBusiness = () => {\n      var t = new Date(this.state.InceptionDate);\n      var renewalMonth = \"\";\n\n      if (t.getMonth() + 1 < 10) {\n        renewalMonth = \"0\" + (t.getMonth() + 1);\n      } else {\n        renewalMonth = t.getMonth() + 1;\n      }\n\n      let renewalValue = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n      let finalRenewalDate = {\n        value: renewalMonth,\n        label: renewalValue[0].StringMapName\n      };\n      this.setState({\n        notesdescription: '',\n        notesdescriptionError: true,\n        responseType: '',\n        notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),\n        notesInceptionDate1: moment(this.state.inceptionDate).format('YYYY-MM-DD'),\n        reasonType: '',\n        DateTime: '',\n        renewalMonth: finalRenewalDate,\n        contactMode: '',\n        isImportant: 0,\n        isEditDate: false,\n        isEditRenewalMonth: false\n      });\n      this.show(\"notesdescription\", false);\n      this.setState({\n        addNoteCollapse: false\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'notesdescription') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            notesdescriptionError: true\n          });\n          this.show(\"notesdescription\", true);\n        } else {\n          this.setState({\n            notesdescriptionError: false,\n            notesdescription: e.target.value\n          });\n          this.show(\"notesdescription\", false);\n        }\n      }\n\n      if (e.target.name === 'inceptionDate') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            inceptionDateError: true\n          });\n          this.show(\"inceptionDate\", true, \"inceptionDateError\", \"Please enter Inception Date\");\n        } else {\n          var t = new Date(e.target.value);\n          var renewalMonth = \"\";\n\n          if (t.getMonth() + 1 < 10) {\n            renewalMonth = \"0\" + (t.getMonth() + 1);\n          } else {\n            renewalMonth = t.getMonth() + 1;\n          }\n\n          let data = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n          var inceptionDate = moment(e.target.value).format('DD-MM-YYYY');\n          console.log(\"data.......\", e.target.value);\n          let finalRenewalDate = {\n            value: renewalMonth,\n            label: data[0].StringMapName\n          };\n          this.setState({\n            notesInceptionDate: inceptionDate,\n            notesInceptionDate1: e.target.value,\n            inceptionDateError: false,\n            renewalMonth: finalRenewalDate\n          });\n          this.show('inceptionDate', false, \"inceptionDateError\", \"\");\n        }\n      }\n    };\n\n    this.updateNotes = data => {\n      this.setState({\n        isNoteEdit: true,\n        notesdescription: data.NoteText,\n        notesdescriptionError: false,\n        notesType: data.NoteType,\n        NotesTypeError: false,\n        isImportant: data.IsFlag.data[0],\n        noteID: data.NoteId,\n        addNoteCollapse: true\n      });\n      this.show(\"notesdescription\", false);\n      this.show('notesType', false);\n    };\n\n    this.reset = () => {\n      this.setState({\n        isNoteEdit: false,\n        notesdescription: '',\n        notesdescriptionError: true,\n        notesType: '',\n        NotesTypeError: true,\n        noteID: '',\n        isImportant: 0\n      });\n      this.show(\"notesdescription\", false);\n      this.show('notesType', false);\n    };\n\n    this.state = {\n      Type: [],\n      noteList: [],\n      isImportant: 0,\n      notesType: '',\n      notesdescription: '',\n      NotesTypeError: true,\n      notesdescriptionError: true,\n      noteID: '',\n      isNoteEdit: false,\n      ReasonArray: [],\n      ResponseTypeArray: [],\n      showReasonDD: false,\n      responseType: '',\n      responseTypeError: false,\n      reasonTypeError: false,\n      reasonType: '',\n      DateTime: '',\n      reasonsShow: false,\n      contactMode: '',\n      contactModeError: false,\n      contactModeList: [],\n      renewalMonth: '',\n      renewalMonthList: [],\n      renewalMonthError: false,\n      notesInceptionDate: '',\n      notesInceptionDate1: '',\n      isEditRenewalMonth: false,\n      isEditDate: false,\n      InceptionDate: '',\n      SecurityGroupList: [{\n        label: 'New Business',\n        value: 'New Business'\n      }, {\n        label: 'Renewal',\n        value: 'Renewal'\n      }, {\n        label: 'Underwriting',\n        value: 'Underwriting'\n      }],\n      EntityId: '',\n      EntityType: '',\n      LanguageId: props.i18n.language === 'en' ? 'en-GB' : props.i18n.language === 'es' ? 'es-ES' : props.i18n.language === 'ie' ? 'en-IE' : props.i18n.language,\n      addNoteCollapse: false\n    }; // This data we will get from Policy and Contact pages.\n\n    if (props.NavPage) {\n      this.state.NavPage = props.NavPage;\n      this.state.EntityType = props.NavPage;\n      this.state.InceptionDate = props.inceptionDate;\n    }\n\n    if (props.NavID) {\n      this.state.NavID = props.NavID;\n      this.state.EntityId = props.NavID;\n    }\n  }\n\n  async componentDidMount() {\n    await this.getDropDownValues('MONTH', 'renewalMonthList'); // await this.getPolicyHolder();\n\n    await this.getDropDownValues('CONTACTMODE', 'contactModeList'); // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n\n    await this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray');\n    await this.getNoteList();\n    await this.getNotesType();\n  }\n\n  async getPolicyHolder() {\n    const data = {\n      policyId: this.state.EntityId\n    };\n    console.log(\"getPolicyHolderDetails\", data);\n    await api.post('api/getPolicyHolderDetails', data).then(res => {\n      console.log(\"getPolicyHolderDetails\", res);\n\n      if (res.success) {\n        let resdata = res.data[0];\n        console.log(\"getPolicyHolderDetails\", resdata[0]);\n        this.setState({\n          InceptionDate: resdata[0].InceptionDate\n        });\n      } else {}\n    }).catch(err => {\n      console.log('error', err);\n    });\n  }\n\n  async getNoteList() {\n    var t = this.state.InceptionDate ? new Date(this.state.InceptionDate) : new Date();\n    var renewalMonth = \"\";\n\n    if (t.getMonth() + 1 < 10) {\n      renewalMonth = \"0\" + (t.getMonth() + 1);\n    } else {\n      renewalMonth = t.getMonth() + 1;\n    }\n\n    let renewalValue = this.state.renewalMonthList.filter(x => x.StringMapKey == renewalMonth);\n    let finalRenewalDate = {\n      value: renewalMonth,\n      label: renewalValue[0].StringMapName\n    };\n    this.setState({\n      notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),\n      notesInceptionDate1: moment(this.state.InceptionDate).format('YYYY-MM-DD'),\n      renewalMonth: finalRenewalDate\n    });\n    const data = {\n      'entityId': this.state.EntityId,\n      'entityType': this.state.EntityType,\n      'CurrentUser': CommonConfig.loggedInUserData().EntityId\n    }; // if (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") {\n\n    await api.post('api/getNewBusineesNotes', data).then(res => {\n      if (res.success) {\n        console.log(\" new business notes......\", res.data);\n        this.setState({\n          noteList: res.data\n        });\n      } else {\n        toast.warn(\"No notes found for Policy.\");\n      }\n    }).catch(err => {\n      console.log(\"getNoteList err\", err);\n    }); // }else{\n    //   api.post('api/getNotes', data).then(res => {\n    //     if (res.success) {\n    //       console.log(\" new normal notes......\", res.data)\n    //      this.setState({ noteList: res.data });\n    //     } else {\n    //     }\n    //   }).catch(err => {\n    //   });\n    // } \n  }\n\n  getPolicyHolder() {\n    const data = {\n      policyId: this.props.match.params.id\n    };\n    console.log(\"getPolicyHolderDetails\", data);\n    api.post('api/getPolicyHolderDetails', data).then(res => {\n      console.log(\"getPolicyHolderDetails\", res);\n\n      if (res.success) {\n        let resdata = res.data[0];\n        console.log(\"getPolicyHolderDetails\", resdata[0]);\n        this.setState({\n          inceptionDate: resdata[0].InceptionDate\n        });\n      } else {}\n    }).catch(err => {\n      console.log('error', err);\n    });\n  }\n\n  async getDropDownValues(stringMapType, setStateName) {\n    try {\n      let data = {\n        stringmaptype: stringMapType,\n        orderby: 'sortorder'\n      };\n\n      if (stringMapType == \"MONTH\") {\n        data = {\n          stringmaptype: stringMapType,\n          orderby: 'StringMapKey'\n        };\n      }\n\n      await api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  getDropDownReasonValues(response, setStateName) {\n    try {\n      const data = {\n        StingMapKey: response\n      };\n      api.post(APIConstant.path.dropdownbycodeforreason, data).then(res => {\n        if (res.success) {\n          console.log(\"ressssssssssssss/....\", res);\n          this.setState({\n            ReasonArray: res.data[0]\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  getNotesType() {\n    try {\n      const data = {\n        stringmaptype: 'NOTETYPE'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            Type: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  Important() {\n    this.state.isImportant === 0 ? this.setState({\n      isImportant: 1\n    }) : this.setState({\n      isImportant: 0\n    });\n  }\n\n  // show(field, condition) {\n  //   if (condition) {\n  //     document.getElementById(field).className = \"form-control is-invalid\";\n  //   } else {\n  //     document.getElementById(field).className = \"form-control\";\n  //   }\n  // }\n  show(field, condition, errorField, message) {\n    if (condition) {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control is-invalid\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  selectType1(value, type) {\n    if (value === '' || value === null) {\n      this.setState({\n        NotesTypeError: true,\n        notesType: value\n      });\n      this.show('notesType', true);\n    } else {\n      this.setState({\n        NotesTypeError: false,\n        notesType: value\n      });\n      this.show('notesType', false);\n    }\n  }\n\n  selectType(value, type) {\n    if (type === 'responseType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          responseType: '',\n          responseTypeError: true,\n          showReasonDD: false\n        });\n        this.show('responseType', true, \"responseTypeError\", \"Please select Response\");\n      } else {\n        this.setState({\n          responseType: value.value,\n          responseTypeError: false\n        });\n        this.show('responseType', false, \"responseTypeError\", \"\");\n        this.getDropDownReasonValues(value.value, 'ReasonArray');\n\n        if (value.value == \"Not Interested\" || value.value == \"Lost\" || value.value == \"Purge\" || value.value == \"Abandoned\") {\n          this.setState({\n            showReasonDD: true\n          });\n        } else {\n          this.setState({\n            showReasonDD: false\n          });\n        }\n      }\n    }\n\n    if (type === 'reasonType') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          reasonType: '',\n          reasonTypeError: true\n        });\n        this.show('reasonType', true, \"reasonTypeError\", \"Please select Reason\");\n      } else {\n        this.setState({\n          reasonType: value.value,\n          reasonTypeError: false\n        });\n        this.show('reasonType', false, \"reasonTypeError\", \"\");\n      }\n    }\n\n    if (type === 'contactMode') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n        this.setState({\n          contactMode: '',\n          contactModeError: true\n        });\n        this.show('contactMode', true, \"contactModeError\", \"Please select Contact mode\");\n      } else {\n        this.setState({\n          contactMode: value.value,\n          contactModeError: false\n        });\n        this.show('contactMode', false, \"contactModeError\", \"\");\n      }\n    }\n\n    if (type === 'renewalMonth') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n        this.setState({\n          renewalMonth: '',\n          renewalMonthError: true\n        });\n        this.show('renewalMonth', true, \"renewalMonthError\", \"Please select Renewal month\");\n      } else {\n        var date = new Date();\n        var ShowMonth = value.value;\n        console.log(ShowMonth);\n        var curmonth = new Date().getMonth() + 1;\n        console.log(curmonth);\n        if (ShowMonth < curmonth) var curyear = new Date().getFullYear() + 1;else var curyear = new Date().getFullYear();\n        console.log(\"curyear\", curyear);\n        var inceptionDate = moment([parseInt(curyear), parseInt(value.value) - 1]).format('DD-MM-YYYY');\n        var inceptionDate1 = moment([parseInt(curyear), parseInt(value.value) - 1]).format('YYYY-MM-DD');\n        this.setState({\n          renewalMonth: value.value,\n          renewalMonthError: true,\n          notesInceptionDate: inceptionDate,\n          notesInceptionDate1: inceptionDate1\n        });\n        this.show('renewalMonth', false, \"renewalMonthError\", \"\"); // this.setState({ renewalMonth: value.value, renewalMonthError:true });\n        // this.show('renewalMonth', false, \"renewalMonthError\", \"\");\n      }\n    }\n  }\n\n  editDate(task) {\n    if (task == \"view\") {\n      this.setState({\n        isEditDate: false\n      });\n    } else {\n      this.setState({\n        isEditDate: true\n      });\n    }\n  }\n\n  editRenewalMonth(task) {\n    if (task == 'view') {\n      this.setState({\n        isEditRenewalMonth: false\n      });\n    } else {\n      this.setState({\n        isEditRenewalMonth: true\n      });\n    }\n  }\n\n  executeOnClick(isExpanded) {}\n\n  HideSideBar() {\n    this.setState({\n      visible: false\n    });\n    this.reset();\n  }\n\n  render() {\n    const {\n      t,\n      i18n\n    } = this.props;\n    const SaveButton = t(\"buttons.Save\");\n    const AddButton = t(\"buttons.Add\");\n    const EditButton = t(\"buttons.Edit\");\n    const DeleteButton = t(\"buttons.Delete\");\n    const CloseButton = t(\"buttons.Close\");\n    const BackButton = t(\"buttons.Back\");\n    const UpdateButton = t(\"buttons.Update\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: e => this.setState({\n        visible: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }\n    }, \"Notes\"), /*#__PURE__*/React.createElement(Sidebar, {\n      showCloseIcon: false,\n      blockScroll: true,\n      visible: this.state.visible,\n      position: \"right\",\n      onHide: e => this.HideSideBar(),\n      style: {\n        width: 900\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-left float-right\",\n      onClick: e => this.HideSideBar(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(ScrollPanel, {\n      style: {\n        width: '100%',\n        height: '92%',\n        paddingLeft: \"20px\",\n        paddingRight: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      id: \"headingOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      block: true,\n      color: \"link\",\n      className: \"text-left m-0 p-0\",\n      onClick: () => this.setState({\n        addNoteCollapse: !this.state.addNoteCollapse\n      }),\n      \"aria-expanded\": this.state.addNoteCollapse,\n      \"aria-controls\": \"collapseOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"m-0 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 19\n      }\n    }, \" \", this.state.isNoteEdit ? t(\"contactNotes:EditNotes\") : t(\"contactNotes:AddNotes\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        float: \"right\"\n      },\n      className: this.state.addNoteCollapse ? \"fa fa-chevron-up\" : \"fa fa-chevron-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 129\n      }\n    }), \" \"))), /*#__PURE__*/React.createElement(Collapse, {\n      isOpen: this.state.addNoteCollapse,\n      \"data-parent\": \"#accordion\",\n      id: \"collapseOne\",\n      \"aria-labelledby\": \"headingOne\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      style: {\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 17\n      }\n    }, CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 49\n      }\n    }, \"Contact Mode\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"contactMode\",\n      id: \"contactMode\",\n      onChange: e => this.selectType(e.target, 'contactMode'),\n      value: this.state.contactMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 53\n      }\n    }, \"Select\"), this.state.contactModeList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 64\n        }\n      }, x.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"contactModeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 53\n      }\n    })), !this.state.isEditRenewalMonth ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 49\n      }\n    }, \" Renewal Month : \", CommonConfig.isEmpty(this.state.renewalMonth) !== true ? this.state.renewalMonth.label : this.state.renewalMonth), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BTN, {\n      style: {\n        float: \"right\"\n      },\n      color: \"primary\",\n      onClick: this.state.isEditRenewalMonth ? () => this.editRenewalMonth(\"view\") : () => this.editRenewalMonth(\"edit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 53\n      }\n    })))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 49\n      }\n    }, \" Renewal Month :\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"renewalMonth\",\n      id: \"renewalMonth\",\n      onChange: e => this.selectType(e.target, 'renewalMonth'),\n      value: this.state.renewalMonth.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 53\n      }\n    }, \"Select\"), this.state.renewalMonthList.map(x => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: x.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 64\n        }\n      }, x.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"renewalMonthError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 53\n      }\n    }))), !this.state.isEditDate ? /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 49\n      }\n    }, \"Inception date: \", this.state.notesInceptionDate), /*#__PURE__*/React.createElement(BTN, {\n      style: {\n        float: \"right\"\n      },\n      color: \"primary\",\n      onClick: this.state.isEditDate ? () => this.editDate(\"view\") : () => this.editDate(\"edit\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-pencil\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 49\n      }\n    }))) : /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 46\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 49\n      }\n    }, \"Inception date: \", this.state.notesInceptionDate), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"inceptionDate\",\n      id: \"inceptionDate\",\n      placeholder: \"Inception Date\",\n      style: {\n        width: '80%',\n        display: \"inline-block\"\n      },\n      onChange: e => this.handleChange(e, 'inceptionDate'),\n      value: this.state.notesInceptionDate1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"iceptionDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 53\n      }\n    }, \"Response*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"responseType\",\n      id: \"responseType\",\n      onChange: e => this.selectType(e.target, 'responseType'),\n      value: this.state.responseType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 57\n      }\n    }, \"Select\"), this.state.ResponseTypeArray.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 69\n        }\n      }, ct.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"responseTypeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 53\n      }\n    }))), this.state.showReasonDD ? /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 50\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 57\n      }\n    }, \"Reason\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"reasonType\",\n      id: \"reasonType\",\n      onChange: e => this.selectType(e.target, 'reasonType'),\n      value: this.state.reasonType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 61\n      }\n    }, \"Select\"), this.state.ReasonArray.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 73\n        }\n      }, ct.StringMapName);\n    })))) : null)) : null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 21\n      }\n    }, CommonConfig.loggedInUserData().SecurityGroupName != \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 25\n      }\n    }, t(\"contactNotes:NotesType.label\"), \"*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"notesType\",\n      id: \"notesType\",\n      onChange: e => this.selectType1(e.target.value, 'notesType'),\n      value: this.state.notesType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 27\n      }\n    }, t(\"contactNotes:NotesType.placeholder\")), this.state.Type.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 37\n        }\n      }, ct.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 25\n      }\n    }, t(\"contactNotes:NotesType.error_blank\"))) : null, /*#__PURE__*/React.createElement(\"a\", {\n      title: t(\"contactNotes:ImportantNotes\"),\n      href: \"javascript:void(0)\",\n      onClick: () => this.Important(),\n      style: {\n        color: this.state.isImportant === 0 ? '#aaaaaa' : '#ff0000',\n        fontSize: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-exclamation-circle\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 214\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 25\n      }\n    }, t(\"contactNotes:Notes.label\"), \"*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"notesdescription\",\n      id: \"notesdescription\",\n      placeholder: t(\"contactNotes:Notes.placeholder\"),\n      value: this.state.notesdescription,\n      onChange: e => this.handleChange(e),\n      autoResize: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 25\n      }\n    }, t(\"contactNotes:Notes.error_blank\"))))), CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box with-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 33\n      }\n    }, \"Next Follow-Up Date & Time\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"datetime-local\",\n      id: \"DateTime\",\n      name: \"DateTime\",\n      value: this.state.DateTime,\n      onChange: e => this.handleChange(e, 'DateTime'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 33\n      }\n    })))) : null, /*#__PURE__*/React.createElement(Row, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 21\n      }\n    }, this.state.isNoteEdit ? CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotesNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 94\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.resetNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 90\n      }\n    }), \" Cancel\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotes(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 83\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 79\n      }\n    }), \" Cancel\")) : CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotesNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 94\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.resetNewBusiness(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 90\n      }\n    }), \" Cancel\")) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.saveNotes(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 83\n      }\n    }), \" Save\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-angle-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 79\n      }\n    }), \" Cancel\"))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"added-note-outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 15\n      }\n    }, this.state.noteList.length, \" notes\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 15\n      }\n    }, this.state.noteList.map((notes, i) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"addednote-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: notes.IsFlag.data[0] === 0 ? '#aaaaaa' : '#ff0000'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-exclamation-circle\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 101\n        }\n      })), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 25\n        }\n      }, notes.NoteType), (notes.ContactMode == null || notes.ContactMode == '') && (notes.RenewalMonth == null || notes.RenewalMonth == '') ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 31\n        }\n      }, notes.ContactMode == null || notes.ContactMode == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 38\n        }\n      }, \"Contact Mode:\"), \" \", notes.ContactMode)), notes.RenewalMonth == null || notes.RenewalMonth == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 822,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 38\n        }\n      }, \"Renewal Month:\"), \" \", notes.RenewalMonth))), (notes.Response == null || notes.Response == '') && (notes.Reason == null || notes.Reason == '') ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829,\n          columnNumber: 31\n        }\n      }, notes.Response == null || notes.Response == '' ? null : /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 40\n        }\n      }, \"Response:\"), \" \", notes.Response)), /*#__PURE__*/React.createElement(Col, {\n        md: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 33\n        }\n      }, notes.Reason == null || notes.Reason == '' ? null : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 88\n        }\n      }, \"Reason: \"), \" \", notes.Reason))), notes.FollowUpDateTime == '0000-00-00 00:00:00' || notes.FollowUpDateTime == null || notes.FollowUpDateTime == \"\" ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 40\n        }\n      }, \"Follow Up DateTime: \"), \" \", moment(notes.FollowUpDateTime).format(CommonConfig.dateFormat.dateTime)))), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ShowMoreText, {\n        lines: 2,\n        more: \"Show more\",\n        less: \"Show less\",\n        anchorClass: \"\",\n        onClick: this.executeOnClick,\n        expanded: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 27\n        }\n      }, notes.NoteText)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 32\n        }\n      }, \"Added By\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-user\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 52\n        }\n      }), \" \", notes.CreatedByName + \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-calendar\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 52\n        }\n      }), \" \", moment(notes.CreatedOn).format(CommonConfig.dateFormat.dateTime))), notes.UpdatedByName != null ? /*#__PURE__*/React.createElement(Col, {\n        md: \"8\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 34\n        }\n      }, \"Updated By\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-user\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 54\n        }\n      }), \" \", notes.UpdatedByName + \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        class: \"fa fa-calendar\",\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 54\n        }\n      }), \" \", moment(notes.UpdatedOn).format(CommonConfig.dateFormat.dateTime))) : null)));\n    }))))));\n  }\n\n}\n\nexport default withTranslation()(PersonNotes);","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/SidebarNav/Notes.js"],"names":["React","Component","toast","Sidebar","ScrollPanel","Button","BTN","Row","Col","Input","Card","CardHeader","CardBody","Collapse","api","APIConstant","moment","CommonConfig","withTranslation","ShowMoreText","PersonNotes","constructor","props","loading","saveNotes","state","NotesTypeError","notesdescriptionError","NotesForm","FormData","append","noteID","notesType","notesdescription","trim","EntityId","EntityType","isImportant","loggedInUserId","LanguageId","post","then","res","success","reset","message","getNoteList","catch","err","show","saveNotesNewBusiness","responseType","error","reasonType","contactMode","renewalMonth","data","NavID","DateTime","notesInceptionDate1","loggedInUserData","console","log","resetNewBusiness","PolicyId","msg","t","Date","InceptionDate","getMonth","renewalValue","renewalMonthList","filter","x","StringMapKey","finalRenewalDate","value","label","StringMapName","setState","notesInceptionDate","format","inceptionDate","isEditDate","isEditRenewalMonth","addNoteCollapse","handleChange","e","target","name","isEmpty","inceptionDateError","updateNotes","isNoteEdit","NoteText","NoteType","IsFlag","NoteId","Type","noteList","ReasonArray","ResponseTypeArray","showReasonDD","responseTypeError","reasonTypeError","reasonsShow","contactModeError","contactModeList","renewalMonthError","SecurityGroupList","i18n","language","NavPage","componentDidMount","getDropDownValues","getNotesType","getPolicyHolder","policyId","resdata","warn","match","params","id","stringMapType","setStateName","stringmaptype","orderby","path","dropdownbycode","getDropDownReasonValues","response","StingMapKey","dropdownbycodeforreason","Important","field","condition","errorField","document","getElementById","className","innerHTML","selectType1","type","selectType","undefined","date","ShowMonth","curmonth","curyear","getFullYear","parseInt","inceptionDate1","editDate","task","editRenewalMonth","executeOnClick","isExpanded","HideSideBar","visible","render","SaveButton","AddButton","EditButton","DeleteButton","CloseButton","BackButton","UpdateButton","width","height","paddingLeft","paddingRight","float","handleSubmit","padding","SecurityGroupName","map","display","ct","i","color","fontSize","length","notes","ContactMode","RenewalMonth","Response","Reason","FollowUpDateTime","dateFormat","dateTime","CreatedByName","CreatedOn","UpdatedByName","UpdatedOn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { Sidebar } from 'primereact/sidebar';\nimport { ScrollPanel } from 'primereact/scrollpanel';\nimport { Button } from 'primereact/button';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button as BTN, Row, Col, Input, Card, CardHeader, CardBody, Collapse } from 'reactstrap';\nimport api from '../../utils/apiClient';\nimport APIConstant from '../../utils/constants';\nimport moment from 'moment';\nimport { CommonConfig } from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport ShowMoreText from 'react-show-more-text';\n\nclass PersonNotes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Type: [],\n      noteList: [],\n      isImportant: 0,\n      notesType: '',\n      notesdescription: '',\n      NotesTypeError: true,\n      notesdescriptionError: true,\n      noteID: '',\n      isNoteEdit: false,\n      ReasonArray: [],\n      ResponseTypeArray: [],\n      showReasonDD: false,\n      responseType: '',\n      responseTypeError:false,\n      reasonTypeError:false,\n      reasonType: '',\n      DateTime: '',\n      reasonsShow: false,\n      contactMode:'',\n      contactModeError: false,\n      contactModeList:[],\n      renewalMonth:'',\n      renewalMonthList:[],\n      renewalMonthError: false,\n      notesInceptionDate: '',\n      notesInceptionDate1:'',\n      isEditRenewalMonth: false,\n      isEditDate: false,\n      InceptionDate: '',\n\n      SecurityGroupList: [\n          { label: 'New Business', value: 'New Business' },\n          { label: 'Renewal', value: 'Renewal' },\n          { label: 'Underwriting', value: 'Underwriting' },\n      ],\n      \n      EntityId: '',\n      EntityType: '',\n      LanguageId: (props.i18n.language === 'en') ? 'en-GB' : (props.i18n.language === 'es') ? 'es-ES' : (props.i18n.language === 'ie') ? 'en-IE' : props.i18n.language,\n\n      addNoteCollapse: false,\n    };\n    // This data we will get from Policy and Contact pages.\n    if (props.NavPage) {\n      this.state.NavPage = props.NavPage;\n      this.state.EntityType = props.NavPage;\n      this.state.InceptionDate = props.inceptionDate;\n    }\n    if (props.NavID) {\n      this.state.NavID = props.NavID;\n      this.state.EntityId = props.NavID;\n    }\n    \n  }\n\n  async componentDidMount() {\n    await this.getDropDownValues('MONTH', 'renewalMonthList');\n    // await this.getPolicyHolder();\n   await this.getDropDownValues('CONTACTMODE', 'contactModeList');\n    // this.getDropDownValues('FOLLOWUPREASON', 'ReasonArray');\n    await this.getDropDownValues('FOLLOWUPRESPONSE', 'ResponseTypeArray');\n    await this.getNoteList();\n    await this.getNotesType();\n  }\n\n\n  async getPolicyHolder() {\n    const data = { policyId: this.state.EntityId };\n    console.log(\"getPolicyHolderDetails\", data);\n    await api.post('api/getPolicyHolderDetails', data).then(res => {\n        console.log(\"getPolicyHolderDetails\", res);\n        if (res.success) {\n            let resdata = res.data[0];\n            console.log(\"getPolicyHolderDetails\", resdata[0]);\n            this.setState({\n                InceptionDate: resdata[0].InceptionDate,\n            });\n        } else {\n        }\n    }).catch(err => {\n        console.log('error', err);\n    });\n}\n\n\n  async getNoteList() {\n    var t = this.state.InceptionDate ? new Date(this.state.InceptionDate) : new Date();\n        \n        var renewalMonth = \"\";\n        if(t.getMonth() + 1 < 10){\n            renewalMonth = \"0\"+ (t.getMonth() + 1);  \n        }  \n        else{\n            renewalMonth = (t.getMonth() + 1);\n        } \n        let renewalValue = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n        let finalRenewalDate = {\n            value : renewalMonth,\n            label : renewalValue[0].StringMapName\n        }\n        this.setState({ notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),notesInceptionDate1: moment(this.state.InceptionDate).format('YYYY-MM-DD') , renewalMonth: finalRenewalDate});\n\n\n    const data = {\n      'entityId': this.state.EntityId,\n      'entityType': this.state.EntityType,\n      'CurrentUser': CommonConfig.loggedInUserData().EntityId\n    };\n\n    // if (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") {\n      await api.post('api/getNewBusineesNotes', data).then(res => {\n          if (res.success) {\n              console.log(\" new business notes......\", res.data)\n              this.setState({ noteList: res.data });\n          } else {\n              toast.warn(\"No notes found for Policy.\");\n          }\n      }).catch(err => {\n          console.log(\"getNoteList err\", err);\n      });\n    // }else{\n    //   api.post('api/getNotes', data).then(res => {\n    //     if (res.success) {\n    //       console.log(\" new normal notes......\", res.data)\n    //      this.setState({ noteList: res.data });\n    //     } else {\n\n    //     }\n    //   }).catch(err => {\n\n    //   });\n    // } \n  }\n\n  getPolicyHolder() {\n    const data = { policyId: this.props.match.params.id };\n    console.log(\"getPolicyHolderDetails\", data);\n    api.post('api/getPolicyHolderDetails', data).then(res => {\n        console.log(\"getPolicyHolderDetails\", res);\n        if (res.success) {\n            let resdata = res.data[0];\n            console.log(\"getPolicyHolderDetails\", resdata[0]);\n            this.setState({\n                inceptionDate: resdata[0].InceptionDate,\n            });\n        } else {\n\n        }\n    }).catch(err => {\n        console.log('error', err);\n    });\n}\n\n  async getDropDownValues(stringMapType, setStateName) {\n    try {\n        let data = {\n            stringmaptype: stringMapType,\n            orderby: 'sortorder'\n        };\n        if (stringMapType == \"MONTH\"){\n            data = {\n                stringmaptype: stringMapType,\n                orderby: 'StringMapKey'\n            };  \n        }\n        await api.post(APIConstant.path.dropdownbycode, data).then(res => {\n            if (res.success) {\n                this.setState({ [setStateName]: res.data });\n            } else {\n            }\n        }).catch(err => {\n        });\n    } catch (error) {\n        console.log(\"error...\", error);\n    }\n  }\n\n  getDropDownReasonValues(response, setStateName) {\n    try {\n        const data = {\n            StingMapKey: response,\n        };\n        api.post(APIConstant.path.dropdownbycodeforreason, data).then(res => {\n            if (res.success) {\n                console.log(\"ressssssssssssss/....\", res)\n                this.setState({ ReasonArray: res.data[0] });\n            } else {\n            }\n        }).catch(err => {\n        });\n    } catch (error) {\n        console.log(\"error...\", error);\n    }\n  }\n\n  getNotesType() {\n    try {\n      const data = {\n        stringmaptype: 'NOTETYPE'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({ Type: res.data });\n        } else {\n\n        }\n      }).catch(err => {\n\n      });\n    } catch (error) {\n\n    }\n  }\n\n  loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n\n  Important() {\n    (this.state.isImportant === 0 ? this.setState({ isImportant: 1 }) : this.setState({ isImportant: 0 }))\n  }\n\n  saveNotes = () => {\n    if (\n      this.state.NotesTypeError === false &&\n      this.state.notesdescriptionError === false) {\n\n      const NotesForm = new FormData();\n      NotesForm.append('noteId', this.state.noteID);\n      NotesForm.append('notesType', this.state.notesType);\n      NotesForm.append('notesdescription', this.state.notesdescription.trim());\n      NotesForm.append('entityid', this.state.EntityId);\n      NotesForm.append('entitytype', this.state.EntityType);\n      NotesForm.append('isflag', this.state.isImportant);\n      NotesForm.append('loggedInUserId', CommonConfig.loggedInUserId());\n      NotesForm.append('languageId', this.state.LanguageId);\n\n      api.post('api/addNotes', NotesForm).then(res => {\n        if (res.success) {\n          this.reset();\n          toast.success('Notes added successfully');\n          toast.success(res.message);\n          this.getNoteList();\n        } else {\n\n        }\n      }).catch(err => {\n      });\n    } else {\n      this.show(\"notesType\", this.state.NotesTypeError);\n      this.show(\"notesdescription\", this.state.notesdescriptionError);\n    }\n  }\n\n  saveNotesNewBusiness = () => {\n    if (this.state.notesdescriptionError === false) {\n        if (this.state.responseType == \"\") {\n            toast.error('Please Select Response Type');\n            return\n        }\n\n        if (this.state.responseType == \"Not Interested\") {\n            if (this.state.reasonType == \"\") {\n                toast.error('Please Select Reason Type');\n                return\n            }\n        }\n\n        if (this.state.contactMode == \"\") {\n            toast.error('Please Select Contact mode');\n            return\n        }\n        \n        if (this.state.renewalMonth == \"\") {\n            toast.error('Please Select Renewal Month');\n            return\n        }\n\n        var data = {\n            'EntityType': 'Policy',\n            'EntityId': this.state.NavID,\n            'PolicyId': this.state.NavID,\n            'isflag': this.state.isImportant,\n            'Response': this.state.responseType,\n            'Reason': this.state.reasonType,\n            'NoteText': this.state.notesdescription.trim(),\n            'FollowUpDateTime': this.state.DateTime,\n            // 'RenewalMonth': this.state.renewalMonth,\n            'InceptionDate': this.state.notesInceptionDate1,\n            'ContactMode': this.state.contactMode,\n            'CurrentUser': CommonConfig.loggedInUserData().EntityId\n        }\n        console.log(\"dataaaaaa..........\",data)\n        api.post('api/saveFollowUpNote', data).then(res => {\n            if (res.data.success) {\n                toast.success('Follow-Up note added successfully');\n                this.resetNewBusiness();\n                this.getNoteList({ PolicyId: this.state.NavID });\n                \n            } else {\n                toast.error(res.data.msg);\n            }\n        }).catch(err => {\n        });\n    } else {\n        if(this.state.responseType ==''){\n            this.show(\"responseType\", true, \"responseTypeError\" , \"Please Select Response\" )\n        }\n        if(this.state.contactMode ==''){\n            this.show(\"contactMode\", true, \"contactModeError\" , \"Please Select Contact mode\" )\n        }\n        if(this.state.renewalMonth ==''){\n            this.show(\"renewalMonth\", true, \"renewalMonthError\" , \"Please Select Renewal month\" )\n        }\n        this.show(\"notesType\", this.state.NotesTypeError);\n        this.show(\"notesdescription\", this.state.notesdescriptionError);\n    }\n}\n\n  resetNewBusiness = () => {\n    var t = new Date(this.state.InceptionDate);\n        \n        var renewalMonth = \"\";\n        if(t.getMonth() + 1 < 10){\n            renewalMonth = \"0\"+ (t.getMonth() + 1);  \n        }  \n        else{\n            renewalMonth = (t.getMonth() + 1);\n        } \n        let renewalValue = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n        let finalRenewalDate = {\n            value : renewalMonth,\n            label : renewalValue[0].StringMapName\n        }\n\n    this.setState({\n      notesdescription: '', notesdescriptionError: true,\n      responseType: '',\n      notesInceptionDate: moment(this.state.InceptionDate).format('DD-MM-YYYY'),\n      notesInceptionDate1: moment(this.state.inceptionDate).format('YYYY-MM-DD'),\n      reasonType: '',\n      DateTime: '',\n      renewalMonth: finalRenewalDate,\n      contactMode:'',\n      isImportant: 0,\n      isEditDate:false,\n      isEditRenewalMonth: false,\n    });\n    this.show(\"notesdescription\", false);\n\n    this.setState({ addNoteCollapse: false });\n  }\n\n\n  // show(field, condition) {\n  //   if (condition) {\n  //     document.getElementById(field).className = \"form-control is-invalid\";\n  //   } else {\n  //     document.getElementById(field).className = \"form-control\";\n  //   }\n  // }\n\n  show(field, condition, errorField, message) {\n    if (condition) {\n        if (document.getElementById(field))\n            document.getElementById(field).className = \"form-control is-invalid\";\n\n        if (document.getElementById(errorField))\n            document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n        if (document.getElementById(field))\n            document.getElementById(field).className = \"form-control\";\n\n        if (document.getElementById(errorField))\n            document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  selectType1(value, type) {\n    if (value === '' || value === null) {\n      this.setState({ NotesTypeError: true, notesType: value });\n      this.show('notesType', true);\n    } else {\n      this.setState({ NotesTypeError: false, notesType: value });\n      this.show('notesType', false);\n    }\n  }\n\n  selectType(value , type){\n    if (type === 'responseType') {\n\n      if (value === '' || value === undefined || value === null) {\n          this.setState({ responseType: '', responseTypeError: true ,showReasonDD: false });\n          this.show('responseType', true ,\"responseTypeError\", \"Please select Response\")\n      } else {\n          this.setState({ responseType: value.value , responseTypeError:false});\n          this.show('responseType', false ,\"responseTypeError\", \"\")\n\n          this.getDropDownReasonValues(value.value, 'ReasonArray')\n          \n          if (value.value == \"Not Interested\" || value.value == \"Lost\" || value.value == \"Purge\"|| value.value == \"Abandoned\" ){\n            this.setState({showReasonDD: true});\n          }else{\n            this.setState({showReasonDD: false});\n          }\n      }\n    }\n\n    if (type === 'reasonType') {\n      if (value === '' || value === undefined || value === null) {\n          this.setState({ reasonType: '', reasonTypeError: true });\n          this.show('reasonType', true ,\"reasonTypeError\", \"Please select Reason\")\n      } else {\n          this.setState({ reasonType: value.value ,reasonTypeError:false});\n          this.show('reasonType', false ,\"reasonTypeError\", \"\");\n      }\n    }\n\n    if (type === 'contactMode') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n          this.setState({ contactMode: '', contactModeError: true });\n          this.show('contactMode', true, \"contactModeError\", \"Please select Contact mode\");\n      } else {\n          this.setState({ contactMode: value.value, contactModeError: false });\n          this.show('contactMode', false, \"contactModeError\", \"\");\n      }\n    }\n\n    if (type === 'renewalMonth') {\n      if (value.value == '' || value.value == undefined || value.value == null) {\n          this.setState({ renewalMonth: '', renewalMonthError:true });\n          this.show('renewalMonth', true, \"renewalMonthError\", \"Please select Renewal month\");\n      } else {\n        var date = new Date();\n        var ShowMonth = value.value;\n         console.log(ShowMonth);\n\n        var curmonth = new Date().getMonth() + 1;\n        console.log(curmonth);\n        if (ShowMonth < curmonth)\n\n            var curyear = new Date().getFullYear() + 1;\n        else\n            var curyear = new Date().getFullYear();\n        console.log(\"curyear\", curyear);\n\n        var inceptionDate = moment([parseInt(curyear), parseInt(value.value) - 1]).format('DD-MM-YYYY');\n        var inceptionDate1 = moment([parseInt(curyear), parseInt(value.value) - 1]).format('YYYY-MM-DD');\n        this.setState({ renewalMonth: value.value, renewalMonthError:true , notesInceptionDate: inceptionDate,notesInceptionDate1: inceptionDate1 });\n        this.show('renewalMonth', false, \"renewalMonthError\", \"\");\n          // this.setState({ renewalMonth: value.value, renewalMonthError:true });\n          // this.show('renewalMonth', false, \"renewalMonthError\", \"\");\n\n      }\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n    if (e.target.name === 'notesdescription') {\n      if (CommonConfig.isEmpty(e.target.value)) {\n        this.setState({ notesdescriptionError: true });\n        this.show(\"notesdescription\", true);\n      } else {\n        this.setState({ notesdescriptionError: false, notesdescription: e.target.value });\n        this.show(\"notesdescription\", false);\n      }\n    }\n    if(e.target.name === 'inceptionDate'){\n      if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({ inceptionDateError: true });\n          this.show(\"inceptionDate\", true, \"inceptionDateError\", \"Please enter Inception Date\");\n      }else {  \n          var t = new Date(e.target.value);\n          var renewalMonth = \"\";\n          if(t.getMonth() + 1 < 10){\n              renewalMonth = \"0\"+ (t.getMonth() + 1);  \n          }  \n          else{\n              renewalMonth = (t.getMonth() + 1);\n          } \n          let data = this.state.renewalMonthList.filter(x=> x.StringMapKey == renewalMonth);\n          var inceptionDate = moment(e.target.value).format('DD-MM-YYYY');                \n          console.log(\"data.......\",e.target.value);\n          let finalRenewalDate = {\n              value : renewalMonth,\n              label : data[0].StringMapName\n          }\n          this.setState({ notesInceptionDate: inceptionDate ,notesInceptionDate1: e.target.value, inceptionDateError: false ,renewalMonth: finalRenewalDate });\n          this.show('inceptionDate', false , \"inceptionDateError\", \"\");\n      }\n    }\n  }\n\n  editDate(task) {\n    if (task == \"view\") {\n        this.setState({ isEditDate: false });\n    } else {\n        this.setState({ isEditDate: true });\n    }\n  }\n\neditRenewalMonth(task){\n    if(task == 'view'){\n        this.setState({ isEditRenewalMonth : false});\n    } else {\n        this.setState({ isEditRenewalMonth: true });\n    }\n}\n\n  updateNotes = (data) => {\n    this.setState({\n      isNoteEdit: true, notesdescription: data.NoteText, notesdescriptionError: false,\n      notesType: data.NoteType, NotesTypeError: false, isImportant: data.IsFlag.data[0],\n      noteID: data.NoteId, addNoteCollapse: true\n    });\n    this.show(\"notesdescription\", false);\n    this.show('notesType', false);\n  }\n\n  reset = () => {\n    this.setState({\n      isNoteEdit: false, notesdescription: '', notesdescriptionError: true,\n      notesType: '', NotesTypeError: true,\n      noteID: '', isImportant: 0,\n    });\n    this.show(\"notesdescription\", false);\n    this.show('notesType', false);\n  }\n\n  executeOnClick(isExpanded) {\n  }\n\n  HideSideBar() {\n    this.setState({ visible: false });\n    this.reset();\n  }\n\n  render() {\n    const { t, i18n } = this.props;\n    const SaveButton = t(\"buttons.Save\");\n    const AddButton = t(\"buttons.Add\");\n    const EditButton = t(\"buttons.Edit\");\n    const DeleteButton = t(\"buttons.Delete\");\n    const CloseButton = t(\"buttons.Close\");\n    const BackButton = t(\"buttons.Back\");\n    const UpdateButton = t(\"buttons.Update\");\n\n    return (\n      <div>\n        <a onClick={(e) => this.setState({ visible: true })}>Notes</a>\n        <Sidebar showCloseIcon={false} blockScroll={true} visible={this.state.visible} position=\"right\" onHide={(e) => this.HideSideBar()} style={{ width: 900 }}>\n\n          <div>\n            <span className=\"text-left float-right\" onClick={(e) => this.HideSideBar()}>\n              <i className=\"fa fa-close\"></i>\n            </span>\n          </div>\n          <ScrollPanel style={{ width: '100%', height: '92%', paddingLeft: \"20px\", paddingRight: \"20px\" }}>\n\n            <Card className=\"mb-0\">\n              <CardHeader id=\"headingOne\">\n                <BTN block color=\"link\" className=\"text-left m-0 p-0\" onClick={() => this.setState({ addNoteCollapse: !this.state.addNoteCollapse })} aria-expanded={this.state.addNoteCollapse} aria-controls=\"collapseOne\">\n                  <h5 className=\"m-0 p-0\"> {(this.state.isNoteEdit) ? t(\"contactNotes:EditNotes\") : t(\"contactNotes:AddNotes\")} <i style={{ float: \"right\" }} className={this.state.addNoteCollapse ? \"fa fa-chevron-up\" : \"fa fa-chevron-down\"}></i> </h5>\n                </BTN>\n              </CardHeader>\n\n              <Collapse isOpen={this.state.addNoteCollapse} data-parent=\"#accordion\" id=\"collapseOne\" aria-labelledby=\"headingOne\">\n                <form onSubmit={this.handleSubmit} style={{ padding: 10 }}>\n                {CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                                        (<>\n                                        {/* <Row>\n                                            <Col md='2'>\n                                                <label>Contact Mode</label>\n                                            </Col>\n                                            <Col md='3'>\n                                                    <Input type=\"select\" name =\"contactMode\" id=\"contactMode\" onChange={(e) => this.selectType(e.target,'contactMode')} value={this.state.contactMode}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.contactModeList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }\n                                                    </Input>\n                                                    <em id=\"contactModeError\" className=\"error invalid-feedback\"></em>\n                                            </Col>\n                                            <Col md='2'>\n                                                <label> Renewal Month</label>\n                                            </Col>\n                                            <Col md='2'>\n                                                    <Input type=\"select\" name =\"renewalMonth\" id=\"renewalMonth\" onChange={(e) => this.selectType(e.target,'renewalMonth')} value={this.state.renewalMonth}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.renewalMonthList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }    \n                                                    </Input>\n                                                    <em id=\"renewalMonthError\" className=\"error invalid-feedback\"></em>\n                                                \n                                            </Col>\n                                        </Row> */}\n                                                                                <Row>\n                                            <Col md='4'>\n                                                <label>Contact Mode</label>\n\n                                                    <Input type=\"select\" name =\"contactMode\" id=\"contactMode\" onChange={(e) => this.selectType(e.target,'contactMode')} value={this.state.contactMode}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.contactModeList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }\n                                                    </Input>\n                                                    <em id=\"contactModeError\" className=\"error invalid-feedback\"></em>\n\n                                                {/* </div> */}\n                                            </Col>\n                                            {!this.state.isEditRenewalMonth ? \n                                            <Col md='4'>\n                                                <label> Renewal Month : {CommonConfig.isEmpty(this.state.renewalMonth) !== true ? this.state.renewalMonth.label : this.state.renewalMonth}</label>\n                                                <>\n                                                    <BTN style={{ float: \"right\" }} color=\"primary\"\n                                                        onClick={this.state.isEditRenewalMonth ? () => this.editRenewalMonth(\"view\") : () => this.editRenewalMonth(\"edit\")}\n                                                    >\n                                                    <i className=\"fa fa-pencil\"></i>\n                                                        \n                                                    </BTN>\n                                                    </>\n                                            </Col>\n                                            :\n                                            <Col md='4'>\n                                                <>\n                                                <label> Renewal Month :</label>\n\n                                                    <Input type=\"select\" name =\"renewalMonth\" id=\"renewalMonth\" onChange={(e) => this.selectType(e.target,'renewalMonth')} value={this.state.renewalMonth.value}>\n                                                    <option value=''>Select</option>\n                                                    {this.state.renewalMonthList.map((x) => {\n                                                        return(<option value={x.StringMapKey}>{x.StringMapName}</option>)\n                                                    })\n                                                    }    \n                                                    </Input>\n                                                    <em id=\"renewalMonthError\" className=\"error invalid-feedback\"></em>\n                                                {/* </div> */}\n                                                </>\n                                                 \n                                            </Col>\n                                            }\n                                            {!this.state.isEditDate?\n                                            <Col md='4'>\n                                                <label>Inception date: {this.state.notesInceptionDate}</label>\n                                                \n                                                <BTN style={{ float: \"right\" }} color=\"primary\"\n                                                    onClick={this.state.isEditDate ? () => this.editDate(\"view\") : () => this.editDate(\"edit\")}\n                                                >\n                                                <i className=\"fa fa-pencil\"></i>\n                                                </BTN>\n                                                \n                                            </Col>\n                                            :<Col md='4'>\n                                                <label>Inception date: {this.state.notesInceptionDate}</label>\n                                                <div>\n                                                    <Input type=\"date\" name=\"inceptionDate\" id=\"inceptionDate\"\n                                                        placeholder=\"Inception Date\"\n                                                        style={{ width: '80%', display: \"inline-block\" }}\n                                                        onChange={(e) => this.handleChange(e ,'inceptionDate')}\n                                                        value={this.state.notesInceptionDate1}\n                                                    />\n                                                    <em id=\"iceptionDateError\" className=\"error invalid-feedback\"></em>\n                                                </div>\n\n                                                {/* <label>Inception date: </label>\n                                                <Input type=\"date\" id=\"inceptionDate\" name=\"inceptionDate\"\n                                                        value={moment(this.state.notesInceptionDate).format('DD-MM-YYYY')}\n                                                        onChange={(e) => this.handleChange(e, 'inceptionDate')}\n                                                >\n                                                </Input>\n                                                <em id=\"iceptionDateError\" className=\"error invalid-feedback\"></em> */}\n                                            </Col>\n                                            }\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"3\">\n                                                <div className=\"input-box with-icon\">\n                                                    <label>Response*</label>\n                                                    <Input type=\"select\" name=\"responseType\" id=\"responseType\" onChange={(e) => this.selectType(e.target, 'responseType')} value={this.state.responseType}>\n                                                        <option value=''>Select</option>\n                                                        {this.state.ResponseTypeArray.map((ct, i) => {\n                                                            return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                                                        })\n                                                        }\n                                                    </Input>\n                                                    <em id=\"responseTypeError\" className=\"error invalid-feedback\"></em>\n                                                </div>\n                                            </Col>\n                                            {this.state.showReasonDD ?\n                                                (<Col md=\"6\">\n                                                    <div className=\"input-box with-icon\">\n                                                        <label>Reason</label>\n                                                        <Input type=\"select\" name=\"reasonType\" id=\"reasonType\" onChange={(e) => this.selectType(e.target, 'reasonType')} value={this.state.reasonType}>\n                                                            <option value=''>Select</option>\n                                                            {this.state.ReasonArray.map((ct, i) => {\n                                                                return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                                                            })\n                                                            }\n                                                        </Input>\n                                                    </div>\n                                                </Col>) : (null)}\n                                        </Row>\n                                        </>) \n                                    : (null)}\n                  <Row>\n                    <Col md=\"6\">\n                    {CommonConfig.loggedInUserData().SecurityGroupName != \"New Business\" ?\n                      (<div className=\"input-box with-icon\">\n                        <label>{t(\"contactNotes:NotesType.label\")}*</label>\n                        <Input type=\"select\" name=\"notesType\" id=\"notesType\" onChange={(e) => this.selectType1(e.target.value, 'notesType')} value={this.state.notesType}>\n                          <option value=''>{t(\"contactNotes:NotesType.placeholder\")}</option>\n                          {this.state.Type.map((ct, i) => {\n                            return (<option value={ct.StringMapKey}>{ct.StringMapName}</option>)\n                          })\n                          }\n                        </Input>\n                        <em className=\"error invalid-feedback\">{t(\"contactNotes:NotesType.error_blank\")}</em>\n                        </div>) : (null)}\n                        <a title={t(\"contactNotes:ImportantNotes\")} href=\"javascript:void(0)\" onClick={() => this.Important()} style={{ color: this.state.isImportant === 0 ? '#aaaaaa' : '#ff0000', fontSize: 25 }}><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i></a>\n                      {/* </div> */}\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md=\"12\">\n                      <div className=\"input-box\">\n                        <label>{t(\"contactNotes:Notes.label\")}*</label>\n                        <Input type=\"textarea\" name=\"notesdescription\" id=\"notesdescription\" placeholder={t(\"contactNotes:Notes.placeholder\")} value={this.state.notesdescription} onChange={e => this.handleChange(e)} autoResize={true} />\n                        <em className=\"error invalid-feedback\">{t(\"contactNotes:Notes.error_blank\")}</em>\n                      </div>\n                    </Col>\n                  </Row>\n                  {CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                    (<Row>\n                        <Col md=\"6\">\n                            <div className=\"input-box with-icon\">\n                                <label>Next Follow-Up Date & Time</label>\n                                <Input type=\"datetime-local\" id=\"DateTime\" name=\"DateTime\"\n                                    value={this.state.DateTime}\n                                    onChange={(e) => this.handleChange(e, 'DateTime')}>\n                                </Input>\n                            </div>\n                        </Col>\n                    </Row>)\n                  : (null)}\n                  <Row className=\"text-center\">\n                    <Col>\n                      {(this.state.isNoteEdit) ?\n                        (\n                          (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                          <div className=\"pull-right\">\n                            <BTN color=\"success\" onClick={() => this.saveNotesNewBusiness()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                            <BTN color=\"primary\" onClick={() => this.resetNewBusiness()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                          </div>\n                          :\n                          <div className=\"pull-right\">\n                            <BTN color=\"success\" onClick={() => this.saveNotes()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                            <BTN color=\"primary\" onClick={() => this.reset()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                          </div>\n                          )\n                        ) : (\n                          (CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\" ?\n                          <div className=\"pull-right\">\n                            <BTN color=\"success\" onClick={() => this.saveNotesNewBusiness()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                            <BTN color=\"primary\" onClick={() => this.resetNewBusiness()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                          </div>\n                          :\n                          <div className=\"pull-right\">\n                            <BTN color=\"success\" onClick={() => this.saveNotes()}><i class=\"fa fa-check\"></i> Save</BTN>{' '}\n                            <BTN color=\"primary\" onClick={() => this.reset()}><i class=\"fa fa-angle-left\"></i> Cancel</BTN>\n                          </div>\n                          )\n                        )\n                      }\n                    </Col>\n                  </Row>\n                </form>\n              </Collapse>\n            </Card>\n\n            <div className=\"added-note-outer\">\n              <h4>{this.state.noteList.length} notes</h4>\n              <ul>\n                {this.state.noteList.map((notes, i) => {\n                  return (\n                    <li>\n                      <div className=\"addednote-left\">\n                        <span style={{ color: notes.IsFlag.data[0] === 0 ? '#aaaaaa' : '#ff0000' }}><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i></span>\n                        <h3>{notes.NoteType}</h3>\n                        {/* {(CommonConfig.loggedInUserData().SecurityGroupName == \"New Business\") ?\n                          (<div> */}\n                              {(notes.ContactMode == null || notes.ContactMode == '') && (notes.RenewalMonth == null || notes.RenewalMonth == '' ) ? null:\n                              <Row>\n                                {notes.ContactMode == null || notes.ContactMode == ''? null :\n                                <Col md='6'>\n                                  <p><b>Contact Mode:</b> {notes.ContactMode}</p> \n                                </Col>\n                                }\n                                {notes.RenewalMonth == null || notes.RenewalMonth == ''? null:\n                                <Col md='6'>\n                                  <p><b>Renewal Month:</b> {notes.RenewalMonth}</p> \n                                </Col>\n                                }\n                              </Row>\n                              }\n                              {(notes.Response == null || notes.Response == '') && (notes.Reason == null || notes.Reason == '' ) ? null:\n                              <Row>\n                                {notes.Response == null || notes.Response == ''? null:\n                                  <Col md=\"6\">\n                                    <p><b>Response:</b> {notes.Response}</p> \n                                  </Col>\n                                }\n                                <Col md='6'>\n                                {notes.Reason == null || notes.Reason == '' ? null: <p><b>Reason: </b> {notes.Reason}</p> }\n                                </Col>\n                              </Row>\n                              }\n                              {notes.FollowUpDateTime == '0000-00-00 00:00:00' || notes.FollowUpDateTime == null || notes.FollowUpDateTime == \"\" ? null :\n                                <Row>\n                                  <Col>\n                                    <p><b>Follow Up DateTime: </b> {moment(notes.FollowUpDateTime).format(CommonConfig.dateFormat.dateTime)}</p> \n                                  </Col>\n                                </Row>\n                             }\n                            \n                        <p>\n                          <ShowMoreText\n                            lines={2}\n                            more='Show more'\n                            less='Show less'\n                            anchorClass=''\n                            onClick={this.executeOnClick}\n                            expanded={false}>\n                            {notes.NoteText}\n                          </ShowMoreText>\n                        </p>\n                        <Row>\n                          <Col md='8'>\n                            <p><b>Added By</b></p>\n                            <span className=\"date\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i> {notes.CreatedByName +\" \" }</span>\n                            <span className=\"date\"><i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> {moment(notes.CreatedOn).format(CommonConfig.dateFormat.dateTime)}\n                            </span>\n                          </Col>\n                          {(notes.UpdatedByName != null) ? (\n                            <Col md='8'>\n                              <p><b>Updated By</b></p>\n                              <span className=\"date\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i> {notes.UpdatedByName +\" \" }</span>\n                              <span className=\"date\"><i class=\"fa fa-calendar\" aria-hidden=\"true\"></i> {moment(notes.UpdatedOn).format(CommonConfig.dateFormat.dateTime)}</span>\n                            </Col>\n                          ) : (null)}\n                        </Row>\n                      </div>\n\n                      {/* {(notes.NoteTitle == 'Manual Refer Policy' || notes.NoteTitle == 'Manual Refer Policy(H)' || notes.NoteTitle == 'Sum Insured Updated' || notes.NoteTitle == 'System Refer Policy' || notes.NoteTitle == 'System Refer Policy(H)' || notes.NoteTitle == 'Mooring Information Updated') ? (null) : (\n                        <div className=\"addednote-right\">\n                          <Button type=\"button\" icon=\"pi pi-pencil\" tooltip=\"Edit\" tooltipOptions={{ position: 'bottom' }} onClick={() => this.updateNotes(notes)}></Button>\n                        </div>\n                      )} */}\n                    </li>\n                  )\n                })\n                }\n              </ul>\n            </div>\n\n          </ScrollPanel>\n\n        </Sidebar>\n      </div>\n    );\n  }\n}\n\nexport default withTranslation()(PersonNotes);\n"]},"metadata":{},"sourceType":"module"}