{"ast":null,"code":"import _objectWithoutProperties from\"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from'react';import{Route,Redirect}from'react-router-dom';import Cookies from'js-cookie';// export const getAccessToken = () => Cookies.get('access_token')\n// export const getRefreshToken = () => Cookies.get('refresh_token')\nexport var getAccessToken=function getAccessToken(){return localStorage.getItem('access_token');};export var getRefreshToken=function getRefreshToken(){return localStorage.getItem('refresh_token');};export var isAuthenticated=function isAuthenticated(){return!!getAccessToken();};// Authetication.js Refrence Urls \n// https://github.com/coreui/coreui-free-react-admin-template/issues/113\n// https://stackoverflow.com/questions/49819183/react-what-is-the-best-way-to-handle-login-and-authentication //Check GG.'s answer for refrence\nexport var UnauthenticatedRoute=function UnauthenticatedRoute(_ref){var Component=_ref.component,rest=_objectWithoutProperties(_ref,[\"component\"]);return/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(props){return!isAuthenticated()?/*#__PURE__*/React.createElement(Component,props):/*#__PURE__*/React.createElement(Redirect,{to:\"/\"});}}));};export var AuthenticatedRoute=function AuthenticatedRoute(_ref2){var Component=_ref2.component,rest=_objectWithoutProperties(_ref2,[\"component\"]);return/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(props){return isAuthenticated()?/*#__PURE__*/React.createElement(Component,props):/*#__PURE__*/React.createElement(Redirect,{to:\"/login\"});}}));};// export const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n//     <Route {...rest} render={(props) => {\n//         let path = props.location.pathname.split('/');\n//         if(isAuthenticated()){\n//             if(path[1] === 'editContactDetails' && props.location.state === undefined){\n//                 return props.history.goBack();\n//             }else{\n//                 return <Component {...props} />\n//             }\n//         }else{\n//             return <Redirect to='/login' />\n//         }\n//     }} />\n// );","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/utils/authenticate.js"],"names":["React","Route","Redirect","Cookies","getAccessToken","localStorage","getItem","getRefreshToken","isAuthenticated","UnauthenticatedRoute","Component","component","rest","props","AuthenticatedRoute"],"mappings":"mNAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAeC,QAAf,KAA+B,kBAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA;AACA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAMC,CAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAN,EAAvB,CACP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAAOF,CAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAP,EAAxB,CACP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAAM,CAAC,CAACJ,cAAc,EAAtB,EAAxB,CAEP;AACA;AACA;AAEA,MAAO,IAAMK,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,UAAcC,CAAAA,SAAd,MAAGC,SAAH,CAA4BC,IAA5B,iEAChC,oBAAC,KAAD,kBAAWA,IAAX,EAAiB,MAAM,CAAE,gBAACC,KAAD,QACrB,CAACL,eAAe,EAAhB,cACM,oBAAC,SAAD,CAAeK,KAAf,CADN,cAEM,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EAHe,EAAzB,GADgC,EAA7B,CAQP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,WAAcJ,CAAAA,SAAd,OAAGC,SAAH,CAA4BC,IAA5B,kEAC9B,oBAAC,KAAD,kBAAWA,IAAX,EAAiB,MAAM,CAAE,gBAACC,KAAD,QACrBL,CAAAA,eAAe,gBACT,oBAAC,SAAD,CAAeK,KAAf,CADS,cAET,oBAAC,QAAD,EAAU,EAAE,CAAC,QAAb,EAHe,EAAzB,GAD8B,EAA3B,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Route,Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n// export const getAccessToken = () => Cookies.get('access_token')\n// export const getRefreshToken = () => Cookies.get('refresh_token')\nexport const getAccessToken = () => localStorage.getItem('access_token');\nexport const getRefreshToken = () =>  localStorage.getItem('refresh_token');\nexport const isAuthenticated = () => !!getAccessToken()\n\n// Authetication.js Refrence Urls \n// https://github.com/coreui/coreui-free-react-admin-template/issues/113\n// https://stackoverflow.com/questions/49819183/react-what-is-the-best-way-to-handle-login-and-authentication //Check GG.'s answer for refrence\n\nexport const UnauthenticatedRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        !isAuthenticated()\n            ? <Component {...props} />\n            : <Redirect to='/' />\n    )} />\n);\n\nexport const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        isAuthenticated()\n            ? <Component {...props} />\n            : <Redirect to='/login' />\n    )} />\n);\n\n// export const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n//     <Route {...rest} render={(props) => {\n//         let path = props.location.pathname.split('/');\n//         if(isAuthenticated()){\n//             if(path[1] === 'editContactDetails' && props.location.state === undefined){\n//                 return props.history.goBack();\n//             }else{\n//                 return <Component {...props} />\n//             }\n//         }else{\n//             return <Redirect to='/login' />\n//         }\n//     }} />\n// );"]},"metadata":{},"sourceType":"module"}