{"ast":null,"code":"'use strict';\n\nvar MailParser = require('./mail-parser.js');\n\nmodule.exports = function (input, options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = false;\n  }\n\n  var promise;\n\n  if (!callback) {\n    promise = new Promise(function (resolve, reject) {\n      callback = callbackPromise(resolve, reject);\n    });\n  }\n\n  options = options || {};\n  var keepCidLinks = !!options.keepCidLinks;\n  var mail = {\n    attachments: []\n  };\n  var parser = new MailParser(options);\n  parser.on('error', function (err) {\n    callback(err);\n  });\n  parser.on('headers', function (headers) {\n    mail.headers = headers;\n    mail.headerLines = parser.headerLines;\n  });\n  var reading = false;\n\n  var reader = function reader() {\n    reading = true;\n    var data = parser.read();\n\n    if (data === null) {\n      reading = false;\n      return;\n    }\n\n    if (data.type === 'text') {\n      Object.keys(data).forEach(function (key) {\n        if (['text', 'html', 'textAsHtml'].includes(key)) {\n          mail[key] = data[key];\n        }\n      });\n    }\n\n    if (data.type === 'attachment') {\n      mail.attachments.push(data);\n      var chunks = [];\n      var chunklen = 0;\n      data.content.on('readable', function () {\n        var chunk;\n\n        while ((chunk = data.content.read()) !== null) {\n          chunks.push(chunk);\n          chunklen += chunk.length;\n        }\n      });\n      data.content.on('end', function () {\n        data.content = Buffer.concat(chunks, chunklen);\n        data.release();\n        reader();\n      });\n    } else {\n      reader();\n    }\n  };\n\n  parser.on('readable', function () {\n    if (!reading) {\n      reader();\n    }\n  });\n  parser.on('end', function () {\n    ['subject', 'references', 'date', 'to', 'from', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'reply-to'].forEach(function (key) {\n      if (mail.headers.has(key)) {\n        mail[key.replace(/-([a-z])/g, function (m, c) {\n          return c.toUpperCase();\n        })] = mail.headers.get(key);\n      }\n    });\n\n    if (keepCidLinks) {\n      return callback(null, mail);\n    }\n\n    parser.updateImageLinks(function (attachment, done) {\n      return done(false, 'data:' + attachment.contentType + ';base64,' + attachment.content.toString('base64'));\n    }, function (err, html) {\n      if (err) {\n        return callback(err);\n      }\n\n      mail.html = html;\n      callback(null, mail);\n    });\n  });\n\n  if (typeof input === 'string') {\n    parser.end(Buffer.from(input));\n  } else if (Buffer.isBuffer(input)) {\n    parser.end(input);\n  } else {\n    input.once('error', function (err) {\n      input.destroy();\n      parser.destroy();\n      callback(err);\n    }).pipe(parser);\n  }\n\n  return promise;\n};\n\nfunction callbackPromise(resolve, reject) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var err = args.shift();\n\n    if (err) {\n      reject(err);\n    } else {\n      resolve.apply(void 0, args);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}