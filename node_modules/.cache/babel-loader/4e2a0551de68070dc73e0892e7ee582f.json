{"ast":null,"code":"'use strict'; // Helper class to rewrite nodes with specific mime type\n\nvar _classCallCheck = require(\"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transform = require('stream').Transform;\n\nvar libmime = require('libmime');\n/**\n * Really bad \"stream\" transform to parse format=flowed content\n *\n * @constructor\n * @param {String} delSp True if delsp option was used\n */\n\n\nvar FlowedDecoder = /*#__PURE__*/function (_Transform) {\n  _inherits(FlowedDecoder, _Transform);\n\n  var _super = _createSuper(FlowedDecoder);\n\n  function FlowedDecoder(config) {\n    var _this;\n\n    _classCallCheck(this, FlowedDecoder);\n\n    _this = _super.call(this);\n    _this.config = config || {};\n    _this.chunks = [];\n    _this.chunklen = 0;\n    _this.libmime = new libmime.Libmime({\n      Iconv: config.Iconv\n    });\n    return _this;\n  }\n\n  _createClass(FlowedDecoder, [{\n    key: \"_transform\",\n    value: function _transform(chunk, encoding, callback) {\n      if (!chunk || !chunk.length) {\n        return callback();\n      }\n\n      if (!encoding !== 'buffer') {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      this.chunks.push(chunk);\n      this.chunklen += chunk.length;\n      callback();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      if (this.chunklen) {\n        var currentBody = Buffer.concat(this.chunks, this.chunklen);\n\n        if (this.config.encoding === 'base64') {\n          currentBody = Buffer.from(currentBody.toString('binary'), 'base64');\n        }\n\n        var content = this.libmime.decodeFlowed(currentBody.toString('binary'), this.config.delSp);\n        this.push(Buffer.from(content, 'binary'));\n      }\n\n      return callback();\n    }\n  }]);\n\n  return FlowedDecoder;\n}(Transform);\n\nmodule.exports = FlowedDecoder;","map":null,"metadata":{},"sourceType":"script"}