{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/RiskQuestion/RiskQuestionList.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport { toast } from 'react-toastify';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, Button as BTN } from 'reactstrap';\nimport api from '../../../utils/apiClient';\nimport APIConstant from '../../../utils/constants';\nimport { CommonConfig } from '../../../utils/constants';\nimport moment from 'moment';\n\nclass RiskQuestionList extends Component {\n  constructor() {\n    super();\n\n    this.OpenModal = data => {\n      console.log(\"OpenModal\", data);\n      this.setState({\n        toogleEditModal: !this.state.toogleEditModal,\n        tempData: data,\n        IsRateable: data.IsRateable === 'Yes' ? true : false,\n        ResponseWeightTypeName: data.ResponseWeightTypeName,\n        textOperations: [],\n        NumberOperations: [],\n        DateOperations: [],\n        RiskQuestionId: data.RiskQuestionId,\n        effectiveDate: data.effectiveDate\n      });\n      this.getListValue(data);\n    };\n\n    this.InputValidate = (name, PIndex) => evt => {\n      console.log(\"InputValidate\", name, PIndex, this.state.ResponseWeightTypeName);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.textOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"TextRating\") {\n            let invSpace, TextRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              TextRatingErr = false;\n            } else {\n              TextRatingErr = true;\n            }\n\n            return { ...Package,\n              TextRating: evt.target.value,\n              TextRatingError: TextRatingErr\n            };\n          } else if (name === \"TextOperator\") {\n            // let IsAllOtherOperatorValue;\n            // if (evt.target.value === \"All Others\") {\n            //     IsAllOtherOperatorValue = false;\n            // } else {\n            //     IsAllOtherOperatorValue = true;\n            // }\n            return { ...Package,\n              TextOperator: evt.target.value\n            };\n          } else if (name === \"TextToCompare\") {\n            let invSpace = CommonConfig.RegExp.nameWithoutSpace,\n                TextRatingErr; // if (this.state.ResponseWeightTypeName === \"Rating\") {\n            //     invSpace = CommonConfig.RegExp.allowAllWithSpace\n            // }\n\n            if (!invSpace.test(evt.target.value)) {\n              TextRatingErr = true;\n            }\n\n            return { ...Package,\n              TextToCompare: evt.target.value,\n              TextToCompareError: TextRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        textOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.NumberInputValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"NumberRating\") {\n            let invSpace, NumberRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              NumberRatingErr = false;\n            } else {\n              NumberRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberRating: evt.target.value,\n              NumberRatingError: NumberRatingErr\n            };\n          } else if (name === \"NumberOperator1\") {\n            let IsAllOtherOperatorValue;\n\n            if (evt.target.value === \"All Others\") {\n              IsAllOtherOperatorValue = false;\n            } else {\n              IsAllOtherOperatorValue = true;\n            }\n\n            return { ...Package,\n              NumberOperator1: evt.target.value,\n              IsAllOtherOperator: IsAllOtherOperatorValue\n            };\n          } else if (name === \"NumberBound1\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberBound1: evt.target.value,\n              NumberRatingError: DateRatingErr\n            };\n          } else if (name === \"NumberOperator2\") {\n            console.log(\"evt.target.value\", evt.target.value);\n            let IsOnlyOneOperatorValue;\n\n            if (evt.target.value === \"One Operator Only\") {\n              IsOnlyOneOperatorValue = false;\n            } else {\n              IsOnlyOneOperatorValue = true;\n            }\n\n            return { ...Package,\n              NumberOperator2: evt.target.value,\n              IsOnlyOneOperator: IsOnlyOneOperatorValue\n            };\n          } else if (name === \"NumberBound2\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberBound2: evt.target.value,\n              NumberRatingError: DateRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        NumberOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.ListValueValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.ListValue.map((Package, index) => {\n        console.log(\"ListValueindex\", index, PIndex === index);\n\n        if (PIndex === index) {\n          if (name === \"Rating\") {\n            let invSpace, NumberRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              NumberRatingErr = false;\n            } else {\n              NumberRatingErr = true;\n            }\n\n            return { ...Package,\n              Rating: evt.target.value,\n              RatingError: NumberRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        ListValue: NewTextDetails\n      }, function () {});\n    };\n\n    this.DateInputValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.DateOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"DateRating\") {\n            let invSpace, DateRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateRating: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          } else if (name === \"DateOperator1\") {\n            let IsAllOtherOperatorValue;\n\n            if (evt.target.value === \"All Others\") {\n              IsAllOtherOperatorValue = false;\n            } else {\n              IsAllOtherOperatorValue = true;\n            }\n\n            return { ...Package,\n              DateOperator1: evt.target.value,\n              IsAllOtherOperator: IsAllOtherOperatorValue\n            };\n          } else if (name === \"DateBound1\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateBound1: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          } else if (name === \"DateOperator2\") {\n            let IsOnlyOneOperatorValue;\n\n            if (evt.target.value === \"One Operator Only\") {\n              IsOnlyOneOperatorValue = false;\n            } else {\n              IsOnlyOneOperatorValue = true;\n            }\n\n            return { ...Package,\n              DateOperator2: evt.target.value,\n              IsOnlyOneOperator: IsOnlyOneOperatorValue\n            };\n          } else if (name === \"DateBound2\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateBound2: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        DateOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.export = () => {\n      this.dt.exportCSV();\n    };\n\n    this.toggleEdit = () => {\n      this.setState({\n        toogleEditModal: false,\n        textOperations: [],\n        IsRateable: false,\n        NumberOperations: [],\n        ListValue: [],\n        DateOperations: [],\n        isEnable: false,\n        historyDates: '',\n        historyDatesArr: []\n      });\n    };\n\n    this.updateQuestion = () => {\n      let data = {\n        ResponseTypeName: this.state.tempData.ResponseTypeName,\n        IsRateable: this.state.IsRateable,\n        ResponseWeightTypeName: this.state.ResponseWeightTypeName,\n        RiskQuestionId: this.state.RiskQuestionId,\n        effectiveDate: this.state.effectiveDate,\n        loggedInUserId: CommonConfig.loggedInUserId()\n      };\n\n      if (this.state.tempData.ResponseTypeName === \"Text\") {\n        if (this.state.IsRateable) {\n          data.textOperations = this.state.textOperations;\n        } else {\n          data.textOperations = '';\n        }\n      } else if (this.state.tempData.ResponseTypeName === \"Number\" || this.state.tempData.ResponseTypeName === \"Percentage\" || this.state.tempData.ResponseTypeName === \"Amount\") {\n        if (this.state.IsRateable) {\n          data.NumberOperations = this.state.NumberOperations;\n        } else {\n          data.NumberOperations = '';\n        }\n      } else if (this.state.tempData.ResponseTypeName === \"Date\" || this.state.tempData.ResponseTypeName === \"Year\") {\n        if (this.state.IsRateable) {\n          data.DateOperations = this.state.DateOperations;\n        } else {\n          data.DateOperations = '';\n        }\n      } else if (this.state.tempData.ResponseTypeName === \"ListOfValues\" || this.state.tempData.ResponseTypeName === \"YesNo\") {\n        if (this.state.IsRateable) {\n          data.ListValue = this.state.ListValue;\n        } else {\n          data.ListValue = '';\n        }\n      }\n\n      console.log(\"IsOnlyOneOperator\", data);\n      api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\n        console.log(\"UpdateRiskQuestionWeightage\", res);\n\n        if (res.success) {\n          console.log(\"UpdateRiskQuestionWeightage\", res.data);\n          toast.success(res.data.message);\n          this.toggleEdit('save');\n          this.getRiskQuestion(); // setTimeout(function () {\n          //     window.location.reload();\n          // }, 1000);\n        }\n      }).catch(err => {});\n    };\n\n    this.goToHistoryPage = data => {\n      var Id = data.RiskQuestionId;\n      this.props.history.push({\n        pathname: '/Master/RiskQuestionHistory/' + Id,\n        state: {\n          Id: Id\n        }\n      });\n    };\n\n    this.getPageString = e => {\n      let firstPage = e.first + 1;\n      let l = e.rows * (e.page + 1);\n      let lastPage = l < this.state.RiskQuestionList.length ? l : this.state.RiskQuestionList.length;\n      var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.RiskQuestionList.length + ' records';\n      this.setState({\n        selectedPage: e.first,\n        str: str,\n        rowsPerPage: e.rows\n      });\n    };\n\n    this.checked = (isChecked, value) => {\n      console.log(\"checked\", isChecked);\n      this.setState({\n        IsRateable: isChecked\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'effectiveDate') {\n        if (e.target.value === '' || e.target.value === null) {\n          this.setState({\n            effectiveDateError: true\n          });\n          this.show(\"effectiveDate\", true, \"effectiveDateError\", \"Enter valid effective date\");\n        } else {\n          this.setState({\n            effectiveDateError: false,\n            effectiveDate: e.target.value\n          });\n          this.show(\"effectiveDate\", false, \"effectiveDateError\", \"\");\n        }\n      }\n    };\n\n    let columns = [{\n      field: \"QuestionCategoryName\",\n      header: \"Category\",\n      sortable: true,\n      filter: true,\n      id: 0\n    }, {\n      field: \"QuestionGroupName\",\n      header: \"Group\",\n      sortable: true,\n      filter: true,\n      id: 1\n    }, {\n      field: \"QuestionCode\",\n      header: \"Question Code\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"RiskQuestion\",\n      header: \"Question\",\n      sortable: true,\n      filter: true,\n      id: 3\n    }, {\n      field: \"IsRateable\",\n      header: \"Is Rated?\",\n      sortable: true,\n      filter: true,\n      id: 4\n    }, {\n      field: \"ResponseType\",\n      header: \"Response Type\",\n      sortable: true,\n      filter: true,\n      id: 5\n    }, {\n      field: \"ResponseWeightTypeName\",\n      header: \"Rating Type\",\n      sortable: true,\n      filter: true,\n      id: 6\n    }, {\n      body: this.actionTemplate.bind(this),\n      header: \"Action\",\n      sortable: false,\n      filter: false,\n      id: 7\n    }];\n    this.onColumnToggle = this.onColumnToggle.bind(this);\n    this.state = {\n      cols: columns,\n      RiskQuestionList: [],\n      rowData: '',\n      VesselClassList: [],\n      VesselTypeList: [],\n      vesselClass: '',\n      VesselClassId: '',\n      vesselClassError: true,\n      VesselTypeId: '',\n      vesselType: '',\n      vesselTypeError: true,\n      selectedPage: 0,\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      str: '',\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      globalFilter: null,\n      toogleEditModal: false,\n      tempData: '',\n      IsRateable: false,\n      ResponseWeightTypeName: '',\n      ResponseWeightTypeNameError: true,\n      textOperation: '',\n      textOperations: [],\n      TextArr: {\n        id: 1,\n        TextRating: '',\n        TextOperator: '',\n        TextToCompare: '',\n        TextToCompareError: false,\n        isDeleted: false\n      },\n      NumberOperations: [],\n      NumberArr: {\n        id: 1,\n        NumberRating: '',\n        NumberOperator1: '',\n        NumberOperator1Arr: [],\n        NumberBound1: '',\n        NumberOperator2: '',\n        NumberOperator2Arr: [],\n        NumberBound2: '',\n        IsOnlyOneOperator: false,\n        IsAllOtherOperator: true,\n        NumberRatingError: false,\n        isDeleted: false\n      },\n      DateOperations: [],\n      DateArr: {\n        id: 1,\n        DateRating: '',\n        DateOperator1: '',\n        DateOperator1Arr: [],\n        DateBound1: '',\n        DateOperator2: '',\n        DateOperator2Arr: [],\n        DateBound2: '',\n        IsOnlyOneOperator: false,\n        IsAllOtherOperator: true,\n        DateRatingError: false,\n        isDeleted: false\n      },\n      TextRatingError: true,\n      TextRating: '',\n      ListValue: [],\n      Rating: '',\n      RatingError: true,\n      listType: '',\n      systemEndorsementArr: [],\n      systemEndorsement: '',\n      systemEndorsementError: true,\n      systemEndorsementText: '',\n      systemEndorsementTextArr: [],\n      RiskQuestionId: '',\n      RiskQuestionResponseWeightageId: '',\n      ResponseType: '',\n      effectivedate: 'Effective Date',\n      effectiveDate: moment().format('YYYY-MM-DD'),\n      effectiveDateError: true,\n      historyDates: '',\n      historyDatesArr: [],\n      isEnable: false\n    };\n    this.colOptions = [];\n\n    for (let col of columns) {\n      this.colOptions.push({\n        label: col.header,\n        value: col\n      });\n    }\n  }\n\n  onColumnToggle(event) {\n    let valueInOrder = event.value.sort((x, y) => {\n      return x.id - y.id;\n    });\n    this.setState({\n      cols: valueInOrder\n    });\n  }\n\n  componentDidMount() {\n    this.getRiskQuestion();\n    this.getTimelineDetails();\n    this.getVesselClass();\n    this.getDropDownValues('RATINGTYPE', 'systemEndorsementArr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR', 'NumberOperator1Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR2', 'NumberOperator2Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR', 'DateOperator1Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR2', 'DateOperator2Arr', 'SortOrder');\n    this.getDropDownValues('TEXTOPERATOR', 'systemEndorsementTextArr', 'SortOrder');\n  }\n\n  getDropDownValues(stringMapType, setStateName, orderBy) {\n    try {\n      const data = {\n        stringmaptype: stringMapType,\n        orderby: orderBy\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          console.log(\"getDropDownValues\", res.data);\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  getRiskQuestion() {\n    const data = {\n      QuestionCategory: 'QUESTIONCATEGORY',\n      QuestionGroup: 'QUESTIONGROUP',\n      ResponseType: 'RESPONSETYPE',\n      ResponseWeitghtType: 'RESPONSEWEIGHTTYPE',\n      VesselClassId: '0f90c38f-3f40-11ea-b7f2-fa163eb9754c'\n    };\n    api.post('api/getRiskQuestion', data).then(res => {\n      console.log(\"getRiskQuestion\", res.data);\n\n      if (res.success) {\n        var formattedData = [];\n\n        for (var i = 0; i < res.data.length; i++) {\n          formattedData.push({\n            id: [i + 1],\n            QuestionCategoryName: res.data[i].QuestionCategoryName,\n            QuestionGroupName: res.data[i].QuestionGroupName,\n            QuestionCode: res.data[i].QuestionCode,\n            RiskQuestion: res.data[i].RiskQuestion,\n            IsRateable: res.data[i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\n            ResponseTypeName: res.data[i].ResponseType,\n            ResponseWeightTypeName: res.data[i].ResponseWeightTypeName,\n            ReferenceStringMapType: res.data[i].ReferenceStringMapType,\n            RiskQuestionId: res.data[i].RiskQuestionId,\n            loggedInUserId: CommonConfig.loggedInUserId(),\n            ResponseType: res.data[i].ResponseTypeName,\n            effectiveDate: CommonConfig.isEmpty(res.data[i].StartDate) ? '' : moment(res.data[i].StartDate).format('YYYY-MM-DD')\n          });\n        }\n\n        this.setState({\n          RiskQuestionList: formattedData\n        });\n      }\n    }).catch(err => {});\n  }\n\n  getListValue(ReferenceStringMapType) {\n    console.log(\"getListValue\", ReferenceStringMapType);\n\n    try {\n      const data = {\n        stringmaptype: ReferenceStringMapType.ReferenceStringMapType\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          console.log(\"getListValue\", res.data);\n          const dataToSend = {\n            RiskQuestionId: ReferenceStringMapType.RiskQuestionId // ReferenceStringMapType: ReferenceStringMapType.ReferenceStringMapType\n\n          };\n          api.post(\"api/getRiskQuestionResponseWeightageData\", dataToSend).then(res => {\n            if (res.success) {\n              console.log(\"getRiskQuestionResponseWeightageData\", res.data);\n\n              if (!res.data.length) {\n                debugger;\n\n                if (ReferenceStringMapType.ResponseTypeName === \"Number\" || ReferenceStringMapType.ResponseTypeName === \"Percentage\" || ReferenceStringMapType.ResponseTypeName === \"Amount\") {\n                  this.setState({\n                    NumberOperations: [this.state.NumberArr]\n                  });\n                } else if (ReferenceStringMapType.ResponseTypeName === \"Text\") {\n                  this.setState({\n                    textOperations: [this.state.TextArr]\n                  });\n                } else if (ReferenceStringMapType.ResponseTypeName === \"Date\" || ReferenceStringMapType.ResponseTypeName === \"Year\") {\n                  this.setState({\n                    DateOperations: [this.state.DateArr]\n                  });\n                }\n              } else {\n                var formattedData = [];\n                var NumberOperations = [];\n                var textOperations = [];\n                var DateOperations = [];\n                let i;\n\n                for (i = 0; i < res.data.length; i++) {\n                  var temppDataForNumber = {\n                    id: 1,\n                    NumberRating: '',\n                    NumberOperator1: '',\n                    NumberOperator1Arr: [],\n                    NumberBound1: '',\n                    NumberOperator2: '',\n                    NumberOperator2Arr: [],\n                    NumberBound2: '',\n                    IsOnlyOneOperator: true,\n                    IsAllOtherOperator: true,\n                    DateRatingError: false,\n                    isDeleted: false\n                  };\n                  var temppDataForText = {\n                    id: 1,\n                    TextRating: '',\n                    TextOperator: '',\n                    TextToCompare: '',\n                    isDeleted: false\n                  };\n                  var temppDataForDate = {\n                    id: 1,\n                    DateRating: '',\n                    DateOperator1: '',\n                    DateOperator1Arr: [],\n                    DateBound1: '',\n                    DateOperator2: '',\n                    DateOperator2Arr: [],\n                    DateBound2: '',\n                    IsOnlyOneOperator: true,\n                    IsAllOtherOperator: true,\n                    NumberRatingError: false,\n                    isDeleted: false\n                  };\n                  formattedData.push({\n                    Response: CommonConfig.isEmpty(res.data[i].ResponseStringMapKey) ? '' : res.data[i].ResponseStringMapKey.trim(),\n                    Rating: CommonConfig.isEmpty(res.data[i].Rating) ? CommonConfig.isEmpty(res.data[i].AbsoluteAmount) ? 0 : res.data[i].AbsoluteAmount : res.data[i].Rating,\n                    RiskQuestionResponseWeightageId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId\n                  });\n                  temppDataForNumber.id = i + 1;\n                  temppDataForNumber.NumberRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                  temppDataForNumber.NumberOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                  temppDataForNumber.NumberBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n                  temppDataForNumber.NumberOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? '' : res.data[i].Operator2;\n\n                  if (temppDataForNumber.NumberOperator2 === \"One Operator Only\") {\n                    temppDataForNumber.IsOnlyOneOperator = false;\n                  } else {\n                    temppDataForNumber.IsOnlyOneOperator = true;\n                  }\n\n                  temppDataForNumber.NumberBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                  temppDataForNumber.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                  temppDataForNumber.isDeleted = false; // temppDataForNumber.IsOnlyOneOperator= true;\n\n                  temppDataForText.TextRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                  temppDataForText.TextOperator = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                  temppDataForText.TextToCompare = CommonConfig.isEmpty(res.data[i].Bound1) ? '' : res.data[i].Bound1;\n                  temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                  temppDataForText.isDeleted = false;\n                  temppDataForDate.id = i + 1;\n                  temppDataForDate.DateRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                  temppDataForDate.DateOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? 0.00 : res.data[i].Operator1;\n                  temppDataForDate.DateBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n                  temppDataForDate.DateOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? 0.00 : res.data[i].Operator2;\n\n                  if (temppDataForDate.NumberOperator2 === \"One Operator Only\") {\n                    temppDataForDate.IsOnlyOneOperator = false;\n                  } else {\n                    temppDataForDate.IsOnlyOneOperator = true;\n                  }\n\n                  temppDataForDate.DateBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                  temppDataForDate.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                  temppDataForDate.isDeleted = false; // temppDataForDate.IsOnlyOneOperator= true;\n\n                  NumberOperations.push(temppDataForNumber);\n                  textOperations.push(temppDataForText);\n                  DateOperations.push(temppDataForDate);\n                }\n\n                this.setState({\n                  NumberOperations: NumberOperations\n                });\n                this.setState({\n                  textOperations: textOperations\n                });\n                this.setState({\n                  DateOperations: DateOperations\n                });\n                this.setState({\n                  ListValue: formattedData\n                });\n              }\n            }\n          }).catch(err => {\n            console.log(\"err\", err);\n          });\n        }\n      }).catch(err => {\n        console.log(\"err\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getVesselClass() {\n    let data = {}; //Static policy ID\n\n    api.post('api/getVesselClassList', data).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        this.setState({\n          VesselClassList: res.data\n        });\n      } else {}\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  addRowToArray(type) {\n    var i = this.state.textOperations.length;\n\n    if (type === 'Text') {\n      var textOperation = this.state.textOperations;\n      textOperation.push(this.state.TextArr);\n      this.setState({\n        textOperations: textOperation\n      });\n    } else if (type === 'Number') {\n      var NumberOperation = this.state.NumberOperations;\n      NumberOperation.push(this.state.NumberArr);\n      this.setState({\n        NumberOperations: NumberOperation\n      });\n    } else if (type === 'Date') {\n      var DateOperation = this.state.DateOperations;\n      DateOperation.push(this.state.DateArr);\n      this.setState({\n        DateOperations: DateOperation\n      });\n    }\n  }\n\n  removeRowToArray(value, i) {\n    this.state.textOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.textOperations);\n    this.setState({\n      textOperations: this.state.textOperations\n    });\n  }\n\n  removeRowToNumberArray(value, i) {\n    this.state.NumberOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.NumberOperations);\n    this.setState({\n      NumberOperations: this.state.NumberOperations\n    });\n  }\n\n  removeRowToDateArray(value, i) {\n    this.state.DateOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.DateOperations);\n    this.setState({\n      DateOperations: this.state.DateOperations\n    });\n  }\n\n  getTimelineDetails() {\n    var formattedData = [];\n    let firstPage = formattedData.length ? '1' : '0';\n    let lastPage = this.state.rowsPerPage < formattedData.length ? this.state.rowsPerPage : formattedData.length;\n    let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n  }\n\n  actionTemplate(rowData, column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-clock\",\n      className: \"p-button-primary\",\n      tooltip: \"Show History\",\n      onClick: () => this.goToHistoryPage(rowData),\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      style: {\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  selectType(value, type) {\n    console.log(\"selectType\", value, type);\n\n    if (type === 'vesselClass') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          vesselClassError: true,\n          vesselClass: value\n        });\n        this.show(\"vesselClass\", true, \"vesselClassError\", \"Please select Vessel Class Name\");\n      } else {\n        this.setState({\n          vesselClassError: false,\n          vesselClass: value\n        });\n        this.show(\"vesselClass\", false, \"vesselClassError\", \"\");\n      }\n    }\n\n    if (type === 'ResponseWeightTypeName') {\n      if (value === '' || value === null || value === undefined) {\n        this.setState({\n          ResponseWeightTypeNameError: true,\n          ResponseWeightTypeName: value\n        });\n        this.show(\"ResponseWeightTypeName\", true, \"ResponseWeightTypeNameError\", \"Select valid type\");\n      } else {\n        const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n          return { ...Package,\n            NumberRating: 0.00\n          };\n        });\n        const NewTextDetailsForDate = this.state.DateOperations.map((Package, index) => {\n          return { ...Package,\n            DateRating: 0.00\n          };\n        });\n        const NewTextDetailsForList = this.state.ListValue.map((Package, index) => {\n          return { ...Package,\n            Rating: 0.00\n          };\n        });\n        this.setState({\n          NumberOperations: NewTextDetails,\n          DateOperations: NewTextDetailsForDate,\n          ListValue: NewTextDetailsForList\n        });\n        this.setState({\n          ResponseWeightTypeNameError: false,\n          ResponseWeightTypeName: value\n        });\n        this.show(\"ResponseWeightTypeName\", false, \"ResponseWeightTypeNameError\", \"Select valid type\");\n      }\n    }\n  }\n\n  show(field, condition, errorField, message) {\n    console.log(\"(field, condition, errorField, message)\", field, condition, errorField, message);\n\n    if (condition) {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control is-invalid\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  editZone(task) {\n    if (task == \"view\") {\n      this.setState({\n        isEnable: false\n      }); // window.location.reload();\n    } else {\n      this.setState({\n        isEnable: true\n      });\n    }\n  }\n\n  render() {\n    let columns = this.state.cols.map((col, i) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        field: col.field,\n        header: col.header,\n        body: col.body,\n        sortable: col.sortable,\n        filter: col.filter,\n        filterMatchMode: \"contains\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 21\n      }\n    }, \"Risk Question List\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right-option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pi pi-search\",\n      style: {\n        margin: '4px 4px 0 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(InputText, {\n      type: \"search\",\n      onInput: e => this.setState({\n        globalFilter: e.target.value\n      }),\n      placeholder: \"Global Search\",\n      size: \"30\",\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.cols,\n      options: this.colOptions,\n      fixedPlaceholder: true,\n      placeholder: CommonConfig.dataTableConfig.columnToggleIcon,\n      tooltip: \"Show / Hide Column\",\n      onChange: this.onColumnToggle,\n      style: {\n        width: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-external-link\",\n      tooltip: \"Export As CSV\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: this.export,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.RiskQuestionList,\n      first: this.state.selectedPage,\n      onPage: e => this.getPageString(e),\n      paginator: true,\n      rows: this.state.rowsPerPage,\n      totalRecords: this.state.RiskQuestionList.length,\n      exportFilename: \"Risk Question List\",\n      currentPageReportTemplate: this.state.str,\n      paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n      rowsPerPageOptions: this.state.rowsPerPageOptions,\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      responsive: true,\n      resizableColumns: true,\n      columnResizeMode: \"fit\",\n      scrollable: true,\n      scrollHeight: \"265px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 21\n      }\n    }, columns)), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toogleEditModal,\n      toggle: () => this.toggleEdit('save'),\n      className: 'modal-lg ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.toggleEdit('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 21\n      }\n    }, \"Risk Question\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 33\n      }\n    }, \"Question Category:\"), \" \", this.state.tempData.QuestionCategoryName), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 33\n      }\n    }, \"Question Group:\"), \" \", this.state.tempData.QuestionGroupName), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 33\n      }\n    }, \"Question Code:\"), \" \", this.state.tempData.QuestionCode)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 64\n      }\n    }, \"Question:\"), \" \", this.state.tempData.RiskQuestion))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 33\n      }\n    }, \"Response Type:\"), \" \", this.state.tempData.ResponseTypeName)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848,\n        columnNumber: 33\n      }\n    }, \"Is Rateable?\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"checkbox\",\n      name: \"IsRateable\",\n      value: \"IsRateable\",\n      id: \"IsRateable\",\n      checked: this.state.IsRateable,\n      onClick: e => this.checked(e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 33\n      }\n    }, \"Type\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"ResponseWeightTypeName\",\n      id: \"ResponseWeightTypeName\",\n      onChange: e => this.selectType(e.target.value, 'ResponseWeightTypeName'),\n      value: this.state.ResponseWeightTypeName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 41\n      }\n    }, \"Select Rating Type\"), this.state.systemEndorsementArr.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.StringMapName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 53\n        }\n      }, type.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"ResponseWeightTypeNameError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 33\n      }\n    }, this.state.effectivedate)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"effectiveDate\",\n      id: \"effectiveDate\",\n      onChange: e => this.handleChange(e),\n      value: this.state.effectiveDate,\n      min: moment().format('YYYY-MM-DD'),\n      max: moment().add(100, 'years').format('YYYY-MM-DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"effectiveDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 25\n      }\n    }, this.state.tempData.ResponseTypeName === \"ListOfValues\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~LIST~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 45\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 45\n      }\n    }, \"Response\"))), this.state.ListValue.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 49\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"Rating\",\n        id: \"Rating\",\n        value: value.Rating,\n        onChange: this.ListValueValidate('Rating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 61\n        }\n      }), value.RatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 65\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 53\n        }\n      }, value.Response)));\n    })) : this.state.tempData.ResponseTypeName === \"YesNo\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~YESNO~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 49\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 49\n      }\n    }, \"Response\"))), this.state.ListValue.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 53\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"Rating\",\n        id: \"Rating\",\n        value: value.Rating,\n        onChange: this.ListValueValidate('Rating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933,\n          columnNumber: 65\n        }\n      }), value.RatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 69\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 57\n        }\n      }, value.Response)));\n    })) : this.state.tempData.ResponseTypeName === \"Number\" || this.state.tempData.ResponseTypeName === \"Percentage\" || this.state.tempData.ResponseTypeName === \"Amount\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~NUMBER~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 53\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 53\n      }\n    }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959,\n        columnNumber: 53\n      }\n    }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 961,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 53\n      }\n    }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 53\n      }\n    }, \"Bound 2\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 45\n      }\n    }, this.state.NumberOperations.map((value, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 57\n        }\n      }, value.isDeleted == true ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 69\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberRating\",\n        value: value.NumberRating,\n        id: \"NumberRating\",\n        onChange: this.NumberInputValidate('NumberRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 89\n        }\n      }), value.NumberRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 93\n        }\n      }, \" Please enter valid input \") : null))) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 990,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"NumberOperator1\",\n        onChange: this.NumberInputValidate('NumberOperator1', index),\n        value: value.NumberOperator1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.NumberOperator1Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.StringMapName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 93\n          }\n        }, type.StringMapName);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 69\n        }\n      }, value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberBound1\",\n        value: value.NumberBound1,\n        onChange: this.NumberInputValidate('NumberBound1', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003,\n          columnNumber: 81\n        }\n      })) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1007,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1009,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"NumberOperator2\",\n        onChange: this.NumberInputValidate('NumberOperator2', index),\n        value: value.NumberOperator2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.NumberOperator2Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 93\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1020,\n          columnNumber: 69\n        }\n      }, value.IsAllOtherOperator && value.IsOnlyOneOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberBound2\",\n        value: value.NumberBound2,\n        onChange: this.NumberInputValidate('NumberBound2', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 81\n        }\n      })) : null), value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Number'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 77\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToNumberArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 81\n        }\n      }, \"  Remove\") : null) : null));\n    }))) : this.state.tempData.ResponseTypeName === \"Date\" || this.state.tempData.ResponseTypeName === \"Year\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~DATE~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 57\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1049,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1050,\n        columnNumber: 57\n      }\n    }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 57\n      }\n    }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 57\n      }\n    }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 57\n      }\n    }, \"Bound 2\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 49\n      }\n    }, this.state.DateOperations.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 65\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateRating\",\n        id: \"DateRating\",\n        value: value.DateRating,\n        onChange: this.DateInputValidate('DateRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 77\n        }\n      }), value.DateRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 81\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1079,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"DateOperator1\",\n        onChange: this.DateInputValidate('DateOperator1', index),\n        value: value.DateOperator1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 77\n        }\n      }, \"Select Rating Type\"), this.state.DateOperator1Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1083,\n            columnNumber: 89\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 65\n        }\n      }, value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateBound1\",\n        value: value.DateBound1,\n        onChange: this.DateInputValidate('DateBound1', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1093,\n          columnNumber: 77\n        }\n      })) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"DateOperator2\",\n        onChange: this.DateInputValidate('DateOperator2', index),\n        value: value.DateOperator2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 77\n        }\n      }, \"Select Rating Type\"), this.state.DateOperator2Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1105,\n            columnNumber: 89\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 65\n        }\n      }, value.IsAllOtherOperator && value.IsOnlyOneOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateBound2\",\n        value: value.DateBound2,\n        onChange: this.DateInputValidate('DateBound2', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1117,\n          columnNumber: 77\n        }\n      })) : null), value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Date'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 73\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToDateArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125,\n          columnNumber: 77\n        }\n      }, \"  Remove\") : null) : null);\n    }))) : this.state.tempData.ResponseTypeName === \"Text\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~TEXT~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 61\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 61\n      }\n    }, \"Operator\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 61\n      }\n    }, \"Text for Comparison\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 53\n      }\n    }, this.state.textOperations.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152,\n          columnNumber: 69\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1154,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"TextRating\",\n        id: \"TextRating\",\n        value: value.TextRating,\n        onChange: this.InputValidate('TextRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 81\n        }\n      }), value.TextRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1157,\n          columnNumber: 85\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1162,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"systemEndorsementText\",\n        onChange: this.InputValidate('TextOperator', index),\n        value: value.TextOperator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1164,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.systemEndorsementTextArr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1167,\n            columnNumber: 93\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1173,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1174,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"TextToCompare\",\n        id: \"TextToCompare\",\n        value: value.TextToCompare,\n        onChange: this.InputValidate('TextToCompare', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 77\n        }\n      }), value.TextToCompareError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 81\n        }\n      }, \" Please enter valid input \") : null)), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1181,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Text'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 73\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1184,\n          columnNumber: 77\n        }\n      }, \"  Remove\") : null));\n    }))) : null)), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.updateQuestion(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 84\n      }\n    }), \" Update\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.toggleEdit('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 86\n      }\n    }), \" Cancel\"))));\n  }\n\n}\n\nexport default RiskQuestionList;","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/RiskQuestion/RiskQuestionList.js"],"names":["React","Component","DataTable","Column","MultiSelect","InputText","toast","Button","Modal","ModalBody","ModalFooter","ModalHeader","Col","Row","Input","BTN","api","APIConstant","CommonConfig","moment","RiskQuestionList","constructor","OpenModal","data","console","log","setState","toogleEditModal","state","tempData","IsRateable","ResponseWeightTypeName","textOperations","NumberOperations","DateOperations","RiskQuestionId","effectiveDate","getListValue","InputValidate","name","PIndex","evt","target","value","NewTextDetails","map","Package","index","invSpace","TextRatingErr","test","TextRating","TextRatingError","TextOperator","RegExp","nameWithoutSpace","TextToCompare","TextToCompareError","NumberInputValidate","NumberRatingErr","NumberRating","NumberRatingError","IsAllOtherOperatorValue","NumberOperator1","IsAllOtherOperator","DateRatingErr","number","NumberBound1","IsOnlyOneOperatorValue","NumberOperator2","IsOnlyOneOperator","NumberBound2","ListValueValidate","ListValue","Rating","RatingError","DateInputValidate","DateRating","DateRatingError","DateOperator1","DateBound1","DateOperator2","DateBound2","export","dt","exportCSV","toggleEdit","isEnable","historyDates","historyDatesArr","updateQuestion","ResponseTypeName","loggedInUserId","post","then","res","success","message","getRiskQuestion","catch","err","goToHistoryPage","Id","props","history","push","pathname","getPageString","e","firstPage","first","l","rows","page","lastPage","length","str","selectedPage","rowsPerPage","checked","isChecked","handleChange","effectiveDateError","show","columns","field","header","sortable","filter","id","body","actionTemplate","bind","onColumnToggle","cols","rowData","VesselClassList","VesselTypeList","vesselClass","VesselClassId","vesselClassError","VesselTypeId","vesselType","vesselTypeError","rowsPerPageOptions","dataTableConfig","globalFilter","ResponseWeightTypeNameError","textOperation","TextArr","isDeleted","NumberArr","NumberOperator1Arr","NumberOperator2Arr","DateArr","DateOperator1Arr","DateOperator2Arr","listType","systemEndorsementArr","systemEndorsement","systemEndorsementError","systemEndorsementText","systemEndorsementTextArr","RiskQuestionResponseWeightageId","ResponseType","effectivedate","format","colOptions","col","label","event","valueInOrder","sort","x","y","componentDidMount","getTimelineDetails","getVesselClass","getDropDownValues","stringMapType","setStateName","orderBy","stringmaptype","orderby","path","dropdownbycode","error","QuestionCategory","QuestionGroup","ResponseWeitghtType","formattedData","i","QuestionCategoryName","QuestionGroupName","QuestionCode","RiskQuestion","ReferenceStringMapType","isEmpty","StartDate","dataToSend","temppDataForNumber","temppDataForText","temppDataForDate","Response","ResponseStringMapKey","trim","AbsoluteAmount","Operator1","Bound1","Operator2","Bound2","addRowToArray","type","NumberOperation","DateOperation","removeRowToArray","removeRowToNumberArray","removeRowToDateArray","column","position","marginLeft","selectType","undefined","NewTextDetailsForDate","NewTextDetailsForList","condition","errorField","document","getElementById","className","innerHTML","editZone","task","render","textAlign","margin","marginRight","columnToggleIcon","width","el","marginTop","fontSize","StringMapName","add","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport { toast } from 'react-toastify';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, Button as BTN } from 'reactstrap';\nimport api from '../../../utils/apiClient';\nimport APIConstant from '../../../utils/constants';\nimport { CommonConfig } from '../../../utils/constants';\nimport moment from 'moment';\n\n\nclass RiskQuestionList extends Component {\n    constructor() {\n        super();\n\n        let columns = [\n            { field: \"QuestionCategoryName\", header: \"Category\", sortable: true, filter: true, id: 0 },\n            { field: \"QuestionGroupName\", header: \"Group\", sortable: true, filter: true, id: 1 },\n            { field: \"QuestionCode\", header: \"Question Code\", sortable: true, filter: true, id: 2 },\n            { field: \"RiskQuestion\", header: \"Question\", sortable: true, filter: true, id: 3 },\n            { field: \"IsRateable\", header: \"Is Rated?\", sortable: true, filter: true, id: 4 },\n            { field: \"ResponseType\", header: \"Response Type\", sortable: true, filter: true, id: 5 },\n            { field: \"ResponseWeightTypeName\", header: \"Rating Type\", sortable: true, filter: true, id: 6 },\n            { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, id: 7 }\n        ];\n\n        this.onColumnToggle = this.onColumnToggle.bind(this);\n\n        this.state = {\n            cols: columns,\n            RiskQuestionList: [],\n            rowData: '',\n            VesselClassList: [],\n            VesselTypeList: [],\n            vesselClass: '',\n            VesselClassId: '',\n            vesselClassError: true,\n            VesselTypeId: '',\n            vesselType: '',\n            vesselTypeError: true,\n            selectedPage: 0,\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n            str: '',\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            globalFilter: null,\n            toogleEditModal: false,\n            tempData: '',\n            IsRateable: false,\n            ResponseWeightTypeName: '',\n            ResponseWeightTypeNameError: true,\n            textOperation: '',\n            textOperations: [],\n            TextArr: {\n                id: 1,\n                TextRating: '',\n                TextOperator: '',\n                TextToCompare: '',\n                TextToCompareError: false,\n                isDeleted: false,\n            },\n            NumberOperations: [],\n            NumberArr: {\n                id: 1,\n                NumberRating: '',\n                NumberOperator1: '',\n                NumberOperator1Arr: [],\n                NumberBound1: '',\n                NumberOperator2: '',\n                NumberOperator2Arr: [],\n                NumberBound2: '',\n                IsOnlyOneOperator: false,\n                IsAllOtherOperator: true,\n                NumberRatingError: false,\n                isDeleted: false,\n            },\n            DateOperations: [],\n            DateArr: {\n                id: 1,\n                DateRating: '',\n                DateOperator1: '',\n                DateOperator1Arr: [],\n                DateBound1: '',\n                DateOperator2: '',\n                DateOperator2Arr: [],\n                DateBound2: '',\n                IsOnlyOneOperator: false,\n                IsAllOtherOperator: true,\n                DateRatingError: false,\n                isDeleted: false,\n            },\n            TextRatingError: true,\n            TextRating: '',\n            ListValue: [],\n            Rating: '',\n            RatingError: true,\n            listType: '',\n            systemEndorsementArr: [],\n            systemEndorsement: '',\n            systemEndorsementError: true,\n            systemEndorsementText: '',\n            systemEndorsementTextArr: [],\n            RiskQuestionId: '',\n            RiskQuestionResponseWeightageId: '',\n            ResponseType: '',\n            effectivedate: 'Effective Date',\n            effectiveDate: moment().format('YYYY-MM-DD'),\n            effectiveDateError: true,\n            historyDates: '',\n            historyDatesArr: [],\n            isEnable: false,\n        };\n        this.colOptions = [];\n        for (let col of columns) {\n            this.colOptions.push({ label: col.header, value: col });\n        }\n    }\n\n    onColumnToggle(event) {\n        let valueInOrder = event.value.sort((x, y) => { return x.id - y.id });\n        this.setState({ cols: valueInOrder });\n    }\n\n    componentDidMount() {\n        this.getRiskQuestion();\n        this.getTimelineDetails();\n        this.getVesselClass();\n        this.getDropDownValues('RATINGTYPE', 'systemEndorsementArr', 'SortOrder');\n        this.getDropDownValues('RATINGOPERATOR', 'NumberOperator1Arr', 'SortOrder');\n        this.getDropDownValues('RATINGOPERATOR2', 'NumberOperator2Arr', 'SortOrder');\n        this.getDropDownValues('RATINGOPERATOR', 'DateOperator1Arr', 'SortOrder');\n        this.getDropDownValues('RATINGOPERATOR2', 'DateOperator2Arr', 'SortOrder');\n        this.getDropDownValues('TEXTOPERATOR', 'systemEndorsementTextArr', 'SortOrder');\n    }\n\n    getDropDownValues(stringMapType, setStateName, orderBy) {\n        try {\n            const data = {\n                stringmaptype: stringMapType,\n                orderby: orderBy\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    console.log(\"getDropDownValues\", res.data);\n                    this.setState({ [setStateName]: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n        }\n    }\n\n    getRiskQuestion() {\n        const data = {\n            QuestionCategory: 'QUESTIONCATEGORY',\n            QuestionGroup: 'QUESTIONGROUP',\n            ResponseType: 'RESPONSETYPE',\n            ResponseWeitghtType: 'RESPONSEWEIGHTTYPE',\n            VesselClassId: '0f90c38f-3f40-11ea-b7f2-fa163eb9754c',\n        };\n        api.post('api/getRiskQuestion', data).then(res => {\n            console.log(\"getRiskQuestion\", res.data);\n            if (res.success) {\n                var formattedData = [];\n                for (var i = 0; i < res.data.length; i++) {\n                    formattedData.push({\n                        id: [i + 1],\n                        QuestionCategoryName: res.data[i].QuestionCategoryName,\n                        QuestionGroupName: res.data[i].QuestionGroupName,\n                        QuestionCode: res.data[i].QuestionCode,\n                        RiskQuestion: res.data[i].RiskQuestion,\n                        IsRateable: res.data[i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\n                        ResponseTypeName: res.data[i].ResponseType,\n                        ResponseWeightTypeName: res.data[i].ResponseWeightTypeName,\n                        ReferenceStringMapType: res.data[i].ReferenceStringMapType,\n                        RiskQuestionId: res.data[i].RiskQuestionId,\n                        loggedInUserId: CommonConfig.loggedInUserId(),\n                        ResponseType: res.data[i].ResponseTypeName,\n                        effectiveDate: CommonConfig.isEmpty(res.data[i].StartDate) ? '' : moment(res.data[i].StartDate).format('YYYY-MM-DD'),\n                    })\n                }\n                this.setState({ RiskQuestionList: formattedData });\n            }\n        }).catch(err => {\n        });\n    }\n\n    OpenModal = (data) => {\n        console.log(\"OpenModal\", data);\n        this.setState({ toogleEditModal: !this.state.toogleEditModal, tempData: data, IsRateable: (data.IsRateable === 'Yes' ? true : false), ResponseWeightTypeName: data.ResponseWeightTypeName, textOperations: [], NumberOperations: [], DateOperations: [], RiskQuestionId: data.RiskQuestionId, effectiveDate: data.effectiveDate });\n        this.getListValue(data);\n    }\n\n    getListValue(ReferenceStringMapType) {\n        console.log(\"getListValue\", ReferenceStringMapType);\n        try {\n            const data = {\n                stringmaptype: ReferenceStringMapType.ReferenceStringMapType\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    console.log(\"getListValue\", res.data);\n                    const dataToSend = {\n                        RiskQuestionId: ReferenceStringMapType.RiskQuestionId,\n                        // ReferenceStringMapType: ReferenceStringMapType.ReferenceStringMapType\n                    }\n                    api.post(\"api/getRiskQuestionResponseWeightageData\", dataToSend).then(res => {\n                        if (res.success) {\n                            console.log(\"getRiskQuestionResponseWeightageData\", res.data);\n                            if (!res.data.length) {\n                                debugger\n                                if (ReferenceStringMapType.ResponseTypeName === \"Number\" || ReferenceStringMapType.ResponseTypeName === \"Percentage\" || ReferenceStringMapType.ResponseTypeName === \"Amount\") {\n                                    this.setState({ NumberOperations: [this.state.NumberArr] });\n                                } else if (ReferenceStringMapType.ResponseTypeName === \"Text\") {\n                                    this.setState({ textOperations: [this.state.TextArr] });\n                                } else if (ReferenceStringMapType.ResponseTypeName === \"Date\" || ReferenceStringMapType.ResponseTypeName === \"Year\") {\n                                    this.setState({ DateOperations: [this.state.DateArr] });\n                                }\n                            } else {\n                                var formattedData = [];\n                                var NumberOperations = [];\n                                var textOperations = [];\n                                var DateOperations = [];\n                                let i;\n                                for (i = 0; i < res.data.length; i++) {\n                                    var temppDataForNumber = {\n                                        id: 1,\n                                        NumberRating: '',\n                                        NumberOperator1: '',\n                                        NumberOperator1Arr: [],\n                                        NumberBound1: '',\n                                        NumberOperator2: '',\n                                        NumberOperator2Arr: [],\n                                        NumberBound2: '',\n                                        IsOnlyOneOperator: true,\n                                        IsAllOtherOperator: true,\n                                        DateRatingError: false,\n                                        isDeleted: false,\n                                    };\n\n                                    var temppDataForText = {\n                                        id: 1,\n                                        TextRating: '',\n                                        TextOperator: '',\n                                        TextToCompare: '',\n                                        isDeleted: false,\n                                    }\n\n                                    var temppDataForDate = {\n                                        id: 1,\n                                        DateRating: '',\n                                        DateOperator1: '',\n                                        DateOperator1Arr: [],\n                                        DateBound1: '',\n                                        DateOperator2: '',\n                                        DateOperator2Arr: [],\n                                        DateBound2: '',\n                                        IsOnlyOneOperator: true,\n                                        IsAllOtherOperator: true,\n                                        NumberRatingError: false,\n                                        isDeleted: false,\n                                    }\n                                    formattedData.push({\n                                        Response: CommonConfig.isEmpty(res.data[i].ResponseStringMapKey) ? '' : (res.data[i].ResponseStringMapKey).trim(),\n                                        Rating: CommonConfig.isEmpty(res.data[i].Rating) ? CommonConfig.isEmpty(res.data[i].AbsoluteAmount) ? 0 : res.data[i].AbsoluteAmount : res.data[i].Rating,\n                                        RiskQuestionResponseWeightageId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId\n\n                                    });\n\n                                    temppDataForNumber.id = i + 1;\n                                    temppDataForNumber.NumberRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                                    temppDataForNumber.NumberOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                                    temppDataForNumber.NumberBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n\n                                    temppDataForNumber.NumberOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? '' : res.data[i].Operator2;\n                                    if (temppDataForNumber.NumberOperator2 === \"One Operator Only\") {\n                                        temppDataForNumber.IsOnlyOneOperator = false;\n                                    } else {\n                                        temppDataForNumber.IsOnlyOneOperator = true;\n                                    }\n                                    temppDataForNumber.NumberBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                                    temppDataForNumber.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                                    temppDataForNumber.isDeleted = false;\n                                    // temppDataForNumber.IsOnlyOneOperator= true;\n\n                                    temppDataForText.TextRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                                    temppDataForText.TextOperator = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                                    temppDataForText.TextToCompare = CommonConfig.isEmpty(res.data[i].Bound1) ? '' : res.data[i].Bound1;\n                                    temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                                    temppDataForText.isDeleted = false;\n\n                                    temppDataForDate.id = i + 1;\n                                    temppDataForDate.DateRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                                    temppDataForDate.DateOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? 0.00 : res.data[i].Operator1;\n                                    temppDataForDate.DateBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n                                    temppDataForDate.DateOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? 0.00 : res.data[i].Operator2;\n                                    if (temppDataForDate.NumberOperator2 === \"One Operator Only\") {\n                                        temppDataForDate.IsOnlyOneOperator = false;\n                                    } else {\n                                        temppDataForDate.IsOnlyOneOperator = true;\n                                    }\n                                    temppDataForDate.DateBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                                    temppDataForDate.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                                    temppDataForDate.isDeleted = false;\n                                    // temppDataForDate.IsOnlyOneOperator= true;\n\n                                    NumberOperations.push(temppDataForNumber);\n                                    textOperations.push(temppDataForText);\n                                    DateOperations.push(temppDataForDate);\n                                }\n                                this.setState({ NumberOperations: NumberOperations });\n                                this.setState({ textOperations: textOperations });\n                                this.setState({ DateOperations: DateOperations });\n                                this.setState({ ListValue: formattedData });\n                            }\n                        }\n                    }).catch(err => {\n                        console.log(\"err\", err);\n                    });\n                }\n            }).catch(err => {\n                console.log(\"err\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getVesselClass() {\n        let data = {} //Static policy ID\n        api.post('api/getVesselClassList', data).then(res => {\n            console.log(res);\n\n            if (res.success) {\n                this.setState({ VesselClassList: res.data });\n            } else {\n            }\n        }).catch(err => {\n            console.log(\"errr\", err);\n        });\n    }\n\n    addRowToArray(type) {\n        var i = this.state.textOperations.length;\n        if (type === 'Text') {\n            var textOperation = this.state.textOperations;\n            textOperation.push(this.state.TextArr);\n            this.setState({ textOperations: textOperation });\n        } else if (type === 'Number') {\n            var NumberOperation = this.state.NumberOperations;\n            NumberOperation.push(this.state.NumberArr);\n            this.setState({ NumberOperations: NumberOperation });\n        } else if (type === 'Date') {\n            var DateOperation = this.state.DateOperations;\n            DateOperation.push(this.state.DateArr);\n            this.setState({ DateOperations: DateOperation });\n        }\n    }\n\n    removeRowToArray(value, i) {\n        this.state.textOperations[i].isDeleted = true;\n        console.log(\"removeRowToNumberArray\", this.state.textOperations);\n        this.setState({ textOperations: this.state.textOperations });\n    }\n\n    removeRowToNumberArray(value, i) {\n        this.state.NumberOperations[i].isDeleted = true;\n        console.log(\"removeRowToNumberArray\", this.state.NumberOperations);\n        this.setState({ NumberOperations: this.state.NumberOperations });\n    }\n\n    removeRowToDateArray(value, i) {\n        this.state.DateOperations[i].isDeleted = true;\n        console.log(\"removeRowToNumberArray\", this.state.DateOperations);\n        this.setState({ DateOperations: this.state.DateOperations });\n    }\n\n    InputValidate = (name, PIndex) => evt => {\n        console.log(\"InputValidate\", name, PIndex, this.state.ResponseWeightTypeName);\n        this.setState({ [evt.target.name]: evt.target.value });\n        const NewTextDetails = this.state.textOperations.map((Package, index) => {\n            if (PIndex === index) {\n                if (name === \"TextRating\") {\n                    let invSpace, TextRatingErr;\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\n                        invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n                        invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n                    }\n\n                    if (invSpace.test(evt.target.value)) {\n                        TextRatingErr = false;\n                    } else {\n                        TextRatingErr = true;\n                    }\n                    return { ...Package, TextRating: evt.target.value, TextRatingError: TextRatingErr };\n                } else if (name === \"TextOperator\") {\n                    // let IsAllOtherOperatorValue;\n                    // if (evt.target.value === \"All Others\") {\n                    //     IsAllOtherOperatorValue = false;\n                    // } else {\n                    //     IsAllOtherOperatorValue = true;\n                    // }\n                    return { ...Package, TextOperator: evt.target.value };\n                }\n                else if (name === \"TextToCompare\") {\n                    let invSpace = CommonConfig.RegExp.nameWithoutSpace, TextRatingErr;\n                    // if (this.state.ResponseWeightTypeName === \"Rating\") {\n                    //     invSpace = CommonConfig.RegExp.allowAllWithSpace\n                    // }\n\n                    if (!invSpace.test(evt.target.value)) {\n                        TextRatingErr = true;\n                    }\n                    return { ...Package, TextToCompare: evt.target.value, TextToCompareError: TextRatingErr };\n                }\n            } else {\n                return { ...Package };\n            }\n        });\n        this.setState({ textOperations: NewTextDetails }, function () {\n        });\n    }\n\n    NumberInputValidate = (name, PIndex) => evt => {\n        console.log(name, PIndex);\n        this.setState({ [evt.target.name]: evt.target.value });\n        const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n            if (PIndex === index) {\n                if (name === \"NumberRating\") {\n                    let invSpace, NumberRatingErr;\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\n                        invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n                        invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n                    }\n\n                    if (invSpace.test(evt.target.value)) {\n                        NumberRatingErr = false;\n                    } else {\n                        NumberRatingErr = true;\n                    }\n                    return { ...Package, NumberRating: evt.target.value, NumberRatingError: NumberRatingErr };\n                }\n                else if (name === \"NumberOperator1\") {\n                    let IsAllOtherOperatorValue;\n                    if (evt.target.value === \"All Others\") {\n                        IsAllOtherOperatorValue = false;\n                    } else {\n                        IsAllOtherOperatorValue = true;\n                    }\n                    return { ...Package, NumberOperator1: evt.target.value, IsAllOtherOperator: IsAllOtherOperatorValue };\n                }\n\n                else if (name === \"NumberBound1\") {\n                    let invSpace, DateRatingErr;\n                    invSpace = CommonConfig.RegExp.number;\n                    if (invSpace.test(evt.target.value)) {\n                        DateRatingErr = false;\n                    } else {\n                        DateRatingErr = true;\n                    }\n                    return { ...Package, NumberBound1: evt.target.value, NumberRatingError: DateRatingErr };\n                }\n\n                else if (name === \"NumberOperator2\") {\n                    console.log(\"evt.target.value\", evt.target.value);\n                    let IsOnlyOneOperatorValue;\n                    if (evt.target.value === \"One Operator Only\") {\n                        IsOnlyOneOperatorValue = false;\n                    } else {\n                        IsOnlyOneOperatorValue = true;\n                    }\n                    return { ...Package, NumberOperator2: evt.target.value, IsOnlyOneOperator: IsOnlyOneOperatorValue };\n                }\n\n                else if (name === \"NumberBound2\") {\n                    let invSpace, DateRatingErr;\n                    invSpace = CommonConfig.RegExp.number;\n                    if (invSpace.test(evt.target.value)) {\n                        DateRatingErr = false;\n                    } else {\n                        DateRatingErr = true;\n                    }\n                    return { ...Package, NumberBound2: evt.target.value, NumberRatingError: DateRatingErr };\n                }\n            } else {\n                return { ...Package };\n            }\n        });\n        this.setState({ NumberOperations: NewTextDetails }, function () {\n        });\n    }\n\n    ListValueValidate = (name, PIndex) => evt => {\n        console.log(name, PIndex);\n        this.setState({ [evt.target.name]: evt.target.value });\n        const NewTextDetails = this.state.ListValue.map((Package, index) => {\n            console.log(\"ListValueindex\", index, PIndex === index);\n            if (PIndex === index) {\n                if (name === \"Rating\") {\n                    let invSpace, NumberRatingErr;\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\n                        invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n                        invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n                    }\n\n                    if (invSpace.test(evt.target.value)) {\n                        NumberRatingErr = false;\n                    } else {\n                        NumberRatingErr = true;\n                    }\n                    return { ...Package, Rating: evt.target.value, RatingError: NumberRatingErr };\n                }\n            } else {\n                return { ...Package };\n            }\n        });\n        this.setState({ ListValue: NewTextDetails }, function () {\n        });\n    }\n\n    DateInputValidate = (name, PIndex) => evt => {\n        console.log(name, PIndex);\n        this.setState({ [evt.target.name]: evt.target.value });\n        const NewTextDetails = this.state.DateOperations.map((Package, index) => {\n            if (PIndex === index) {\n                if (name === \"DateRating\") {\n                    let invSpace, DateRatingErr;\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\n                        invSpace = /(^100(\\.0{1,2})?$)|(^([1-9]([0-9])?|0)(\\.[0-9]{1,2})?$)/\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n                        invSpace = /^[0-9]+(\\.[0-9][0-9])?$/;\n                    }\n                    if (invSpace.test(evt.target.value)) {\n                        DateRatingErr = false;\n                    } else {\n                        DateRatingErr = true;\n                    }\n                    return { ...Package, DateRating: evt.target.value, DateRatingError: DateRatingErr };\n                }\n\n                else if (name === \"DateOperator1\") {\n                    let IsAllOtherOperatorValue;\n                    if (evt.target.value === \"All Others\") {\n                        IsAllOtherOperatorValue = false;\n                    } else {\n                        IsAllOtherOperatorValue = true;\n                    }\n                    return { ...Package, DateOperator1: evt.target.value, IsAllOtherOperator: IsAllOtherOperatorValue };\n                }\n\n                else if (name === \"DateBound1\") {\n                    let invSpace, DateRatingErr;\n                    invSpace = CommonConfig.RegExp.number;\n                    if (invSpace.test(evt.target.value)) {\n                        DateRatingErr = false;\n                    } else {\n                        DateRatingErr = true;\n                    }\n                    return { ...Package, DateBound1: evt.target.value, DateRatingError: DateRatingErr };\n                }\n\n                else if (name === \"DateOperator2\") {\n                    let IsOnlyOneOperatorValue;\n                    if (evt.target.value === \"One Operator Only\") {\n                        IsOnlyOneOperatorValue = false;\n                    } else {\n                        IsOnlyOneOperatorValue = true;\n                    }\n                    return { ...Package, DateOperator2: evt.target.value, IsOnlyOneOperator: IsOnlyOneOperatorValue };\n                } else if (name === \"DateBound2\") {\n                    let invSpace, DateRatingErr;\n                    invSpace = CommonConfig.RegExp.number;\n                    if (invSpace.test(evt.target.value)) {\n                        DateRatingErr = false;\n                    } else {\n                        DateRatingErr = true;\n                    }\n                    return { ...Package, DateBound2: evt.target.value, DateRatingError: DateRatingErr };\n                }\n            } else {\n                return { ...Package };\n            }\n        });\n        this.setState({ DateOperations: NewTextDetails }, function () {\n        });\n    }\n\n    export = () => {\n        this.dt.exportCSV();\n    }\n\n    toggleEdit = () => {\n        this.setState({ toogleEditModal: false, textOperations: [], IsRateable: false, NumberOperations: [], ListValue: [], DateOperations: [], isEnable: false, historyDates: '', historyDatesArr: [] });\n    }\n\n    updateQuestion = () => {\n        let data = {\n            ResponseTypeName: this.state.tempData.ResponseTypeName,\n            IsRateable: this.state.IsRateable,\n            ResponseWeightTypeName: this.state.ResponseWeightTypeName,\n            RiskQuestionId: this.state.RiskQuestionId,\n            effectiveDate: this.state.effectiveDate,\n            loggedInUserId: CommonConfig.loggedInUserId()\n        };\n        if (this.state.tempData.ResponseTypeName === \"Text\") {\n            if (this.state.IsRateable) {\n                data.textOperations = this.state.textOperations;\n            } else {\n                data.textOperations = '';\n            }\n        } else if (this.state.tempData.ResponseTypeName === \"Number\" || this.state.tempData.ResponseTypeName === \"Percentage\" || this.state.tempData.ResponseTypeName === \"Amount\") {\n            if (this.state.IsRateable) {\n                data.NumberOperations = this.state.NumberOperations;\n            } else {\n                data.NumberOperations = '';\n            }\n        } else if (this.state.tempData.ResponseTypeName === \"Date\" || this.state.tempData.ResponseTypeName === \"Year\") {\n            if (this.state.IsRateable) {\n                data.DateOperations = this.state.DateOperations;\n            } else {\n                data.DateOperations = '';\n            }\n        } else if (this.state.tempData.ResponseTypeName === \"ListOfValues\" || this.state.tempData.ResponseTypeName === \"YesNo\") {\n            if (this.state.IsRateable) {\n                data.ListValue = this.state.ListValue;\n            } else {\n                data.ListValue = '';\n            }\n        }\n        console.log(\"IsOnlyOneOperator\", data);\n\n        api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\n            console.log(\"UpdateRiskQuestionWeightage\", res);\n            if (res.success) {\n                console.log(\"UpdateRiskQuestionWeightage\", res.data);\n                toast.success(res.data.message);\n                this.toggleEdit('save');\n                this.getRiskQuestion();\n                // setTimeout(function () {\n                //     window.location.reload();\n                // }, 1000);\n            }\n        }).catch(err => {\n        });\n    }\n\n    getTimelineDetails() {\n        var formattedData = [];\n        let firstPage = (formattedData.length) ? '1' : '0';\n        let lastPage = (this.state.rowsPerPage < formattedData.length) ? this.state.rowsPerPage : formattedData.length;\n        let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n    }\n\n    actionTemplate(rowData, column) {\n        return <div>\n            {/* <Button type=\"button\" icon=\"pi pi-pencil\" className=\"p-button-warning\" tooltip=\"Edit\" onClick={() => this.OpenModal(rowData)} tooltipOptions={{ position: 'bottom' }}></Button> */}\n            <Button type=\"button\" icon=\"pi pi-clock\" className=\"p-button-primary\" tooltip=\"Show History\" onClick={() => this.goToHistoryPage(rowData)} tooltipOptions={{ position: 'bottom' }} style={{ marginLeft: 10 }}></Button>\n            {/* <Button color=\"warning\" style={{ marginRight: '.5em' }}  title=\"Edit\"><i className=\"pi pi-pencil\"></i></Button> */}\n        </div>;\n    }\n\n    goToHistoryPage = (data) => {\n        var Id = data.RiskQuestionId;\n        this.props.history.push({\n            pathname: '/Master/RiskQuestionHistory/' + Id,\n            state: {\n                Id: Id,\n            }\n        });\n    }\n\n    getPageString = (e) => {\n        let firstPage = e.first + 1;\n        let l = e.rows * (e.page + 1);\n        let lastPage = (l < this.state.RiskQuestionList.length) ? l : this.state.RiskQuestionList.length\n        var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.RiskQuestionList.length + ' records';\n        this.setState({ selectedPage: e.first, str: str, rowsPerPage: e.rows });\n    }\n\n    checked = (isChecked, value) => {\n        console.log(\"checked\", isChecked);\n        this.setState({ IsRateable: isChecked });\n    }\n\n    selectType(value, type) {\n        console.log(\"selectType\", value, type);\n\n        if (type === 'vesselClass') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ vesselClassError: true, vesselClass: value });\n                this.show(\"vesselClass\", true, \"vesselClassError\", \"Please select Vessel Class Name\");\n            } else {\n                this.setState({ vesselClassError: false, vesselClass: value });\n                this.show(\"vesselClass\", false, \"vesselClassError\", \"\");\n            }\n        }\n\n        if (type === 'ResponseWeightTypeName') {\n            if (value === '' || value === null || value === undefined) {\n                this.setState({ ResponseWeightTypeNameError: true, ResponseWeightTypeName: value });\n                this.show(\"ResponseWeightTypeName\", true, \"ResponseWeightTypeNameError\", \"Select valid type\");\n            } else {\n                const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n                    return { ...Package, NumberRating: 0.00 };\n                });\n                const NewTextDetailsForDate = this.state.DateOperations.map((Package, index) => {\n                    return { ...Package, DateRating: 0.00 };\n                });\n                const NewTextDetailsForList = this.state.ListValue.map((Package, index) => {\n                    return { ...Package, Rating: 0.00 };\n                });\n                this.setState({ NumberOperations: NewTextDetails, DateOperations: NewTextDetailsForDate, ListValue: NewTextDetailsForList })\n                this.setState({ ResponseWeightTypeNameError: false, ResponseWeightTypeName: value });\n                this.show(\"ResponseWeightTypeName\", false, \"ResponseWeightTypeNameError\", \"Select valid type\");\n            }\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n\n        if (e.target.name === 'effectiveDate') {\n            if (e.target.value === '' || e.target.value === null) {\n                this.setState({ effectiveDateError: true });\n                this.show(\"effectiveDate\", true, \"effectiveDateError\", \"Enter valid effective date\");\n            } else {\n                this.setState({ effectiveDateError: false, effectiveDate: e.target.value });\n                this.show(\"effectiveDate\", false, \"effectiveDateError\", \"\");\n            }\n        }\n    }\n\n    show(field, condition, errorField, message) {\n        console.log(\"(field, condition, errorField, message)\", field, condition, errorField, message);\n        if (condition) {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control is-invalid\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n        } else {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = null;\n        }\n    }\n\n    editZone(task) {\n        if (task == \"view\") {\n            this.setState({ isEnable: false });\n            // window.location.reload();\n        } else {\n            this.setState({ isEnable: true });\n        }\n    }\n\n    render() {\n        let columns = this.state.cols.map((col, i) => {\n            return <Column field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode=\"contains\" />;\n        });\n        return (\n            <div>\n                <div className=\"basic-header\">\n                    <h1>Risk Question List</h1>\n                </div>\n\n\n                <div className=\"basic-header\">\n                    <div></div>\n                    <div className=\"header-right-option\">\n                        <div style={{ textAlign: 'right' }}>\n                            <i className=\"pi pi-search\" style={{ margin: '4px 4px 0 0' }}></i>\n                            <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" size=\"30\" style={{ marginRight: 10 }} />\n                        </div>\n                        <MultiSelect value={this.state.cols} options={this.colOptions}\n                            fixedPlaceholder={true} placeholder={CommonConfig.dataTableConfig.columnToggleIcon} tooltip=\"Show / Hide Column\"\n                            onChange={this.onColumnToggle} style={{ width: '50px' }}\n                        />\n                        <Button type=\"button\" icon=\"pi pi-external-link\" tooltip=\"Export As CSV\" tooltipOptions={{ position: 'bottom' }} onClick={this.export} style={{ marginRight: 10 }}></Button>\n                    </div>\n                </div>\n\n                <div className=\"table-custom\">\n                    <DataTable\n                        ref={(el) => this.dt = el}\n                        value={this.state.RiskQuestionList}\n                        first={this.state.selectedPage}\n                        onPage={(e) => this.getPageString(e)}\n                        paginator={true}\n                        rows={this.state.rowsPerPage}\n                        totalRecords={this.state.RiskQuestionList.length}\n                        exportFilename=\"Risk Question List\"\n                        currentPageReportTemplate={this.state.str}\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                        rowsPerPageOptions={this.state.rowsPerPageOptions}\n                        globalFilter={this.state.globalFilter}\n                        emptyMessage=\"No records found\"\n                        responsive={true}\n                        resizableColumns={true}\n                        columnResizeMode=\"fit\"\n                        scrollable={true}\n                        scrollHeight=\"265px\">\n                        {columns}\n                    </DataTable>\n\n                </div>\n\n                <Modal isOpen={this.state.toogleEditModal} toggle={() => this.toggleEdit('save')}\n                    className={'modal-lg ' + this.props.className}>\n                    <ModalHeader toggle={() => this.toggleEdit('save')}>Risk Question</ModalHeader>\n\n                    <ModalBody>\n                        <Row>\n                            <Col md=\"4\">\n                                <b>Question Category:</b> {this.state.tempData.QuestionCategoryName}\n                            </Col>\n                            <Col md=\"4\">\n                                <b>Question Group:</b> {this.state.tempData.QuestionGroupName}\n                            </Col>\n                            <Col md=\"4\">\n                                <b>Question Code:</b> {this.state.tempData.QuestionCode}\n                            </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col>\n                                <span style={{ fontSize: 20 }}><b>Question:</b> {this.state.tempData.RiskQuestion}</span>\n                            </Col>\n                        </Row>\n                        <Row style={{ marginTop: 10 }}>\n                            <Col>\n                                <b>Response Type:</b> {this.state.tempData.ResponseTypeName}\n                            </Col>\n                        </Row>\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"2\">\n                                <b>Is Rateable?</b>\n                            </Col>\n                            <Col>\n                                <Input type='checkbox' name='IsRateable' value='IsRateable' id='IsRateable' checked={(this.state.IsRateable)}\n                                    onClick={(e) => this.checked(e.target.checked)} />\n                            </Col>\n                        </Row>\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"1\">\n                                <b>Type</b>\n                            </Col>\n                            <Col md=\"2\">\n                                <div className=\"input-box\">\n                                    <Input type=\"select\" name=\"ResponseWeightTypeName\" id=\"ResponseWeightTypeName\" onChange={(e) => this.selectType(e.target.value, 'ResponseWeightTypeName')} value={this.state.ResponseWeightTypeName}>\n                                        <option value=''>Select Rating Type</option>\n                                        {this.state.systemEndorsementArr.map((type, i) => {\n                                            return (<option value={type.StringMapName}>{type.StringMapName}</option>)\n                                        })\n                                        }\n                                    </Input>\n                                    <em id=\"ResponseWeightTypeNameError\" className=\"error invalid-feedback\"></em>\n                                    {/* <em className=\"error invalid-feedback\" >Please enter mooring registration no</em> */}\n                                </div>\n                            </Col>\n                            <Col md=\"2\">\n                                <label>{this.state.effectivedate}</label>\n                            </Col>\n                            <Col md=\"3\">\n                                <Input type=\"date\" name=\"effectiveDate\" id=\"effectiveDate\" onChange={(e) => this.handleChange(e)} value={this.state.effectiveDate}\n                                    min={moment().format('YYYY-MM-DD')}\n                                    max={moment().add(100, 'years').format('YYYY-MM-DD')}\n                                >\n                                </Input>\n                                <em id=\"effectiveDateError\" className=\"error invalid-feedback\"></em>\n                            </Col>\n                        </Row>\n                        <div>\n                            {(this.state.tempData.ResponseTypeName === \"ListOfValues\") ?   /*<~~~~~~~~~~~LIST~~~~~~~~~~>*/\n                                <div>\n                                    <Row>\n                                        <Col md=\"2\">\n                                            <b>{this.state.ResponseWeightTypeName}</b>\n                                        </Col>\n                                        <Col md=\"3\">\n                                            <b>Response</b>\n                                        </Col>\n                                    </Row>\n                                    {this.state.ListValue.map((value, index) => {\n                                        return (\n                                            <Row>\n                                                <Col md=\"2\">\n                                                    {(this.state.IsRateable) ?\n                                                        <div>\n                                                            <Input type=\"text\" name=\"Rating\" id=\"Rating\" value={value.Rating} onChange={this.ListValueValidate('Rating', index)}></Input>\n                                                            {(value.RatingError) ?\n                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                : (null)}\n                                                        </div>\n                                                        : (null)}\n                                                </Col>\n                                                <Col md=\"10\">\n                                                    <b>{value.Response}</b>\n                                                </Col>\n                                            </Row>\n                                        )\n                                    }\n                                    )}\n                                </div>\n\n                                : (this.state.tempData.ResponseTypeName === \"YesNo\") ?   /*<~~~~~~~~~~~YESNO~~~~~~~~~~>*/\n                                    <div>\n                                        <Row>\n                                            <Col md=\"2\">\n                                                <b>{this.state.ResponseWeightTypeName}</b>\n                                            </Col>\n                                            <Col md=\"3\">\n                                                <b>Response</b>\n                                            </Col>\n                                        </Row>\n                                        {this.state.ListValue.map((value, index) => {\n                                            return (\n                                                <Row>\n                                                    <Col md=\"2\">\n                                                        {(this.state.IsRateable) ?\n                                                            <div>\n                                                                <Input type=\"text\" name=\"Rating\" id=\"Rating\" value={value.Rating} onChange={this.ListValueValidate('Rating', index)}></Input>\n                                                                {(value.RatingError) ?\n                                                                    <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                    : (null)}\n                                                            </div>\n                                                            : (null)}\n                                                    </Col>\n                                                    <Col md=\"3\">\n                                                        <b>{value.Response}</b>\n                                                    </Col>\n                                                </Row>\n                                            )\n                                        }\n                                        )}\n                                    </div>\n\n                                    : (this.state.tempData.ResponseTypeName === \"Number\" || this.state.tempData.ResponseTypeName === \"Percentage\" || this.state.tempData.ResponseTypeName === \"Amount\") ?   /*<~~~~~~~~~~~NUMBER~~~~~~~~~~>*/\n                                        <div>\n                                            <Row>\n                                                <Col md=\"2\">\n                                                    <b>{this.state.ResponseWeightTypeName}</b>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <b>Operator 1</b>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <b>Bound 1</b>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <b>Operator 2</b>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <b>Bound 2</b>\n                                                </Col>\n\n                                            </Row>\n                                            <div>\n                                                {this.state.NumberOperations.map((value, index) => {\n                                                    return (\n                                                        <div>\n                                                            {(value.isDeleted == true) ? (null) : (\n                                                                <Row>\n                                                                    <Col md=\"2\">\n                                                                        {(this.state.IsRateable) ?\n                                                                            <div className=\"input-box\">\n                                                                                <Row>\n                                                                                    <Col>\n                                                                                        <Input type=\"text\" name=\"NumberRating\" value={value.NumberRating} id=\"NumberRating\" onChange={this.NumberInputValidate('NumberRating', index)} />\n                                                                                        {(value.NumberRatingError) ?\n                                                                                            <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                                            : (null)}\n                                                                                    </Col>\n                                                                                </Row>\n                                                                            </div>\n                                                                            : (null)}\n                                                                    </Col>\n                                                                    <Col md=\"2\">\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"select\" name=\"NumberOperator1\" onChange={this.NumberInputValidate('NumberOperator1', index)} value={value.NumberOperator1}>\n                                                                                <option value=''>Select Rating Type</option>\n                                                                                {this.state.NumberOperator1Arr.map((type, i) => {\n                                                                                    return (<option value={type.StringMapName}>{type.StringMapName}</option>)\n                                                                                })\n                                                                                }\n                                                                            </Input>\n                                                                        </div>\n                                                                    </Col>\n                                                                    <Col md=\"2\">\n                                                                        {(value.IsAllOtherOperator) ?\n                                                                            <div className=\"input-box\">\n                                                                                <Input type=\"text\" name=\"NumberBound1\" value={value.NumberBound1} onChange={this.NumberInputValidate('NumberBound1', index)}></Input>\n                                                                            </div>\n                                                                            : (null)}\n                                                                    </Col>\n                                                                    <Col md=\"2\">\n                                                                        {/* {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ? */}\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"select\" name=\"NumberOperator2\" onChange={this.NumberInputValidate('NumberOperator2', index)} value={value.NumberOperator2}>\n                                                                                <option value=''>Select Rating Type</option>\n                                                                                {this.state.NumberOperator2Arr.map((type, i) => {\n                                                                                    return (<option value={type.value}>{type.label}</option>)\n                                                                                })\n                                                                                }\n                                                                            </Input>\n                                                                        </div>\n                                                                        {/* : (null)} */}\n                                                                    </Col>\n                                                                    <Col md=\"2\">\n                                                                        {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ?\n                                                                            <div className=\"input-box\">\n                                                                                <Input type=\"text\" name=\"NumberBound2\" value={value.NumberBound2} onChange={this.NumberInputValidate('NumberBound2', index)}></Input>\n                                                                            </div>\n                                                                            : (null)}\n                                                                    </Col>\n                                                                    {(value.IsAllOtherOperator) ?\n                                                                        <Col>\n                                                                            <a onClick={() => this.addRowToArray('Number')}>Add Row</a>\n                                                                            {(index !== 0) ?\n                                                                                <a onClick={() => this.removeRowToNumberArray(value, index)}>  Remove</a> : null\n                                                                            }\n                                                                        </Col>\n                                                                        : (null)}\n                                                                </Row>\n                                                            )}\n                                                        </div>\n                                                    )\n                                                })}\n                                            </div>\n                                        </div>\n\n                                        : (this.state.tempData.ResponseTypeName === \"Date\" || this.state.tempData.ResponseTypeName === \"Year\") ?   /*<~~~~~~~~~~~DATE~~~~~~~~~~>*/\n                                            <div>\n                                                <Row>\n                                                    <Col md=\"2\">\n                                                        <b>{this.state.ResponseWeightTypeName}</b>\n                                                    </Col>\n                                                    <Col md=\"2\">\n                                                        <b>Operator 1</b>\n                                                    </Col>\n                                                    <Col md=\"2\">\n                                                        <b>Bound 1</b>\n                                                    </Col>\n                                                    <Col md=\"2\">\n                                                        <b>Operator 2</b>\n                                                    </Col>\n                                                    <Col md=\"2\">\n                                                        <b>Bound 2</b>\n                                                    </Col>\n                                                </Row>\n                                                <div>\n                                                    {this.state.DateOperations.map((value, index) => {\n                                                        return (\n                                                            <Row>\n                                                                <Col md=\"2\">\n                                                                    {(this.state.IsRateable) ?\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"text\" name=\"DateRating\" id=\"DateRating\"\n                                                                                value={value.DateRating}\n                                                                                onChange={this.DateInputValidate('DateRating', index)} />\n                                                                            {(value.DateRatingError) ?\n                                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                                : (null)}\n                                                                        </div>\n                                                                        : (null)}\n                                                                </Col>\n                                                                <Col md=\"2\">\n                                                                    <div className=\"input-box\">\n                                                                        <Input type=\"select\" name=\"DateOperator1\" onChange={this.DateInputValidate('DateOperator1', index)} value={value.DateOperator1}>\n                                                                            <option value=''>Select Rating Type</option>\n                                                                            {this.state.DateOperator1Arr.map((type, i) => {\n                                                                                return (<option value={type.value}>{type.label}</option>)\n                                                                            })\n                                                                            }\n                                                                        </Input>\n                                                                    </div>\n                                                                </Col>\n\n                                                                <Col md=\"2\">\n                                                                    {(value.IsAllOtherOperator) ?\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"text\" name=\"DateBound1\" value={value.DateBound1} onChange={this.DateInputValidate('DateBound1', index)}></Input>\n                                                                        </div>\n                                                                        : (null)}\n                                                                </Col>\n\n\n                                                                <Col md=\"2\">\n                                                                    {/* {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ? */}\n                                                                    <div className=\"input-box\">\n                                                                        <Input type=\"select\" name=\"DateOperator2\" onChange={this.DateInputValidate('DateOperator2', index)} value={value.DateOperator2}>\n                                                                            <option value=''>Select Rating Type</option>\n                                                                            {this.state.DateOperator2Arr.map((type, i) => {\n                                                                                return (<option value={type.value}>{type.label}</option>)\n                                                                            })\n                                                                            }\n                                                                        </Input>\n                                                                    </div>\n                                                                    {/* : (null)} */}\n                                                                </Col>\n\n\n                                                                <Col md=\"2\">\n                                                                    {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ?\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"text\" name=\"DateBound2\" value={value.DateBound2} onChange={this.DateInputValidate('DateBound2', index)}></Input>\n                                                                        </div>\n                                                                        : (null)}\n                                                                </Col>\n                                                                {(value.IsAllOtherOperator) ?\n                                                                    <Col>\n                                                                        <a onClick={() => this.addRowToArray('Date')}>Add Row</a>\n                                                                        {(index !== 0) ?\n                                                                            <a onClick={() => this.removeRowToDateArray(value, index)}>  Remove</a> : null\n                                                                        }\n                                                                    </Col>\n                                                                    : (null)}\n                                                            </Row>\n                                                        )\n                                                    })}\n                                                </div>\n                                            </div>\n\n                                            : (this.state.tempData.ResponseTypeName === \"Text\") ?   /*<~~~~~~~~~~~TEXT~~~~~~~~~~>*/\n                                                <div>\n                                                    <Row>\n                                                        <Col md=\"2\">\n                                                            <b>{this.state.ResponseWeightTypeName}</b>\n                                                        </Col>\n                                                        <Col md=\"3\">\n                                                            <b>Operator</b>\n                                                        </Col>\n                                                        <Col md=\"3\">\n                                                            <b>Text for Comparison</b>\n                                                        </Col>\n                                                    </Row>\n                                                    <div>\n                                                        {this.state.textOperations.map((value, index) => {\n                                                            return (\n                                                                <Row>\n                                                                    <Col md=\"2\">\n                                                                        {(this.state.IsRateable) ?\n                                                                            <div className=\"input-box\">\n                                                                                <Input type=\"text\" name=\"TextRating\" id=\"TextRating\" value={value.TextRating} onChange={this.InputValidate('TextRating', index)} />\n                                                                                {(value.TextRatingError) ?\n                                                                                    <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                                    : (null)}\n                                                                            </div>\n                                                                            : (null)}\n                                                                    </Col>\n                                                                    <Col md=\"3\">\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"select\" name=\"systemEndorsementText\" onChange={this.InputValidate('TextOperator', index)} value={value.TextOperator}>\n                                                                                <option value=''>Select Rating Type</option>\n                                                                                {this.state.systemEndorsementTextArr.map((type, i) => {\n                                                                                    return (<option value={type.value}>{type.label}</option>)\n                                                                                })\n                                                                                }\n                                                                            </Input>\n                                                                        </div>\n                                                                    </Col>\n                                                                    <Col md=\"3\">\n                                                                        <div className=\"input-box\">\n                                                                            <Input type=\"text\" name=\"TextToCompare\" id=\"TextToCompare\" value={value.TextToCompare} onChange={this.InputValidate('TextToCompare', index)} />\n                                                                            {(value.TextToCompareError) ?\n                                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\n                                                                                : (null)}\n                                                                        </div>\n                                                                    </Col>\n                                                                    <Col>\n                                                                        <a onClick={() => this.addRowToArray('Text')}>Add Row</a>\n                                                                        {(index !== 0) ?\n                                                                            <a onClick={() => this.removeRowToArray(value, index)}>  Remove</a> : null\n                                                                        }\n                                                                    </Col>\n                                                                </Row>\n                                                            )\n                                                        })}\n                                                    </div>\n                                                </div>\n                                                : (null)\n                            }\n                        </div>\n                    </ModalBody>\n                    <ModalFooter>\n                        <BTN color=\"success\" onClick={() => this.updateQuestion()}><i class=\"fa fa-check\"></i> Update</BTN>{' '}\n                        <BTN color=\"primary\" onClick={() => this.toggleEdit('save')}><i class=\"fa fa-close\"></i> Cancel</BTN>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default RiskQuestionList;"]},"metadata":{},"sourceType":"module"}