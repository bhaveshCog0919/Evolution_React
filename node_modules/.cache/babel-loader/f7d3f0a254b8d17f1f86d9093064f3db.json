{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/RiskQuestion/RiskQuestionHistory.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport { toast } from 'react-toastify';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, Button as BTN } from 'reactstrap';\nimport api from '../../../utils/apiClient';\nimport APIConstant from '../../../utils/constants';\nimport { CommonConfig } from '../../../utils/constants';\nimport moment from 'moment';\nimport { render } from 'react-dom';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nclass RiskQuestionHistory extends Component {\n  constructor() {\n    super();\n\n    this.deleteHistoryRecord = row => {\n      this.setState({\n        isDelet: true,\n        newVar: row\n      });\n    };\n\n    this.viewHistoryRecord = row => {\n      this.setState({\n        isView: true,\n        isEdit: true,\n        tempData: row,\n        IsRateable: row.IsRateable === 'Yes' ? true : false,\n        ResponseWeightTypeName: row.ResponseWeightTypeName,\n        textOperations: [],\n        NumberOperations: [],\n        DateOperations: [],\n        effectiveDate: moment(row.StartDate, 'DD-MM-YYYY').format('YYYY-MM-DD'),\n        ResponseWeightType: row.ResponseWeightType,\n        RiskQuestionHistoryId: row.RiskQuestionHistoryId\n      });\n      this.handleOnExpand(row);\n    };\n\n    this.updateHistoryRecord = row => {\n      this.setState({\n        isEdit: true,\n        tempData: row,\n        IsRateable: row.IsRateable === 'Yes' ? true : false,\n        ResponseWeightTypeName: row.ResponseWeightTypeName,\n        textOperations: [],\n        NumberOperations: [],\n        DateOperations: [],\n        effectiveDate: moment(row.StartDate, 'DD-MM-YYYY').format(\"YYYY-MM-DD\") > moment().format(\"YYYY-MM-DD\") ? moment(row.StartDate, 'DD-MM-YYYY').format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n        ResponseWeightType: row.ResponseWeightType,\n        RiskQuestionHistoryId: row.RiskQuestionHistoryId\n      });\n      this.handleOnExpand(row);\n      console.log(\"rowEventssssssssss\", row);\n    };\n\n    this.handleOnExpand = (row, isExpand, rowIndex, e) => {\n      console.log(\"handleOnExpandddd55\", row);\n\n      try {\n        var dataToSend = {\n          RiskQuestionId: this.props.match.params.Id,\n          RiskQuestionHistoryId: row.RiskQuestionHistoryId\n        };\n        console.log(\"handleOnExpandddd3\", dataToSend);\n        api.post('api/getResponseByHistoryDates', dataToSend).then(res => {\n          if (res.success) {\n            console.log(\"handleOnExpandddd321\", res.data);\n\n            if (!res.data.length) {\n              if (this.state.ResponseWeightTypeName === \"Number\" || this.state.ResponseWeightTypeName === \"Percentage\" || this.state.ResponseWeightTypeName === \"Amount\") {\n                this.setState({\n                  NumberOperations: [this.state.NumberArr]\n                });\n              } else if (this.state.ResponseWeightTypeName === \"Text\") {\n                this.setState({\n                  textOperations: [this.state.TextArr]\n                });\n              } else if (this.state.ResponseWeightTypeName === \"Date\" || this.state.ResponseWeightTypeName === \"Year\") {\n                this.setState({\n                  DateOperations: [this.state.DateArr]\n                });\n              }\n            } else {\n              var formattedData = [];\n              var NumberOperations = [];\n              var textOperations = [];\n              var DateOperations = [];\n              let i;\n\n              for (i = 0; i < res.data.length; i++) {\n                var temppDataForNumber = {\n                  id: 1,\n                  NumberRating: '',\n                  NumberOperator1: '',\n                  NumberOperator1Arr: [],\n                  NumberBound1: '',\n                  NumberOperator2: '',\n                  NumberOperator2Arr: [],\n                  NumberBound2: '',\n                  IsOnlyOneOperator: true,\n                  IsAllOtherOperator: true,\n                  DateRatingError: false,\n                  isDeleted: false\n                };\n                var temppDataForText = {\n                  id: 1,\n                  TextRating: '',\n                  TextOperator: '',\n                  TextToCompare: '',\n                  isDeleted: false\n                };\n                var temppDataForDate = {\n                  id: 1,\n                  DateRating: '',\n                  DateOperator1: '',\n                  DateOperator1Arr: [],\n                  DateBound1: '',\n                  DateOperator2: '',\n                  DateOperator2Arr: [],\n                  DateBound2: '',\n                  IsOnlyOneOperator: true,\n                  IsAllOtherOperator: true,\n                  NumberRatingError: false,\n                  isDeleted: false\n                };\n                formattedData.push({\n                  Response: CommonConfig.isEmpty(res.data[i].ResponseStringMapKey) ? '' : res.data[i].ResponseStringMapKey.trim(),\n                  Rating: CommonConfig.isEmpty(res.data[i].Rating) ? CommonConfig.isEmpty(res.data[i].AbsoluteAmount) ? 0 : res.data[i].AbsoluteAmount : res.data[i].Rating,\n                  RiskQuestionResponseWeightageHistoryId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId,\n                  RiskQuestionResponseWeightageId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId\n                });\n                temppDataForNumber.id = i + 1;\n                temppDataForNumber.NumberRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                temppDataForNumber.NumberOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                temppDataForNumber.NumberBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n                temppDataForNumber.NumberOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? '' : res.data[i].Operator2;\n\n                if (temppDataForNumber.NumberOperator2 === \"One Operator Only\") {\n                  temppDataForNumber.IsOnlyOneOperator = false;\n                } else {\n                  temppDataForNumber.IsOnlyOneOperator = true;\n                }\n\n                temppDataForNumber.NumberBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                temppDataForNumber.RiskQuestionResponseWeightageHistoryId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId;\n                temppDataForNumber.isDeleted = false;\n                temppDataForNumber.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId; // temppDataForNumber.IsOnlyOneOperator= true;\n\n                temppDataForText.TextRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                temppDataForText.TextOperator = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\n                temppDataForText.TextToCompare = CommonConfig.isEmpty(res.data[i].Bound1) ? '' : res.data[i].Bound1;\n                temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                temppDataForText.isDeleted = false;\n                temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\n                temppDataForDate.id = i + 1;\n                temppDataForDate.DateRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\n                temppDataForDate.DateOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? 0.00 : res.data[i].Operator1;\n                temppDataForDate.DateBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\n                temppDataForDate.DateOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? 0.00 : res.data[i].Operator2;\n\n                if (temppDataForDate.NumberOperator2 === \"One Operator Only\") {\n                  temppDataForDate.IsOnlyOneOperator = false;\n                } else {\n                  temppDataForDate.IsOnlyOneOperator = true;\n                }\n\n                temppDataForDate.DateBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\n                temppDataForDate.RiskQuestionResponseWeightageHistoryId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId;\n                temppDataForDate.isDeleted = false;\n                temppDataForDate.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId; // temppDataForDate.IsOnlyOneOperator= true;\n\n                NumberOperations.push(temppDataForNumber);\n                textOperations.push(temppDataForText);\n                DateOperations.push(temppDataForDate);\n              }\n\n              this.setState({\n                NumberOperations: NumberOperations\n              });\n              this.setState({\n                textOperations: textOperations\n              });\n              this.setState({\n                DateOperations: DateOperations\n              });\n              this.setState({\n                ListValue: formattedData\n              });\n            }\n          }\n        });\n      } catch (error) {\n        console.log(\"handleOnExpandErr\", error);\n      }\n    };\n\n    this.updateQuestion = () => {\n      var isAdd = this.state.isAdd;\n      var isEdit = this.state.isEdit;\n      let resultsData = this.state.products.filter(x => x.StartDate === moment(this.state.effectiveDate).format('DD-MM-YYYY'));\n      console.log(\"updateQuestion\", resultsData);\n\n      if (!this.state.effectiveDateError) {\n        if (resultsData.length) {\n          isAdd = false;\n          isEdit = true;\n          this.setState({\n            RiskQuestionHistoryId: resultsData[0].RiskQuestionHistoryId\n          });\n          this.upDateModel();\n        } else {\n          isAdd = true;\n          isEdit = false;\n          let data = {\n            RiskQuestionHistoryId: this.state.RiskQuestionHistoryId,\n            ResponseTypeName: this.state.ResponseWeightType,\n            IsRateable: this.state.IsRateable,\n            ResponseWeightTypeName: this.state.ResponseWeightTypeName,\n            RiskQuestionId: this.props.match.params.Id,\n            effectiveDate: this.state.effectiveDate,\n            loggedInUserId: CommonConfig.loggedInUserId(),\n            IsAdd: isAdd,\n            IsEdit: isEdit\n          };\n\n          if (this.state.tempData.ResponseWeightTypeName === \"Text\") {\n            if (this.state.IsRateable) {\n              data.textOperations = this.state.textOperations;\n            } else {\n              data.textOperations = '';\n            }\n          } else if (this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\") {\n            if (this.state.IsRateable) {\n              data.NumberOperations = this.state.NumberOperations;\n            } else {\n              data.NumberOperations = '';\n            }\n          } else if (this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\") {\n            if (this.state.IsRateable) {\n              data.DateOperations = this.state.DateOperations;\n            } else {\n              data.DateOperations = '';\n            }\n          } else if (this.state.tempData.ResponseWeightTypeName === \"ListOfValues\" || this.state.tempData.ResponseWeightTypeName === \"YesNo\") {\n            if (this.state.IsRateable) {\n              data.ListValue = this.state.ListValue;\n            } else {\n              data.ListValue = '';\n            }\n          }\n\n          console.log(\"IsOnlyOneOperator\", data);\n          api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\n            console.log(\"UpdateRiskQuestionWeightage\", res);\n\n            if (res.success) {\n              console.log(\"UpdateRiskQuestionWeightage\", res.data);\n              toast.success(res.data.message);\n              this.toggleEdit('save'); // setTimeout(function () {\n              //     window.location.reload();\n              // }, 1000);   \n\n              this.getRiskQuestionHistory(this.props.match.params.Id);\n            }\n          }).catch(err => {});\n        }\n      } else {\n        if (this.state.effectiveDateError) {\n          toast.error(\"Please select valid Effective Date\");\n          return;\n        }\n      }\n    };\n\n    this.updateQuestionModal = () => {\n      let data = {\n        RiskQuestionHistoryId: this.state.RiskQuestionHistoryId,\n        ResponseTypeName: this.state.ResponseWeightType,\n        IsRateable: this.state.IsRateable,\n        ResponseWeightTypeName: this.state.ResponseWeightTypeName,\n        RiskQuestionId: this.props.match.params.Id,\n        effectiveDate: this.state.effectiveDate,\n        loggedInUserId: CommonConfig.loggedInUserId(),\n        IsEdit: 'true'\n      };\n\n      if (this.state.tempData.ResponseWeightTypeName === \"Text\") {\n        if (this.state.IsRateable) {\n          data.textOperations = this.state.textOperations;\n        } else {\n          data.textOperations = '';\n        }\n      } else if (this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\") {\n        if (this.state.IsRateable) {\n          data.NumberOperations = this.state.NumberOperations;\n        } else {\n          data.NumberOperations = '';\n        }\n      } else if (this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\") {\n        if (this.state.IsRateable) {\n          data.DateOperations = this.state.DateOperations;\n        } else {\n          data.DateOperations = '';\n        }\n      } else if (this.state.tempData.ResponseWeightTypeName === \"ListOfValues\" || this.state.tempData.ResponseWeightTypeName === \"YesNo\") {\n        if (this.state.IsRateable) {\n          data.ListValue = this.state.ListValue;\n        } else {\n          data.ListValue = '';\n        }\n      }\n\n      console.log(\"IsOnlyOneOperator\", data);\n      api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\n        console.log(\"UpdateRiskQuestionWeightage\", res);\n\n        if (res.success) {\n          console.log(\"UpdateRiskQuestionWeightage\", res.data);\n          toast.success(res.data.message);\n          this.toggleEditModel('save');\n          setTimeout(function () {\n            window.location.reload();\n          }, 1000);\n          this.getRiskQuestionHistory(this.props.match.params.Id);\n        }\n      }).catch(err => {});\n    };\n\n    this.deleteModal = newVar => {\n      console.log(\"deleteModal\", newVar);\n\n      try {\n        var dataToSend = {\n          IsDiscard: 'true',\n          RiskQuestionHistoryId: newVar.RiskQuestionHistoryId,\n          loggedInUserId: CommonConfig.loggedInUserId()\n        };\n        api.post('api/deleteRiskQuestion', dataToSend).then(res => {\n          console.log(\"deleteRiskQuestion\", res);\n\n          if (res.success) {\n            toast.success(res.message);\n            this.toggleEdit('save');\n            setTimeout(function () {\n              window.location.reload();\n            }, 800);\n            this.getRiskQuestionHistory(this.props.match.params.Id);\n          }\n        }).catch(err => {});\n      } catch (error) {\n        console.log(\"deleteModal\", error);\n      }\n    };\n\n    this.expandRow = {\n      onlyOneExpanding: true,\n      showExpandColumn: true,\n      expandByColumnOnly: true,\n      onExpand: this.handleOnExpand,\n      renderer: row => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 17\n        }\n      }, row.ResponseWeightTypeName === \"ListOfValues\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 37\n        }\n      }, \"Rating/Absolute Amount\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 37\n        }\n      }, \"Response\"))), this.state.ListValue.map((value, index) => {\n        return /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: \"3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 45\n          }\n        }, value.Rating)), /*#__PURE__*/React.createElement(Col, {\n          md: \"9\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 45\n          }\n        }, value.Response)));\n      })) : row.ResponseWeightTypeName === \"YesNo\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 41\n        }\n      }, \"Rating/Absolute Amount\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 41\n        }\n      }, \"Response\"))), this.state.ListValue.map((value, index) => {\n        return /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: \"3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 49\n          }\n        }, value.Rating)), /*#__PURE__*/React.createElement(Col, {\n          md: \"9\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 49\n          }\n        }, value.Response)));\n      })) : row.ResponseWeightTypeName === \"Number\" || row.ResponseWeightTypeName === \"Percentage\" || row.ResponseWeightTypeName === \"Amount\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 41\n        }\n      }, \"Rating/Absolute Amount\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 41\n        }\n      }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 41\n        }\n      }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 41\n        }\n      }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 41\n        }\n      }, \"Bound 2\"))), this.state.NumberOperations.map((value, index) => {\n        return /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 49\n          }\n        }, value.NumberRating)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 49\n          }\n        }, value.NumberOperator1)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 49\n          }\n        }, value.NumberBound1)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 49\n          }\n        }, value.NumberOperator2)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 49\n          }\n        }, value.NumberBound2)));\n      })) : row.ResponseWeightTypeName === \"Date\" || row.ResponseWeightTypeName === \"Year\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 41\n        }\n      }, \"Rating/Absolute Amount\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 41\n        }\n      }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 41\n        }\n      }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 41\n        }\n      }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 41\n        }\n      }, \"Bound 2\"))), this.state.DateOperations.map((value, index) => {\n        console.log(\"handleOnExpandddd123\", value);\n        return /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 49\n          }\n        }, value.DateRating)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 49\n          }\n        }, value.DateOperator1)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 49\n          }\n        }, value.DateBound1)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 49\n          }\n        }, value.DateOperator2)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 49\n          }\n        }, value.DateBound2)));\n      })) : row.ResponseWeightTypeName === \"Text\" ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 41\n        }\n      }, \"Rating/Absolute Amount\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 41\n        }\n      }, \"Operator\")), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 41\n        }\n      }, \"Text for Comparison\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 33\n        }\n      }, this.state.textOperations.map((value, index) => {\n        console.log(\"handleOnExpandddd123\", value);\n        return /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 53\n          }\n        }, value.TextRating)), /*#__PURE__*/React.createElement(Col, {\n          md: \"2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 53\n          }\n        }, value.TextOperator)), /*#__PURE__*/React.createElement(Col, {\n          md: \"3\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 53\n          }\n        }, value.TextToCompare)));\n      }))) : null))\n    };\n\n    this.toggleEdit = () => {\n      this.setState({\n        isEdit: false,\n        isView: false,\n        effectiveDate: moment().format('YYYY-MM-DD'),\n        effectiveDateError: false\n      });\n    };\n\n    this.toggleEditModel = () => {\n      this.setState({\n        isOpenForUpdate: false\n      });\n    };\n\n    this.toggleDelete = () => {\n      this.setState({\n        isDelet: false\n      });\n    };\n\n    this.InputValidate = (name, PIndex) => evt => {\n      console.log(\"InputValidate\", name, PIndex, this.state.ResponseWeightTypeName);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.textOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"TextRating\") {\n            let invSpace, TextRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = CommonConfig.RegExp.percentageWithNegative;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = CommonConfig.RegExp.decimalWithNegative;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              TextRatingErr = false;\n            } else {\n              TextRatingErr = true;\n            }\n\n            return { ...Package,\n              TextRating: evt.target.value,\n              TextRatingError: TextRatingErr\n            };\n          } else if (name === \"TextOperator\") {\n            // let IsAllOtherOperatorValue;\n            // if (evt.target.value === \"All Others\") {\n            //     IsAllOtherOperatorValue = false;\n            // } else {\n            //     IsAllOtherOperatorValue = true;\n            // }\n            return { ...Package,\n              TextOperator: evt.target.value\n            };\n          } else if (name === \"TextToCompare\") {\n            let invSpace = CommonConfig.RegExp.nameWithoutSpace,\n                TextRatingErr; // if (this.state.ResponseWeightTypeName === \"Rating\") {\n            //     invSpace = CommonConfig.RegExp.allowAllWithSpace\n            // }\n\n            if (!invSpace.test(evt.target.value)) {\n              TextRatingErr = true;\n            }\n\n            return { ...Package,\n              TextToCompare: evt.target.value,\n              TextToCompareError: TextRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        textOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.NumberInputValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"NumberRating\") {\n            let invSpace, NumberRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = CommonConfig.RegExp.percentageWithNegative;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = CommonConfig.RegExp.decimalWithNegative;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              NumberRatingErr = false;\n            } else {\n              NumberRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberRating: evt.target.value,\n              NumberRatingError: NumberRatingErr\n            };\n          } else if (name === \"NumberOperator1\") {\n            let IsAllOtherOperatorValue;\n\n            if (evt.target.value === \"All Others\") {\n              IsAllOtherOperatorValue = false;\n            } else {\n              IsAllOtherOperatorValue = true;\n            }\n\n            return { ...Package,\n              NumberOperator1: evt.target.value,\n              IsAllOtherOperator: IsAllOtherOperatorValue\n            };\n          } else if (name === \"NumberBound1\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberBound1: evt.target.value,\n              NumberRatingError: DateRatingErr\n            };\n          } else if (name === \"NumberOperator2\") {\n            console.log(\"evt.target.value\", evt.target.value);\n            let IsOnlyOneOperatorValue;\n\n            if (evt.target.value === \"One Operator Only\") {\n              IsOnlyOneOperatorValue = false;\n            } else {\n              IsOnlyOneOperatorValue = true;\n            }\n\n            return { ...Package,\n              NumberOperator2: evt.target.value,\n              IsOnlyOneOperator: IsOnlyOneOperatorValue\n            };\n          } else if (name === \"NumberBound2\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              NumberBound2: evt.target.value,\n              NumberRatingError: DateRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        NumberOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.ListValueValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.ListValue.map((Package, index) => {\n        console.log(\"ListValueindex\", index, PIndex === index);\n\n        if (PIndex === index) {\n          if (name === \"Rating\") {\n            let invSpace, NumberRatingErr;\n\n            if (this.state.ResponseWeightType === \"Rating\") {\n              invSpace = CommonConfig.RegExp.percentageWithNegative;\n            } else if (this.state.ResponseWeightType === \"Absolute\") {\n              invSpace = CommonConfig.RegExp.decimalWithNegative;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              NumberRatingErr = false;\n            } else {\n              NumberRatingErr = true;\n            }\n\n            return { ...Package,\n              Rating: evt.target.value,\n              RatingError: NumberRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        ListValue: NewTextDetails\n      }, function () {});\n    };\n\n    this.DateInputValidate = (name, PIndex) => evt => {\n      console.log(name, PIndex);\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n      const NewTextDetails = this.state.DateOperations.map((Package, index) => {\n        if (PIndex === index) {\n          if (name === \"DateRating\") {\n            let invSpace, DateRatingErr;\n\n            if (this.state.ResponseWeightTypeName === \"Rating\") {\n              invSpace = CommonConfig.RegExp.percentageWithNegative;\n            } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\n              invSpace = CommonConfig.RegExp.decimalWithNegative;\n            }\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateRating: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          } else if (name === \"DateOperator1\") {\n            let IsAllOtherOperatorValue;\n\n            if (evt.target.value === \"All Others\") {\n              IsAllOtherOperatorValue = false;\n            } else {\n              IsAllOtherOperatorValue = true;\n            }\n\n            return { ...Package,\n              DateOperator1: evt.target.value,\n              IsAllOtherOperator: IsAllOtherOperatorValue\n            };\n          } else if (name === \"DateBound1\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateBound1: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          } else if (name === \"DateOperator2\") {\n            let IsOnlyOneOperatorValue;\n\n            if (evt.target.value === \"One Operator Only\") {\n              IsOnlyOneOperatorValue = false;\n            } else {\n              IsOnlyOneOperatorValue = true;\n            }\n\n            return { ...Package,\n              DateOperator2: evt.target.value,\n              IsOnlyOneOperator: IsOnlyOneOperatorValue\n            };\n          } else if (name === \"DateBound2\") {\n            let invSpace, DateRatingErr;\n            invSpace = CommonConfig.RegExp.number;\n\n            if (invSpace.test(evt.target.value)) {\n              DateRatingErr = false;\n            } else {\n              DateRatingErr = true;\n            }\n\n            return { ...Package,\n              DateBound2: evt.target.value,\n              DateRatingError: DateRatingErr\n            };\n          }\n        } else {\n          return { ...Package\n          };\n        }\n      });\n      this.setState({\n        DateOperations: NewTextDetails\n      }, function () {});\n    };\n\n    this.checked = (isChecked, value) => {\n      console.log(\"checked\", isChecked);\n      this.setState({\n        IsRateable: isChecked\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'effectiveDate') {\n        if (e.target.value === '' || e.target.value === null) {\n          this.setState({\n            effectiveDateError: true\n          });\n          this.show(\"effectiveDate\", true, \"effectiveDateError\", \"Enter valid effective date\");\n        } else if (moment(e.target.value).format('YYYY-MM-DD') < moment().format('YYYY-MM-DD')) {\n          this.setState({\n            effectiveDateError: true\n          });\n          this.show(\"effectiveDate\", true, \"effectiveDate\", \"Please enter valid effective date\");\n        } else {\n          this.setState({\n            effectiveDateError: false,\n            effectiveDate: e.target.value\n          });\n          this.show(\"effectiveDate\", false, \"effectiveDateError\", \"\");\n        }\n      }\n\n      if (e.target.name === 'fromDate') {\n        this.setState({\n          fromDate: e.target.value\n        });\n      }\n\n      if (e.target.name === 'ToDate') {\n        this.setState({\n          ToDate: e.target.value\n        });\n      }\n    };\n\n    const columns = [{\n      dataField: \"QuestionCode\",\n      text: \"Question Code\"\n    }, {\n      dataField: \"RiskQuestion\",\n      text: \"Question\"\n    }, {\n      dataField: \"QuestionGroup\",\n      text: \"Group\"\n    }, {\n      dataField: \"ResponseWeightTypeName\",\n      text: \"Rating Type\"\n    }, {\n      dataField: \"StartDate\",\n      text: \"Effective Date\"\n    }, {\n      dataField: \"Qualifier\",\n      text: \"Qualifier\"\n    }, {\n      dataField: \"isCurrent\",\n      text: \"Is Current\"\n    }, {\n      dataField: \"Action\",\n      text: \"Actions\",\n      formatter: this.actionFormatter,\n      OpenModal: this.updateHistoryRecord,\n      viewHistoryRecord: this.viewHistoryRecord,\n      deleteHistoryRecord: this.deleteHistoryRecord\n    }];\n    this.state = {\n      cols: columns,\n      forAction: false,\n      isAdd: false,\n      isDelet: false,\n      isOpenForUpdate: false,\n      products: [],\n      RiskQuestionHistoryList: [],\n      rowData: '',\n      VesselClassList: [],\n      VesselTypeList: [],\n      vesselClass: '',\n      VesselClassId: '',\n      vesselClassError: true,\n      VesselTypeId: '',\n      vesselType: '',\n      vesselTypeError: true,\n      selectedPage: 0,\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      str: '',\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      globalFilter: null,\n      toogleEditModal: false,\n      tempData: '',\n      IsRateable: false,\n      ResponseWeightTypeName: '',\n      ResponseWeightTypeNameError: true,\n      ResponseWeightType: '',\n      ResponseWeightTypeError: true,\n      textOperation: '',\n      textOperations: [],\n      TextArr: {\n        id: 1,\n        TextRating: '',\n        TextOperator: '',\n        TextToCompare: '',\n        TextToCompareError: false,\n        isDeleted: false\n      },\n      NumberOperations: [],\n      NumberArr: {\n        id: 1,\n        NumberRating: '',\n        NumberOperator1: '',\n        NumberOperator1Arr: [],\n        NumberBound1: '',\n        NumberOperator2: '',\n        NumberOperator2Arr: [],\n        NumberBound2: '',\n        IsOnlyOneOperator: false,\n        IsAllOtherOperator: true,\n        NumberRatingError: false,\n        isDeleted: false\n      },\n      DateOperations: [],\n      DateArr: {\n        id: 1,\n        DateRating: '',\n        DateOperator1: '',\n        DateOperator1Arr: [],\n        DateBound1: '',\n        DateOperator2: '',\n        DateOperator2Arr: [],\n        DateBound2: '',\n        IsOnlyOneOperator: false,\n        IsAllOtherOperator: true,\n        DateRatingError: false,\n        isDeleted: false\n      },\n      TextRatingError: true,\n      TextRating: '',\n      ListValue: [],\n      Rating: '',\n      RatingError: true,\n      listType: '',\n      systemEndorsementArr: [],\n      systemEndorsement: '',\n      systemEndorsementError: true,\n      systemEndorsementText: '',\n      systemEndorsementTextArr: [],\n      RiskQuestionId: '',\n      RiskQuestionResponseWeightageId: '',\n      ResponseType: '',\n      effectivedate: 'Effective Date',\n      effectiveDate: '',\n      effectiveDateError: true,\n      historyDatesArr: [],\n      historyDates: '',\n      fromDate: '',\n      ToDate: '',\n      diaplayDate: '',\n      diaplayDateArr: [],\n      isEnable: false,\n      isEdit: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.constructor === Object && Object.keys(this.props.match.params).length !== 0) {\n      this.getRiskQuestionHistory(this.props.match.params.Id);\n    }\n\n    this.getDropDownValues('RATINGTYPE', 'systemEndorsementArr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR', 'NumberOperator1Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR2', 'NumberOperator2Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR', 'DateOperator1Arr', 'SortOrder');\n    this.getDropDownValues('RATINGOPERATOR2', 'DateOperator2Arr', 'SortOrder');\n    this.getDropDownValues('TEXTOPERATOR', 'systemEndorsementTextArr', 'SortOrder');\n    this.getDropDownValues('DISPLAYMODE', 'diaplayDateArr', 'SortOrder');\n    this.setState({\n      effectiveDate: moment().format('YYYY-MM-DD'),\n      effectiveDateError: false\n    });\n  }\n\n  getDropDownValues(stringMapType, setStateName, orderBy) {\n    try {\n      const data = {\n        stringmaptype: stringMapType,\n        orderby: orderBy\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          console.log(\"getDropDownValues\", res.data);\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  getRiskQuestionHistory(Id) {\n    try {\n      var data = {\n        RiskQuestionId: Id,\n        fromDate: CommonConfig.isEmpty(this.state.fromDate) ? '' : this.state.fromDate,\n        ToDate: CommonConfig.isEmpty(this.state.ToDate) ? '' : this.state.ToDate,\n        diaplayDate: CommonConfig.isEmpty(this.state.diaplayDate) ? '' : this.state.diaplayDate\n      };\n      api.post('api/getHistoryDates', data).then(res => {\n        if (res.success) {\n          console.log(\"getRiskQuestionHistory\", res.data);\n          var newArr = [];\n\n          for (var i = 0; i < res.data[0].length; i++) {\n            newArr.push({\n              QuestionCode: res.data[0][i].QuestionCode,\n              RiskQuestion: res.data[0][i].RiskQuestion,\n              QuestionGroup: res.data[0][i].QuestionGroup,\n              ResponseWeightTypeName: res.data[0][i].ResponseType,\n              StartDate: moment(res.data[0][i].StartDate).format('DD-MM-YYYY'),\n              UpdatedOn: res.data[0][i].UpdatedOn,\n              IsRateable: res.data[0][i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\n              QuestionCategoryName: res.data[0][i].QuestionCategory,\n              ResponseWeightType: res.data[0][i].ResponseWeightType,\n              Qualifier: res.data[0][i].Qualifier,\n              isCurrent: res.data[0][i].IsCurrent,\n              forAction: res.data[0][i].ACTION === \"Edit\" ? true : false,\n              RiskQuestionHistoryId: res.data[0][i].RiskQuestionHistoryId\n            });\n            this.setState({\n              QuestionCode: res.data[0][i].QuestionCode\n            });\n          }\n\n          console.log(\"getRiskQuestionHistory\", newArr);\n          this.setState({\n            products: newArr\n          });\n        }\n      });\n    } catch (error) {\n      console.log(\"getRiskQuestionHistoryErr\", error);\n    }\n  }\n\n  actionFormatter(cell, rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 16\n      }\n    }, rowData.forAction ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-pencil\",\n      className: \"p-button-warning\",\n      tooltip: \"Edit\",\n      onClick: () => this.OpenModal(rowData),\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }), Date(moment(rowData.StartDate).format('YYYY-MM-DD')) >= moment().format('YYYY-MM-DD') ? /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: 10\n      },\n      type: \"button\",\n      icon: \"pi pi-trash\",\n      className: \"p-button-danger\",\n      tooltip: \"delete\",\n      onClick: () => this.deleteHistoryRecord(rowData),\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }\n    }) : null) : /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-eye\",\n      className: \"p-button-primary\",\n      tooltip: \"View\",\n      onClick: () => this.viewHistoryRecord(rowData),\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  upDateModel() {\n    this.setState({\n      isOpenForUpdate: true\n    });\n  }\n\n  addRowToArray(type) {\n    var i = this.state.textOperations.length;\n\n    if (type === 'Text') {\n      var textOperation = this.state.textOperations;\n      textOperation.push(this.state.TextArr);\n      this.setState({\n        textOperations: textOperation\n      });\n    } else if (type === 'Number') {\n      var NumberOperation = this.state.NumberOperations;\n      NumberOperation.push(this.state.NumberArr);\n      this.setState({\n        NumberOperations: NumberOperation\n      });\n    } else if (type === 'Date') {\n      var DateOperation = this.state.DateOperations;\n      DateOperation.push(this.state.DateArr);\n      this.setState({\n        DateOperations: DateOperation\n      });\n    }\n  }\n\n  removeRowToArray(value, i) {\n    this.state.textOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.textOperations);\n    this.setState({\n      textOperations: this.state.textOperations\n    });\n  }\n\n  removeRowToNumberArray(value, i) {\n    this.state.NumberOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.NumberOperations);\n    this.setState({\n      NumberOperations: this.state.NumberOperations\n    });\n  }\n\n  removeRowToDateArray(value, i) {\n    this.state.DateOperations[i].isDeleted = true;\n    console.log(\"removeRowToNumberArray\", this.state.DateOperations);\n    this.setState({\n      DateOperations: this.state.DateOperations\n    });\n  }\n\n  selectType(value, type) {\n    console.log(\"selectType\", value, type);\n\n    if (type === 'ResponseWeightType') {\n      if (value === '' || value === null || value === undefined) {\n        this.setState({\n          ResponseWeightTypeError: true,\n          ResponseWeightType: value\n        });\n        this.show(\"ResponseWeightType\", true, \"ResponseWeightTypeError\", \"Select valid type\");\n      } else {\n        const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\n          return { ...Package,\n            NumberRating: 0.00\n          };\n        });\n        const NewTextDetailsForDate = this.state.DateOperations.map((Package, index) => {\n          return { ...Package,\n            DateRating: 0.00\n          };\n        });\n        const NewTextDetailsForList = this.state.ListValue.map((Package, index) => {\n          return { ...Package,\n            Rating: 0.00\n          };\n        });\n        this.setState({\n          NumberOperations: NewTextDetails,\n          DateOperations: NewTextDetailsForDate,\n          ListValue: NewTextDetailsForList\n        });\n        this.setState({\n          ResponseWeightTypeError: false,\n          ResponseWeightType: value\n        });\n        this.show(\"ResponseWeightType\", false, \"ResponseWeightTypeError\", \"Select valid type\");\n      }\n    }\n\n    if (type === 'diaplayDate') {\n      this.setState({\n        diaplayDate: value\n      });\n    }\n  }\n\n  show(field, condition, errorField, message) {\n    console.log(\"(field, condition, errorField, message)\", field, condition, errorField, message);\n\n    if (condition) {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control is-invalid\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  searchByDateAndDisplayMode() {\n    try {\n      var dataToSend = {\n        RiskQuestionId: this.props.match.params.Id,\n        fromDate: CommonConfig.isEmpty(this.state.fromDate) ? '' : this.state.fromDate,\n        ToDate: CommonConfig.isEmpty(this.state.ToDate) ? '' : this.state.ToDate,\n        diaplayDate: CommonConfig.isEmpty(this.state.diaplayDate) ? '' : this.state.diaplayDate\n      };\n      api.post('api/getHistoryDates', dataToSend).then(res => {\n        if (res.success) {\n          console.log(\"getRiskQuestionHistory\", res.data);\n          var newArr = [];\n\n          for (var i = 0; i < res.data[0].length; i++) {\n            newArr.push({\n              QuestionCode: res.data[0][i].QuestionCode,\n              RiskQuestion: res.data[0][i].RiskQuestion,\n              QuestionGroup: res.data[0][i].QuestionGroup,\n              ResponseWeightTypeName: res.data[0][i].ResponseType,\n              StartDate: moment(res.data[0][i].StartDate).format('DD-MM-YYYY'),\n              UpdatedOn: res.data[0][i].UpdatedOn,\n              // RiskQuestionResponseWeightageHistoryId: res.data[0][i].RiskQuestionResponseWeightageHistoryId,\n              IsRateable: res.data[0][i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\n              QuestionCategoryName: res.data[0][i].QuestionCategory,\n              ResponseWeightType: res.data[0][i].ResponseWeightType,\n              Qualifier: res.data[0][i].Qualifier,\n              isCurrent: res.data[0][i].IsCurrent\n            });\n            this.setState({\n              QuestionCode: res.data[0][i].QuestionCode\n            });\n          }\n\n          console.log(\"getRiskQuestionHistory\", newArr);\n          this.setState({\n            products: newArr\n          });\n        }\n      });\n    } catch (error) {\n      console.log(\"getRiskQuestionHistoryErr\", error);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 21\n      }\n    }, \"RiskQuestion History\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      style: {\n        padding: 0,\n        marginLeft: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 29\n      }\n    }, \"Question Code\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1092,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 29\n      }\n    }, this.state.QuestionCode))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      style: {\n        padding: 0,\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 29\n      }\n    }, \"Effective Date\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"fromDate\",\n      id: \"fromDate\",\n      onChange: e => this.handleChange(e),\n      value: this.state.fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      style: {\n        padding: 0,\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 29\n      }\n    }, \"To\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"ToDate\",\n      id: \"ToDate\",\n      onChange: e => this.handleChange(e),\n      value: this.state.ToDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      style: {\n        padding: 0,\n        marginLeft: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 29\n      }\n    }, \"Display Mode\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"diaplayDate\",\n      id: \"diaplayDate\",\n      onChange: e => this.selectType(e.target.value, 'diaplayDate'),\n      value: this.state.diaplayDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 33\n      }\n    }, \"Select display date\"), this.state.diaplayDateArr.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.StringMapName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 45\n        }\n      }, type.StringMapName);\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.searchByDateAndDisplayMode(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 100\n      }\n    }), \"Search\"), ' '))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      keyField: \"StartDate\",\n      data: this.state.products,\n      columns: this.state.cols,\n      rowEvents: this.rowEvents,\n      expandRow: this.expandRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isEdit,\n      toggle: () => this.toggleEdit('save'),\n      className: 'modal-lg ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.toggleEdit('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 21\n      }\n    }, \"Risk Question\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 33\n      }\n    }, \"Question Category:\"), \" \", this.state.tempData.QuestionCategoryName), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1145,\n        columnNumber: 33\n      }\n    }, \"Question Group:\"), \" \", this.state.tempData.QuestionGroup), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 33\n      }\n    }, \"Question Code:\"), \" \", this.state.tempData.QuestionCode)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 64\n      }\n    }, \"Question:\"), \" \", this.state.tempData.RiskQuestion))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1158,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 33\n      }\n    }, \"Response Type:\"), \" \", this.state.tempData.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164,\n        columnNumber: 33\n      }\n    }, \"Is Rateable?\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isView,\n      type: \"checkbox\",\n      name: \"IsRateable\",\n      value: \"IsRateable\",\n      id: \"IsRateable\",\n      checked: this.state.IsRateable,\n      onClick: e => this.checked(e.target.checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 33\n      }\n    }, \"Type\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isView,\n      type: \"select\",\n      name: \"ResponseWeightType\",\n      id: \"ResponseWeightType\",\n      onChange: e => this.selectType(e.target.value, 'ResponseWeightType'),\n      value: this.state.ResponseWeightType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178,\n        columnNumber: 41\n      }\n    }, \"Select Rating Type\"), this.state.systemEndorsementArr.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.StringMapName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 53\n        }\n      }, type.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"ResponseWeightTypeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1188,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 33\n      }\n    }, this.state.effectivedate)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isView,\n      type: \"date\",\n      name: \"effectiveDate\",\n      id: \"effectiveDate\",\n      onChange: e => this.handleChange(e),\n      value: this.state.effectiveDate,\n      min: moment().format('YYYY-MM-DD'),\n      max: moment().add(100, 'years').format('YYYY-MM-DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1192,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"effectiveDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200,\n        columnNumber: 25\n      }\n    }, this.state.tempData.ResponseWeightTypeName === \"ListOfValues\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~LIST~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1202,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 45\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 45\n      }\n    }, \"Response\"))), this.state.ListValue.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1214,\n          columnNumber: 49\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"text\",\n        name: \"Rating\",\n        id: \"Rating\",\n        value: value.Rating,\n        onChange: this.ListValueValidate('Rating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 61\n        }\n      }), value.RatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1219,\n          columnNumber: 65\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1224,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 53\n        }\n      }, value.Response)));\n    })) : this.state.tempData.ResponseWeightTypeName === \"YesNo\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~YESNO~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1234,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1235,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1236,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1237,\n        columnNumber: 49\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 49\n      }\n    }, \"Response\"))), this.state.ListValue.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1245,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 53\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1248,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"text\",\n        name: \"Rating\",\n        id: \"Rating\",\n        value: value.Rating,\n        onChange: this.ListValueValidate('Rating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1249,\n          columnNumber: 65\n        }\n      }), value.RatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1251,\n          columnNumber: 69\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1256,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1257,\n          columnNumber: 57\n        }\n      }, value.Response)));\n    })) : this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~NUMBER~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1268,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269,\n        columnNumber: 53\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1272,\n        columnNumber: 53\n      }\n    }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1274,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1275,\n        columnNumber: 53\n      }\n    }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1277,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1278,\n        columnNumber: 53\n      }\n    }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1281,\n        columnNumber: 53\n      }\n    }, \"Bound 2\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 45\n      }\n    }, this.state.NumberOperations.map((value, index) => {\n      console.log(\"NumberOperations\", value);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1289,\n          columnNumber: 57\n        }\n      }, value.isDeleted == true ? null : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1291,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1292,\n          columnNumber: 69\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1294,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1296,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberRating\",\n        value: value.NumberRating,\n        id: \"NumberRating\",\n        onChange: this.NumberInputValidate('NumberRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1297,\n          columnNumber: 89\n        }\n      }), value.NumberRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1299,\n          columnNumber: 93\n        }\n      }, \" Please enter valid input \") : null))) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1306,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1307,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"select\",\n        name: \"NumberOperator1\",\n        onChange: this.NumberInputValidate('NumberOperator1', index),\n        value: value.NumberOperator1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1308,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1309,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.NumberOperator1Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.StringMapName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1311,\n            columnNumber: 93\n          }\n        }, type.StringMapName);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1317,\n          columnNumber: 69\n        }\n      }, value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1319,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberBound1\",\n        value: value.NumberBound1,\n        onChange: this.NumberInputValidate('NumberBound1', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1320,\n          columnNumber: 81\n        }\n      })) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1324,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1326,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"select\",\n        name: \"NumberOperator2\",\n        onChange: this.NumberInputValidate('NumberOperator2', index),\n        value: value.NumberOperator2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1327,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1328,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.NumberOperator2Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1330,\n            columnNumber: 93\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1337,\n          columnNumber: 69\n        }\n      }, value.IsAllOtherOperator && value.IsOnlyOneOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1339,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"NumberBound2\",\n        value: value.NumberBound2,\n        onChange: this.NumberInputValidate('NumberBound2', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1340,\n          columnNumber: 81\n        }\n      })) : null), value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1345,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Number'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1346,\n          columnNumber: 77\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToNumberArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1348,\n          columnNumber: 81\n        }\n      }, \"  Remove\") : null) : null));\n    }))) : this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~DATE~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1364,\n        columnNumber: 57\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1367,\n        columnNumber: 57\n      }\n    }, \"Operator 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1369,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 57\n      }\n    }, \"Bound 1\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1373,\n        columnNumber: 57\n      }\n    }, \"Operator 2\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1376,\n        columnNumber: 57\n      }\n    }, \"Bound 2\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 49\n      }\n    }, this.state.DateOperations.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1382,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1383,\n          columnNumber: 65\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1385,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateRating\",\n        id: \"DateRating\",\n        value: value.DateRating,\n        onChange: this.DateInputValidate('DateRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 77\n        }\n      }), value.DateRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1390,\n          columnNumber: 81\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1395,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1396,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"select\",\n        name: \"DateOperator1\",\n        onChange: this.DateInputValidate('DateOperator1', index),\n        value: value.DateOperator1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1397,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 77\n        }\n      }, \"Select Rating Type\"), this.state.DateOperator1Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1400,\n            columnNumber: 89\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1407,\n          columnNumber: 65\n        }\n      }, value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1409,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateBound1\",\n        value: value.DateBound1,\n        onChange: this.DateInputValidate('DateBound1', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410,\n          columnNumber: 77\n        }\n      })) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1418,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isView,\n        type: \"select\",\n        name: \"DateOperator2\",\n        onChange: this.DateInputValidate('DateOperator2', index),\n        value: value.DateOperator2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 77\n        }\n      }, \"Select Rating Type\"), this.state.DateOperator2Arr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 89\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 65\n        }\n      }, value.IsAllOtherOperator && value.IsOnlyOneOperator ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1433,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"DateBound2\",\n        value: value.DateBound2,\n        onChange: this.DateInputValidate('DateBound2', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1434,\n          columnNumber: 77\n        }\n      })) : null), value.IsAllOtherOperator ? /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Date'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 73\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToDateArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1442,\n          columnNumber: 77\n        }\n      }, \"  Remove\") : null) : null);\n    }))) : this.state.tempData.ResponseWeightTypeName === \"Text\" ?\n    /*#__PURE__*/\n\n    /*<~~~~~~~~~~~TEXT~~~~~~~~~~>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1454,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1456,\n        columnNumber: 61\n      }\n    }, this.state.ResponseWeightTypeName)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 61\n      }\n    }, \"Operator\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1462,\n        columnNumber: 61\n      }\n    }, \"Text for Comparison\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 53\n      }\n    }, this.state.textOperations.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1468,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1469,\n          columnNumber: 69\n        }\n      }, this.state.IsRateable ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1471,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"TextRating\",\n        id: \"TextRating\",\n        value: value.TextRating,\n        onChange: this.InputValidate('TextRating', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1472,\n          columnNumber: 81\n        }\n      }), value.TextRatingError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1474,\n          columnNumber: 85\n        }\n      }, \" Please enter valid input \") : null) : null), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1479,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1480,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        name: \"systemEndorsementText\",\n        onChange: this.InputValidate('TextOperator', index),\n        value: value.TextOperator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1481,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1482,\n          columnNumber: 81\n        }\n      }, \"Select Rating Type\"), this.state.systemEndorsementTextArr.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1484,\n            columnNumber: 93\n          }\n        }, type.label);\n      })))), /*#__PURE__*/React.createElement(Col, {\n        md: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1490,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1491,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        name: \"TextToCompare\",\n        id: \"TextToCompare\",\n        value: value.TextToCompare,\n        onChange: this.InputValidate('TextToCompare', index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1492,\n          columnNumber: 77\n        }\n      }), value.TextToCompareError ? /*#__PURE__*/React.createElement(\"em\", {\n        style: {\n          display: \"block\"\n        },\n        className: \"error invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1494,\n          columnNumber: 81\n        }\n      }, \" Please enter valid input \") : null)), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1498,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.addRowToArray('Text'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 73\n        }\n      }, \"Add Row\"), index !== 0 ? /*#__PURE__*/React.createElement(\"a\", {\n        onClick: () => this.removeRowToArray(value, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1501,\n          columnNumber: 77\n        }\n      }, \"  Remove\") : null));\n    }))) : null)), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1515,\n        columnNumber: 21\n      }\n    }, this.state.isView ? null : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.updateQuestion(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 96\n      }\n    }), \" Update\"), /*#__PURE__*/React.createElement(BTN, {\n      style: {\n        marginLeft: 10\n      },\n      color: \"primary\",\n      onClick: () => this.toggleEdit('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1521,\n        columnNumber: 125\n      }\n    }), \" Cancel\")))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isOpenForUpdate,\n      toggle: () => this.toggleEditModel('save'),\n      className: 'modal-lg ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.toggleEditModel('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 21\n      }\n    }, \"Risk Question\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1532,\n        columnNumber: 25\n      }\n    }, \"Values for this date \", moment(this.state.effectiveDate).format('DD-MM-YYYY'), \" is already added for \", this.state.tempData.RiskQuestion, \", are you sure you want to update this record ?\")), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.updateQuestionModal(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 89\n      }\n    }), \" Yes\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.toggleEditModel('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 91\n      }\n    }), \" No\"))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isDelet,\n      toggle: () => this.toggleDelete('save'),\n      className: 'modal-lg ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.toggleDelete('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 21\n      }\n    }, \"Risk Question\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1545,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 25\n      }\n    }, \"Are you sure want to delete this records ?\")), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1549,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.deleteModal(this.state.newVar),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 98\n      }\n    }), \" Yes\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.toggleDelete('save'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 88\n      }\n    }), \" No\"))));\n  }\n\n}\n\nexport default RiskQuestionHistory;","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/RiskQuestion/RiskQuestionHistory.js"],"names":["React","Component","DataTable","Column","MultiSelect","InputText","toast","Button","Modal","ModalBody","ModalFooter","ModalHeader","Col","Row","Input","BTN","api","APIConstant","CommonConfig","moment","render","BootstrapTable","RiskQuestionHistory","constructor","deleteHistoryRecord","row","setState","isDelet","newVar","viewHistoryRecord","isView","isEdit","tempData","IsRateable","ResponseWeightTypeName","textOperations","NumberOperations","DateOperations","effectiveDate","StartDate","format","ResponseWeightType","RiskQuestionHistoryId","handleOnExpand","updateHistoryRecord","console","log","isExpand","rowIndex","e","dataToSend","RiskQuestionId","props","match","params","Id","post","then","res","success","data","length","state","NumberArr","TextArr","DateArr","formattedData","i","temppDataForNumber","id","NumberRating","NumberOperator1","NumberOperator1Arr","NumberBound1","NumberOperator2","NumberOperator2Arr","NumberBound2","IsOnlyOneOperator","IsAllOtherOperator","DateRatingError","isDeleted","temppDataForText","TextRating","TextOperator","TextToCompare","temppDataForDate","DateRating","DateOperator1","DateOperator1Arr","DateBound1","DateOperator2","DateOperator2Arr","DateBound2","NumberRatingError","push","Response","isEmpty","ResponseStringMapKey","trim","Rating","AbsoluteAmount","RiskQuestionResponseWeightageHistoryId","RiskQuestionResponseWeightageId","Operator1","Bound1","Operator2","Bound2","ListValue","error","updateQuestion","isAdd","resultsData","products","filter","x","effectiveDateError","upDateModel","ResponseTypeName","loggedInUserId","IsAdd","IsEdit","message","toggleEdit","getRiskQuestionHistory","catch","err","updateQuestionModal","toggleEditModel","setTimeout","window","location","reload","deleteModal","IsDiscard","expandRow","onlyOneExpanding","showExpandColumn","expandByColumnOnly","onExpand","renderer","map","value","index","isOpenForUpdate","toggleDelete","InputValidate","name","PIndex","evt","target","NewTextDetails","Package","invSpace","TextRatingErr","RegExp","percentageWithNegative","decimalWithNegative","test","TextRatingError","nameWithoutSpace","TextToCompareError","NumberInputValidate","NumberRatingErr","IsAllOtherOperatorValue","DateRatingErr","number","IsOnlyOneOperatorValue","ListValueValidate","RatingError","DateInputValidate","checked","isChecked","handleChange","show","fromDate","ToDate","columns","dataField","text","formatter","actionFormatter","OpenModal","cols","forAction","RiskQuestionHistoryList","rowData","VesselClassList","VesselTypeList","vesselClass","VesselClassId","vesselClassError","VesselTypeId","vesselType","vesselTypeError","selectedPage","rowsPerPageOptions","dataTableConfig","str","rowsPerPage","globalFilter","toogleEditModal","ResponseWeightTypeNameError","ResponseWeightTypeError","textOperation","listType","systemEndorsementArr","systemEndorsement","systemEndorsementError","systemEndorsementText","systemEndorsementTextArr","ResponseType","effectivedate","historyDatesArr","historyDates","diaplayDate","diaplayDateArr","isEnable","componentDidMount","Object","keys","getDropDownValues","stringMapType","setStateName","orderBy","stringmaptype","orderby","path","dropdownbycode","newArr","QuestionCode","RiskQuestion","QuestionGroup","UpdatedOn","QuestionCategoryName","QuestionCategory","Qualifier","isCurrent","IsCurrent","ACTION","cell","position","Date","marginLeft","addRowToArray","type","NumberOperation","DateOperation","removeRowToArray","removeRowToNumberArray","removeRowToDateArray","selectType","undefined","NewTextDetailsForDate","NewTextDetailsForList","field","condition","errorField","document","getElementById","className","innerHTML","searchByDateAndDisplayMode","marginTop","padding","StringMapName","rowEvents","fontSize","add","display","label"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { MultiSelect } from 'primereact/multiselect';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { toast } from 'react-toastify';\r\nimport 'primereact/resources/themes/nova-light/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, Button as BTN } from 'reactstrap';\r\nimport api from '../../../utils/apiClient';\r\nimport APIConstant from '../../../utils/constants';\r\nimport { CommonConfig } from '../../../utils/constants';\r\nimport moment from 'moment';\r\nimport { render } from 'react-dom';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n\r\nclass RiskQuestionHistory extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const columns = [\r\n            { dataField: \"QuestionCode\", text: \"Question Code\" },\r\n            { dataField: \"RiskQuestion\", text: \"Question\" },\r\n            { dataField: \"QuestionGroup\", text: \"Group\" },\r\n            { dataField: \"ResponseWeightTypeName\", text: \"Rating Type\" },\r\n            { dataField: \"StartDate\", text: \"Effective Date\" },\r\n            { dataField: \"Qualifier\", text: \"Qualifier\" },\r\n            { dataField: \"isCurrent\", text: \"Is Current\" },\r\n            { dataField: \"Action\", text: \"Actions\", formatter: this.actionFormatter, OpenModal: this.updateHistoryRecord, viewHistoryRecord: this.viewHistoryRecord, deleteHistoryRecord: this.deleteHistoryRecord, },\r\n        ];\r\n\r\n        this.state = {\r\n            cols: columns,\r\n            forAction: false,\r\n            isAdd: false,\r\n            isDelet: false,\r\n            isOpenForUpdate: false,\r\n            products: [],\r\n            RiskQuestionHistoryList: [],\r\n            rowData: '',\r\n            VesselClassList: [],\r\n            VesselTypeList: [],\r\n            vesselClass: '',\r\n            VesselClassId: '',\r\n            vesselClassError: true,\r\n            VesselTypeId: '',\r\n            vesselType: '',\r\n            vesselTypeError: true,\r\n            selectedPage: 0,\r\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\r\n            str: '',\r\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\r\n            globalFilter: null,\r\n            toogleEditModal: false,\r\n            tempData: '',\r\n            IsRateable: false,\r\n            ResponseWeightTypeName: '',\r\n            ResponseWeightTypeNameError: true,\r\n            ResponseWeightType: '',\r\n            ResponseWeightTypeError: true,\r\n            textOperation: '',\r\n            textOperations: [],\r\n            TextArr: {\r\n                id: 1,\r\n                TextRating: '',\r\n                TextOperator: '',\r\n                TextToCompare: '',\r\n                TextToCompareError: false,\r\n                isDeleted: false,\r\n            },\r\n            NumberOperations: [],\r\n            NumberArr: {\r\n                id: 1,\r\n                NumberRating: '',\r\n                NumberOperator1: '',\r\n                NumberOperator1Arr: [],\r\n                NumberBound1: '',\r\n                NumberOperator2: '',\r\n                NumberOperator2Arr: [],\r\n                NumberBound2: '',\r\n                IsOnlyOneOperator: false,\r\n                IsAllOtherOperator: true,\r\n                NumberRatingError: false,\r\n                isDeleted: false,\r\n            },\r\n            DateOperations: [],\r\n            DateArr: {\r\n                id: 1,\r\n                DateRating: '',\r\n                DateOperator1: '',\r\n                DateOperator1Arr: [],\r\n                DateBound1: '',\r\n                DateOperator2: '',\r\n                DateOperator2Arr: [],\r\n                DateBound2: '',\r\n                IsOnlyOneOperator: false,\r\n                IsAllOtherOperator: true,\r\n                DateRatingError: false,\r\n                isDeleted: false,\r\n            },\r\n            TextRatingError: true,\r\n            TextRating: '',\r\n            ListValue: [],\r\n            Rating: '',\r\n            RatingError: true,\r\n            listType: '',\r\n            systemEndorsementArr: [],\r\n            systemEndorsement: '',\r\n            systemEndorsementError: true,\r\n            systemEndorsementText: '',\r\n            systemEndorsementTextArr: [],\r\n            RiskQuestionId: '',\r\n            RiskQuestionResponseWeightageId: '',\r\n            ResponseType: '',\r\n            effectivedate: 'Effective Date',\r\n            effectiveDate: '',\r\n            effectiveDateError: true,\r\n            historyDatesArr: [],\r\n            historyDates: '',\r\n            fromDate: '',\r\n            ToDate: '',\r\n            diaplayDate: '',\r\n            diaplayDateArr: [],\r\n            isEnable: false,\r\n            isEdit: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.match.params.constructor === Object && Object.keys(this.props.match.params).length !== 0) {\r\n            this.getRiskQuestionHistory(this.props.match.params.Id);\r\n        }\r\n\r\n        this.getDropDownValues('RATINGTYPE', 'systemEndorsementArr', 'SortOrder');\r\n        this.getDropDownValues('RATINGOPERATOR', 'NumberOperator1Arr', 'SortOrder');\r\n        this.getDropDownValues('RATINGOPERATOR2', 'NumberOperator2Arr', 'SortOrder');\r\n        this.getDropDownValues('RATINGOPERATOR', 'DateOperator1Arr', 'SortOrder');\r\n        this.getDropDownValues('RATINGOPERATOR2', 'DateOperator2Arr', 'SortOrder');\r\n        this.getDropDownValues('TEXTOPERATOR', 'systemEndorsementTextArr', 'SortOrder');\r\n        this.getDropDownValues('DISPLAYMODE', 'diaplayDateArr', 'SortOrder');\r\n        this.setState({ effectiveDate: moment().format('YYYY-MM-DD'), effectiveDateError: false })\r\n    }\r\n\r\n    getDropDownValues(stringMapType, setStateName, orderBy) {\r\n        try {\r\n            const data = {\r\n                stringmaptype: stringMapType,\r\n                orderby: orderBy\r\n            };\r\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\r\n                if (res.success) {\r\n                    console.log(\"getDropDownValues\", res.data);\r\n                    this.setState({ [setStateName]: res.data });\r\n                } else {\r\n                }\r\n            }).catch(err => {\r\n            });\r\n        } catch (error) {\r\n        }\r\n    }\r\n\r\n    getRiskQuestionHistory(Id) {\r\n        try {\r\n            var data = {\r\n                RiskQuestionId: Id,\r\n                fromDate: CommonConfig.isEmpty(this.state.fromDate) ? '' : this.state.fromDate,\r\n                ToDate: CommonConfig.isEmpty(this.state.ToDate) ? '' : this.state.ToDate,\r\n                diaplayDate: CommonConfig.isEmpty(this.state.diaplayDate) ? '' : this.state.diaplayDate,\r\n            }\r\n            api.post('api/getHistoryDates', data).then(res => {\r\n                if (res.success) {\r\n                    console.log(\"getRiskQuestionHistory\", res.data);\r\n                    var newArr = [];\r\n                    for (var i = 0; i < res.data[0].length; i++) {\r\n                        newArr.push({\r\n                            QuestionCode: res.data[0][i].QuestionCode,\r\n                            RiskQuestion: res.data[0][i].RiskQuestion,\r\n                            QuestionGroup: res.data[0][i].QuestionGroup,\r\n                            ResponseWeightTypeName: res.data[0][i].ResponseType,\r\n                            StartDate: moment(res.data[0][i].StartDate).format('DD-MM-YYYY'),\r\n                            UpdatedOn: res.data[0][i].UpdatedOn,\r\n                            IsRateable: res.data[0][i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\r\n                            QuestionCategoryName: res.data[0][i].QuestionCategory,\r\n                            ResponseWeightType: res.data[0][i].ResponseWeightType,\r\n                            Qualifier: res.data[0][i].Qualifier,\r\n                            isCurrent: res.data[0][i].IsCurrent,\r\n                            forAction: res.data[0][i].ACTION === \"Edit\" ? true : false,\r\n                            RiskQuestionHistoryId: res.data[0][i].RiskQuestionHistoryId\r\n                        })\r\n                        this.setState({ QuestionCode: res.data[0][i].QuestionCode });\r\n                    }\r\n                    console.log(\"getRiskQuestionHistory\", newArr);\r\n                    this.setState({ products: newArr });\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(\"getRiskQuestionHistoryErr\", error);\r\n        }\r\n    }\r\n\r\n    actionFormatter(cell, rowData) {\r\n        return <div>\r\n            {(rowData.forAction) ? (\r\n                <div>\r\n                    <Button type=\"button\" icon=\"pi pi-pencil\" className=\"p-button-warning\" tooltip=\"Edit\" onClick={() => this.OpenModal(rowData)} tooltipOptions={{ position: 'bottom' }}></Button>\r\n                    {(Date(moment(rowData.StartDate).format('YYYY-MM-DD')) >= moment().format('YYYY-MM-DD')) ? (\r\n                        <Button style={{ marginLeft: 10 }} type=\"button\" icon=\"pi pi-trash\" className=\"p-button-danger\" tooltip=\"delete\" onClick={() => this.deleteHistoryRecord(rowData)} tooltipOptions={{ position: 'bottom' }}></Button>\r\n                    ) : (null)}\r\n                </div>\r\n            ) : (\r\n                    <Button type=\"button\" icon=\"pi pi-eye\" className=\"p-button-primary\" tooltip=\"View\" onClick={() => this.viewHistoryRecord(rowData)} tooltipOptions={{ position: 'bottom' }}></Button>\r\n                )}\r\n\r\n            {/* <Button type=\"button\" icon=\"pi pi-clock\" className=\"p-button-primary\" tooltip=\"Show History\" onClick={() => this.goToHistoryPage(rowData)} tooltipOptions={{ position: 'bottom' }} style={{ marginLeft: 10 }}></Button> */}\r\n            {/* <Button color=\"warning\" style={{ marginRight: '.5em' }}  title=\"Edit\"><i className=\"pi pi-pencil\"></i></Button> */}\r\n        </div>;\r\n    }\r\n\r\n    deleteHistoryRecord = (row) => {\r\n        this.setState({ isDelet: true, newVar: row });\r\n    }\r\n\r\n    viewHistoryRecord = (row) => {\r\n        this.setState({ isView: true, isEdit: true, tempData: row, IsRateable: (row.IsRateable === 'Yes' ? true : false), ResponseWeightTypeName: row.ResponseWeightTypeName, textOperations: [], NumberOperations: [], DateOperations: [], effectiveDate: moment(row.StartDate, 'DD-MM-YYYY').format('YYYY-MM-DD'), ResponseWeightType: row.ResponseWeightType, RiskQuestionHistoryId: row.RiskQuestionHistoryId });\r\n        this.handleOnExpand(row);\r\n    }\r\n\r\n    updateHistoryRecord = (row) => {\r\n        this.setState({\r\n            isEdit: true, tempData: row, IsRateable: (row.IsRateable === 'Yes' ? true : false), ResponseWeightTypeName: row.ResponseWeightTypeName, textOperations: [], NumberOperations: [], DateOperations: [],\r\n            effectiveDate: (moment(row.StartDate, 'DD-MM-YYYY').format(\"YYYY-MM-DD\") > moment().format(\"YYYY-MM-DD\")) ? moment(row.StartDate, 'DD-MM-YYYY').format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\r\n            ResponseWeightType: row.ResponseWeightType, RiskQuestionHistoryId: row.RiskQuestionHistoryId\r\n        });\r\n        this.handleOnExpand(row);\r\n        console.log(\"rowEventssssssssss\", row);\r\n    }\r\n\r\n    handleOnExpand = (row, isExpand, rowIndex, e) => {\r\n        console.log(\"handleOnExpandddd55\", row);\r\n        try {\r\n            var dataToSend = {\r\n                RiskQuestionId: this.props.match.params.Id,\r\n                RiskQuestionHistoryId: row.RiskQuestionHistoryId,\r\n            }\r\n            console.log(\"handleOnExpandddd3\", dataToSend);\r\n            api.post('api/getResponseByHistoryDates', dataToSend).then(res => {\r\n                if (res.success) {\r\n                    console.log(\"handleOnExpandddd321\", res.data);\r\n                    if (!res.data.length) {\r\n                        if (this.state.ResponseWeightTypeName === \"Number\" || this.state.ResponseWeightTypeName === \"Percentage\" || this.state.ResponseWeightTypeName === \"Amount\") {\r\n                            this.setState({ NumberOperations: [this.state.NumberArr] });\r\n                        } else if (this.state.ResponseWeightTypeName === \"Text\") {\r\n                            this.setState({ textOperations: [this.state.TextArr] });\r\n                        } else if (this.state.ResponseWeightTypeName === \"Date\" || this.state.ResponseWeightTypeName === \"Year\") {\r\n                            this.setState({ DateOperations: [this.state.DateArr] });\r\n                        }\r\n                    } else {\r\n                        var formattedData = [];\r\n                        var NumberOperations = [];\r\n                        var textOperations = [];\r\n                        var DateOperations = [];\r\n                        let i;\r\n                        for (i = 0; i < res.data.length; i++) {\r\n                            var temppDataForNumber = {\r\n                                id: 1,\r\n                                NumberRating: '',\r\n                                NumberOperator1: '',\r\n                                NumberOperator1Arr: [],\r\n                                NumberBound1: '',\r\n                                NumberOperator2: '',\r\n                                NumberOperator2Arr: [],\r\n                                NumberBound2: '',\r\n                                IsOnlyOneOperator: true,\r\n                                IsAllOtherOperator: true,\r\n                                DateRatingError: false,\r\n                                isDeleted: false,\r\n                            };\r\n\r\n                            var temppDataForText = {\r\n                                id: 1,\r\n                                TextRating: '',\r\n                                TextOperator: '',\r\n                                TextToCompare: '',\r\n                                isDeleted: false,\r\n                            }\r\n\r\n                            var temppDataForDate = {\r\n                                id: 1,\r\n                                DateRating: '',\r\n                                DateOperator1: '',\r\n                                DateOperator1Arr: [],\r\n                                DateBound1: '',\r\n                                DateOperator2: '',\r\n                                DateOperator2Arr: [],\r\n                                DateBound2: '',\r\n                                IsOnlyOneOperator: true,\r\n                                IsAllOtherOperator: true,\r\n                                NumberRatingError: false,\r\n                                isDeleted: false,\r\n                            }\r\n                            formattedData.push({\r\n                                Response: CommonConfig.isEmpty(res.data[i].ResponseStringMapKey) ? '' : (res.data[i].ResponseStringMapKey).trim(),\r\n                                Rating: CommonConfig.isEmpty(res.data[i].Rating) ? CommonConfig.isEmpty(res.data[i].AbsoluteAmount) ? 0 : res.data[i].AbsoluteAmount : res.data[i].Rating,\r\n                                RiskQuestionResponseWeightageHistoryId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId,\r\n                                RiskQuestionResponseWeightageId: CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId\r\n\r\n                            });\r\n\r\n                            temppDataForNumber.id = i + 1;\r\n                            temppDataForNumber.NumberRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\r\n                            temppDataForNumber.NumberOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\r\n                            temppDataForNumber.NumberBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\r\n\r\n                            temppDataForNumber.NumberOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? '' : res.data[i].Operator2;\r\n                            if (temppDataForNumber.NumberOperator2 === \"One Operator Only\") {\r\n                                temppDataForNumber.IsOnlyOneOperator = false;\r\n                            } else {\r\n                                temppDataForNumber.IsOnlyOneOperator = true;\r\n                            }\r\n                            temppDataForNumber.NumberBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\r\n                            temppDataForNumber.RiskQuestionResponseWeightageHistoryId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId;\r\n                            temppDataForNumber.isDeleted = false;\r\n                            temppDataForNumber.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\r\n                            // temppDataForNumber.IsOnlyOneOperator= true;\r\n\r\n                            temppDataForText.TextRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\r\n                            temppDataForText.TextOperator = CommonConfig.isEmpty(res.data[i].Operator1) ? '' : res.data[i].Operator1;\r\n                            temppDataForText.TextToCompare = CommonConfig.isEmpty(res.data[i].Bound1) ? '' : res.data[i].Bound1;\r\n                            temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\r\n                            temppDataForText.isDeleted = false;\r\n                            temppDataForText.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\r\n\r\n                            temppDataForDate.id = i + 1;\r\n                            temppDataForDate.DateRating = CommonConfig.isEmpty(res.data[i].Rating) ? res.data[i].AbsoluteAmount : res.data[i].Rating;\r\n                            temppDataForDate.DateOperator1 = CommonConfig.isEmpty(res.data[i].Operator1) ? 0.00 : res.data[i].Operator1;\r\n                            temppDataForDate.DateBound1 = CommonConfig.isEmpty(res.data[i].Bound1) ? 0.00 : res.data[i].Bound1;\r\n                            temppDataForDate.DateOperator2 = CommonConfig.isEmpty(res.data[i].Operator2) ? 0.00 : res.data[i].Operator2;\r\n                            if (temppDataForDate.NumberOperator2 === \"One Operator Only\") {\r\n                                temppDataForDate.IsOnlyOneOperator = false;\r\n                            } else {\r\n                                temppDataForDate.IsOnlyOneOperator = true;\r\n                            }\r\n                            temppDataForDate.DateBound2 = CommonConfig.isEmpty(res.data[i].Bound2) ? 0.00 : res.data[i].Bound2;\r\n                            temppDataForDate.RiskQuestionResponseWeightageHistoryId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageHistoryId) ? '' : res.data[i].RiskQuestionResponseWeightageHistoryId;\r\n                            temppDataForDate.isDeleted = false;\r\n                            temppDataForDate.RiskQuestionResponseWeightageId = CommonConfig.isEmpty(res.data[i].RiskQuestionResponseWeightageId) ? '' : res.data[i].RiskQuestionResponseWeightageId;\r\n                            // temppDataForDate.IsOnlyOneOperator= true;\r\n\r\n                            NumberOperations.push(temppDataForNumber);\r\n                            textOperations.push(temppDataForText);\r\n                            DateOperations.push(temppDataForDate);\r\n                        }\r\n                        this.setState({ NumberOperations: NumberOperations });\r\n                        this.setState({ textOperations: textOperations });\r\n                        this.setState({ DateOperations: DateOperations });\r\n                        this.setState({ ListValue: formattedData });\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(\"handleOnExpandErr\", error);\r\n        }\r\n    }\r\n\r\n    upDateModel() {\r\n        this.setState({ isOpenForUpdate: true });\r\n    }\r\n\r\n    updateQuestion = () => {\r\n        var isAdd = this.state.isAdd;\r\n        var isEdit = this.state.isEdit;\r\n        let resultsData = this.state.products.filter(x => x.StartDate === moment(this.state.effectiveDate).format('DD-MM-YYYY'));\r\n        console.log(\"updateQuestion\", resultsData);\r\n        if (!this.state.effectiveDateError) {\r\n\r\n            if (resultsData.length) {\r\n                isAdd = false;\r\n                isEdit = true;\r\n                this.setState({ RiskQuestionHistoryId: resultsData[0].RiskQuestionHistoryId })\r\n                this.upDateModel();\r\n            } else {\r\n                isAdd = true;\r\n                isEdit = false;\r\n\r\n                let data = {\r\n                    RiskQuestionHistoryId: this.state.RiskQuestionHistoryId,\r\n                    ResponseTypeName: this.state.ResponseWeightType,\r\n                    IsRateable: this.state.IsRateable,\r\n                    ResponseWeightTypeName: this.state.ResponseWeightTypeName,\r\n                    RiskQuestionId: this.props.match.params.Id,\r\n                    effectiveDate: this.state.effectiveDate,\r\n                    loggedInUserId: CommonConfig.loggedInUserId(),\r\n                    IsAdd: isAdd,\r\n                    IsEdit: isEdit,\r\n                };\r\n                if (this.state.tempData.ResponseWeightTypeName === \"Text\") {\r\n                    if (this.state.IsRateable) {\r\n                        data.textOperations = this.state.textOperations;\r\n                    } else {\r\n                        data.textOperations = '';\r\n                    }\r\n                } else if (this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\") {\r\n                    if (this.state.IsRateable) {\r\n                        data.NumberOperations = this.state.NumberOperations;\r\n                    } else {\r\n                        data.NumberOperations = '';\r\n                    }\r\n                } else if (this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\") {\r\n                    if (this.state.IsRateable) {\r\n                        data.DateOperations = this.state.DateOperations;\r\n                    } else {\r\n                        data.DateOperations = '';\r\n                    }\r\n                } else if (this.state.tempData.ResponseWeightTypeName === \"ListOfValues\" || this.state.tempData.ResponseWeightTypeName === \"YesNo\") {\r\n                    if (this.state.IsRateable) {\r\n                        data.ListValue = this.state.ListValue;\r\n                    } else {\r\n                        data.ListValue = '';\r\n                    }\r\n                }\r\n                console.log(\"IsOnlyOneOperator\", data);\r\n\r\n                api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\r\n                    console.log(\"UpdateRiskQuestionWeightage\", res);\r\n                    if (res.success) {\r\n                        console.log(\"UpdateRiskQuestionWeightage\", res.data);\r\n                        toast.success(res.data.message);\r\n                        this.toggleEdit('save');\r\n                        // setTimeout(function () {\r\n                        //     window.location.reload();\r\n                        // }, 1000);   \r\n                        this.getRiskQuestionHistory(this.props.match.params.Id);\r\n                    }\r\n                }).catch(err => {\r\n                });\r\n            }\r\n        } else {\r\n            if (this.state.effectiveDateError) {\r\n                toast.error(\"Please select valid Effective Date\")\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    updateQuestionModal = () => {\r\n        let data = {\r\n            RiskQuestionHistoryId: this.state.RiskQuestionHistoryId,\r\n            ResponseTypeName: this.state.ResponseWeightType,\r\n            IsRateable: this.state.IsRateable,\r\n            ResponseWeightTypeName: this.state.ResponseWeightTypeName,\r\n            RiskQuestionId: this.props.match.params.Id,\r\n            effectiveDate: this.state.effectiveDate,\r\n            loggedInUserId: CommonConfig.loggedInUserId(),\r\n            IsEdit: 'true',\r\n        };\r\n        if (this.state.tempData.ResponseWeightTypeName === \"Text\") {\r\n            if (this.state.IsRateable) {\r\n                data.textOperations = this.state.textOperations;\r\n            } else {\r\n                data.textOperations = '';\r\n            }\r\n        } else if (this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\") {\r\n            if (this.state.IsRateable) {\r\n                data.NumberOperations = this.state.NumberOperations;\r\n            } else {\r\n                data.NumberOperations = '';\r\n            }\r\n        } else if (this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\") {\r\n            if (this.state.IsRateable) {\r\n                data.DateOperations = this.state.DateOperations;\r\n            } else {\r\n                data.DateOperations = '';\r\n            }\r\n        } else if (this.state.tempData.ResponseWeightTypeName === \"ListOfValues\" || this.state.tempData.ResponseWeightTypeName === \"YesNo\") {\r\n            if (this.state.IsRateable) {\r\n                data.ListValue = this.state.ListValue;\r\n            } else {\r\n                data.ListValue = '';\r\n            }\r\n        }\r\n        console.log(\"IsOnlyOneOperator\", data);\r\n\r\n        api.post('api/UpdateRiskQuestionWeightage', data).then(res => {\r\n            console.log(\"UpdateRiskQuestionWeightage\", res);\r\n            if (res.success) {\r\n                console.log(\"UpdateRiskQuestionWeightage\", res.data);\r\n                toast.success(res.data.message);\r\n                this.toggleEditModel('save');\r\n                setTimeout(function () {\r\n                    window.location.reload();\r\n                }, 1000);\r\n                this.getRiskQuestionHistory(this.props.match.params.Id);\r\n            }\r\n        }).catch(err => {\r\n        });\r\n    }\r\n\r\n    deleteModal = (newVar) => {\r\n        console.log(\"deleteModal\", newVar);\r\n        try {\r\n            var dataToSend = {\r\n                IsDiscard: 'true',\r\n                RiskQuestionHistoryId: newVar.RiskQuestionHistoryId,\r\n                loggedInUserId: CommonConfig.loggedInUserId(),\r\n            }\r\n            api.post('api/deleteRiskQuestion', dataToSend).then(res => {\r\n                console.log(\"deleteRiskQuestion\", res);\r\n                if (res.success) {\r\n                    toast.success(res.message);\r\n                    this.toggleEdit('save');\r\n                    setTimeout(function () {\r\n                        window.location.reload();\r\n                    }, 800);\r\n                    this.getRiskQuestionHistory(this.props.match.params.Id);\r\n                }\r\n            }).catch(err => {\r\n            });\r\n        } catch (error) {\r\n            console.log(\"deleteModal\", error);\r\n        }\r\n    }\r\n\r\n    expandRow = {\r\n        onlyOneExpanding: true,\r\n        showExpandColumn: true,\r\n        expandByColumnOnly: true,\r\n        onExpand: this.handleOnExpand,\r\n        renderer: row => (\r\n            <div>\r\n                <div>\r\n                    {/* {(row.ResponseWeightTypeName === \"ListOfValues\" */}\r\n                    {(row.ResponseWeightTypeName === \"ListOfValues\") ?\r\n                        <div>\r\n                            <Row>\r\n                                <Col md=\"3\">\r\n                                    <b>Rating/Absolute Amount</b>\r\n                                </Col>\r\n                                <Col md=\"3\">\r\n                                    <b>Response</b>\r\n                                </Col>\r\n                            </Row>\r\n                            {this.state.ListValue.map((value, index) => {\r\n                                return (\r\n                                    <Row>\r\n                                        <Col md=\"3\">\r\n                                            <label>{value.Rating}</label>\r\n                                        </Col>\r\n                                        <Col md=\"9\">\r\n                                            <label>{value.Response}</label>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            }\r\n                            )}\r\n                        </div>\r\n                        : (row.ResponseWeightTypeName === \"YesNo\") ? (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md=\"3\">\r\n                                        <b>Rating/Absolute Amount</b>\r\n                                    </Col>\r\n                                    <Col md=\"3\">\r\n                                        <b>Response</b>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.ListValue.map((value, index) => {\r\n                                    return (\r\n                                        <Row>\r\n                                            <Col md=\"3\">\r\n                                                <label>{value.Rating}</label>\r\n                                            </Col>\r\n                                            <Col md=\"9\">\r\n                                                <label>{value.Response}</label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </div>\r\n                        ) : (row.ResponseWeightTypeName === \"Number\" || row.ResponseWeightTypeName === \"Percentage\" || row.ResponseWeightTypeName === \"Amount\") ? (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md=\"2\">\r\n                                        <b>Rating/Absolute Amount</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Operator 1</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Bound 1</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Operator 2</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Bound 2</b>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.NumberOperations.map((value, index) => {\r\n                                    return (\r\n                                        <Row>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.NumberRating}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.NumberOperator1}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.NumberBound1}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.NumberOperator2}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.NumberBound2}</label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </div>\r\n                        ) : (row.ResponseWeightTypeName === \"Date\" || row.ResponseWeightTypeName === \"Year\") ? (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md=\"2\">\r\n                                        <b>Rating/Absolute Amount</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Operator 1</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Bound 1</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Operator 2</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Bound 2</b>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.DateOperations.map((value, index) => {\r\n                                    console.log(\"handleOnExpandddd123\", value);\r\n                                    return (\r\n                                        <Row>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.DateRating}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.DateOperator1}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.DateBound1}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.DateOperator2}</label>\r\n                                            </Col>\r\n                                            <Col md=\"2\">\r\n                                                <label>{value.DateBound2}</label>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </div>\r\n                        ) : (row.ResponseWeightTypeName === \"Text\") ? (\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md=\"2\">\r\n                                        <b>Rating/Absolute Amount</b>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <b>Operator</b>\r\n                                    </Col>\r\n                                    <Col md=\"3\">\r\n                                        <b>Text for Comparison</b>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div>\r\n                                    {this.state.textOperations.map((value, index) => {\r\n                                        console.log(\"handleOnExpandddd123\", value);\r\n                                        return (\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                    <label>{value.TextRating}</label>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    <label>{value.TextOperator}</label>\r\n                                                </Col>\r\n                                                <Col md=\"3\">\r\n                                                    <label>{value.TextToCompare}</label>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        ) : (null)}\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n\r\n    toggleEdit = () => {\r\n        this.setState({ isEdit: false, isView: false, effectiveDate: moment().format('YYYY-MM-DD'), effectiveDateError: false });\r\n    }\r\n\r\n    toggleEditModel = () => {\r\n        this.setState({ isOpenForUpdate: false });\r\n    }\r\n\r\n    toggleDelete = () => {\r\n        this.setState({ isDelet: false })\r\n    }\r\n\r\n    addRowToArray(type) {\r\n        var i = this.state.textOperations.length;\r\n        if (type === 'Text') {\r\n            var textOperation = this.state.textOperations;\r\n            textOperation.push(this.state.TextArr);\r\n            this.setState({ textOperations: textOperation });\r\n        } else if (type === 'Number') {\r\n            var NumberOperation = this.state.NumberOperations;\r\n            NumberOperation.push(this.state.NumberArr);\r\n            this.setState({ NumberOperations: NumberOperation });\r\n        } else if (type === 'Date') {\r\n            var DateOperation = this.state.DateOperations;\r\n            DateOperation.push(this.state.DateArr);\r\n            this.setState({ DateOperations: DateOperation });\r\n        }\r\n    }\r\n\r\n    removeRowToArray(value, i) {\r\n        this.state.textOperations[i].isDeleted = true;\r\n        console.log(\"removeRowToNumberArray\", this.state.textOperations);\r\n        this.setState({ textOperations: this.state.textOperations });\r\n    }\r\n\r\n    removeRowToNumberArray(value, i) {\r\n        this.state.NumberOperations[i].isDeleted = true;\r\n        console.log(\"removeRowToNumberArray\", this.state.NumberOperations);\r\n        this.setState({ NumberOperations: this.state.NumberOperations });\r\n    }\r\n\r\n    removeRowToDateArray(value, i) {\r\n        this.state.DateOperations[i].isDeleted = true;\r\n        console.log(\"removeRowToNumberArray\", this.state.DateOperations);\r\n        this.setState({ DateOperations: this.state.DateOperations });\r\n    }\r\n\r\n    InputValidate = (name, PIndex) => evt => {\r\n        console.log(\"InputValidate\", name, PIndex, this.state.ResponseWeightTypeName);\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n        const NewTextDetails = this.state.textOperations.map((Package, index) => {\r\n            if (PIndex === index) {\r\n                if (name === \"TextRating\") {\r\n                    let invSpace, TextRatingErr;\r\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\r\n                        invSpace = CommonConfig.RegExp.percentageWithNegative;\r\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\r\n                        invSpace = CommonConfig.RegExp.decimalWithNegative;\r\n                    }\r\n\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        TextRatingErr = false;\r\n                    } else {\r\n                        TextRatingErr = true;\r\n                    }\r\n                    return { ...Package, TextRating: evt.target.value, TextRatingError: TextRatingErr };\r\n                } else if (name === \"TextOperator\") {\r\n                    // let IsAllOtherOperatorValue;\r\n                    // if (evt.target.value === \"All Others\") {\r\n                    //     IsAllOtherOperatorValue = false;\r\n                    // } else {\r\n                    //     IsAllOtherOperatorValue = true;\r\n                    // }\r\n                    return { ...Package, TextOperator: evt.target.value };\r\n                }\r\n                else if (name === \"TextToCompare\") {\r\n                    let invSpace = CommonConfig.RegExp.nameWithoutSpace, TextRatingErr;\r\n                    // if (this.state.ResponseWeightTypeName === \"Rating\") {\r\n                    //     invSpace = CommonConfig.RegExp.allowAllWithSpace\r\n                    // }\r\n\r\n                    if (!invSpace.test(evt.target.value)) {\r\n                        TextRatingErr = true;\r\n                    }\r\n                    return { ...Package, TextToCompare: evt.target.value, TextToCompareError: TextRatingErr };\r\n                }\r\n            } else {\r\n                return { ...Package };\r\n            }\r\n        });\r\n        this.setState({ textOperations: NewTextDetails }, function () {\r\n        });\r\n    }\r\n\r\n    NumberInputValidate = (name, PIndex) => evt => {\r\n        console.log(name, PIndex);\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n        const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\r\n            if (PIndex === index) {\r\n                if (name === \"NumberRating\") {\r\n                    let invSpace, NumberRatingErr;\r\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\r\n                        invSpace = CommonConfig.RegExp.percentageWithNegative;\r\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\r\n                        invSpace = CommonConfig.RegExp.decimalWithNegative;\r\n                    }\r\n\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        NumberRatingErr = false;\r\n                    } else {\r\n                        NumberRatingErr = true;\r\n                    }\r\n                    return { ...Package, NumberRating: evt.target.value, NumberRatingError: NumberRatingErr };\r\n                }\r\n                else if (name === \"NumberOperator1\") {\r\n                    let IsAllOtherOperatorValue;\r\n                    if (evt.target.value === \"All Others\") {\r\n                        IsAllOtherOperatorValue = false;\r\n                    } else {\r\n                        IsAllOtherOperatorValue = true;\r\n                    }\r\n                    return { ...Package, NumberOperator1: evt.target.value, IsAllOtherOperator: IsAllOtherOperatorValue };\r\n                }\r\n\r\n                else if (name === \"NumberBound1\") {\r\n                    let invSpace, DateRatingErr;\r\n                    invSpace = CommonConfig.RegExp.number;\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        DateRatingErr = false;\r\n                    } else {\r\n                        DateRatingErr = true;\r\n                    }\r\n                    return { ...Package, NumberBound1: evt.target.value, NumberRatingError: DateRatingErr };\r\n                }\r\n\r\n                else if (name === \"NumberOperator2\") {\r\n                    console.log(\"evt.target.value\", evt.target.value);\r\n                    let IsOnlyOneOperatorValue;\r\n                    if (evt.target.value === \"One Operator Only\") {\r\n                        IsOnlyOneOperatorValue = false;\r\n                    } else {\r\n                        IsOnlyOneOperatorValue = true;\r\n                    }\r\n                    return { ...Package, NumberOperator2: evt.target.value, IsOnlyOneOperator: IsOnlyOneOperatorValue };\r\n                }\r\n\r\n                else if (name === \"NumberBound2\") {\r\n                    let invSpace, DateRatingErr;\r\n                    invSpace = CommonConfig.RegExp.number;\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        DateRatingErr = false;\r\n                    } else {\r\n                        DateRatingErr = true;\r\n                    }\r\n                    return { ...Package, NumberBound2: evt.target.value, NumberRatingError: DateRatingErr };\r\n                }\r\n            } else {\r\n                return { ...Package };\r\n            }\r\n        });\r\n        this.setState({ NumberOperations: NewTextDetails }, function () {\r\n        });\r\n    }\r\n\r\n    ListValueValidate = (name, PIndex) => evt => {\r\n        console.log(name, PIndex);\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n        const NewTextDetails = this.state.ListValue.map((Package, index) => {\r\n            console.log(\"ListValueindex\", index, PIndex === index);\r\n            if (PIndex === index) {\r\n                if (name === \"Rating\") {\r\n                    let invSpace, NumberRatingErr;\r\n                    if (this.state.ResponseWeightType === \"Rating\") {\r\n                        invSpace = CommonConfig.RegExp.percentageWithNegative;\r\n                    } else if (this.state.ResponseWeightType === \"Absolute\") {\r\n                        invSpace = CommonConfig.RegExp.decimalWithNegative;\r\n                    }\r\n\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        NumberRatingErr = false;\r\n                    } else {\r\n                        NumberRatingErr = true;\r\n                    }\r\n                    return { ...Package, Rating: evt.target.value, RatingError: NumberRatingErr };\r\n                }\r\n            } else {\r\n                return { ...Package };\r\n            }\r\n        });\r\n        this.setState({ ListValue: NewTextDetails }, function () {\r\n        });\r\n    }\r\n\r\n    DateInputValidate = (name, PIndex) => evt => {\r\n        console.log(name, PIndex);\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n        const NewTextDetails = this.state.DateOperations.map((Package, index) => {\r\n            if (PIndex === index) {\r\n                if (name === \"DateRating\") {\r\n                    let invSpace, DateRatingErr;\r\n                    if (this.state.ResponseWeightTypeName === \"Rating\") {\r\n                        invSpace = CommonConfig.RegExp.percentageWithNegative;\r\n                    } else if (this.state.ResponseWeightTypeName === \"Absolute\") {\r\n                        invSpace = CommonConfig.RegExp.decimalWithNegative;\r\n                    }\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        DateRatingErr = false;\r\n                    } else {\r\n                        DateRatingErr = true;\r\n                    }\r\n                    return { ...Package, DateRating: evt.target.value, DateRatingError: DateRatingErr };\r\n                }\r\n\r\n                else if (name === \"DateOperator1\") {\r\n                    let IsAllOtherOperatorValue;\r\n                    if (evt.target.value === \"All Others\") {\r\n                        IsAllOtherOperatorValue = false;\r\n                    } else {\r\n                        IsAllOtherOperatorValue = true;\r\n                    }\r\n                    return { ...Package, DateOperator1: evt.target.value, IsAllOtherOperator: IsAllOtherOperatorValue };\r\n                }\r\n\r\n                else if (name === \"DateBound1\") {\r\n                    let invSpace, DateRatingErr;\r\n                    invSpace = CommonConfig.RegExp.number;\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        DateRatingErr = false;\r\n                    } else {\r\n                        DateRatingErr = true;\r\n                    }\r\n                    return { ...Package, DateBound1: evt.target.value, DateRatingError: DateRatingErr };\r\n                }\r\n\r\n                else if (name === \"DateOperator2\") {\r\n                    let IsOnlyOneOperatorValue;\r\n                    if (evt.target.value === \"One Operator Only\") {\r\n                        IsOnlyOneOperatorValue = false;\r\n                    } else {\r\n                        IsOnlyOneOperatorValue = true;\r\n                    }\r\n                    return { ...Package, DateOperator2: evt.target.value, IsOnlyOneOperator: IsOnlyOneOperatorValue };\r\n                } else if (name === \"DateBound2\") {\r\n                    let invSpace, DateRatingErr;\r\n                    invSpace = CommonConfig.RegExp.number;\r\n                    if (invSpace.test(evt.target.value)) {\r\n                        DateRatingErr = false;\r\n                    } else {\r\n                        DateRatingErr = true;\r\n                    }\r\n                    return { ...Package, DateBound2: evt.target.value, DateRatingError: DateRatingErr };\r\n                }\r\n            } else {\r\n                return { ...Package };\r\n            }\r\n        });\r\n        this.setState({ DateOperations: NewTextDetails }, function () {\r\n        });\r\n    }\r\n\r\n    checked = (isChecked, value) => {\r\n        console.log(\"checked\", isChecked);\r\n        this.setState({ IsRateable: isChecked });\r\n    }\r\n\r\n    selectType(value, type) {\r\n        console.log(\"selectType\", value, type);\r\n\r\n        if (type === 'ResponseWeightType') {\r\n            if (value === '' || value === null || value === undefined) {\r\n                this.setState({ ResponseWeightTypeError: true, ResponseWeightType: value });\r\n                this.show(\"ResponseWeightType\", true, \"ResponseWeightTypeError\", \"Select valid type\");\r\n            } else {\r\n                const NewTextDetails = this.state.NumberOperations.map((Package, index) => {\r\n                    return { ...Package, NumberRating: 0.00 };\r\n                });\r\n                const NewTextDetailsForDate = this.state.DateOperations.map((Package, index) => {\r\n                    return { ...Package, DateRating: 0.00 };\r\n                });\r\n                const NewTextDetailsForList = this.state.ListValue.map((Package, index) => {\r\n                    return { ...Package, Rating: 0.00 };\r\n                });\r\n                this.setState({ NumberOperations: NewTextDetails, DateOperations: NewTextDetailsForDate, ListValue: NewTextDetailsForList })\r\n                this.setState({ ResponseWeightTypeError: false, ResponseWeightType: value });\r\n                this.show(\"ResponseWeightType\", false, \"ResponseWeightTypeError\", \"Select valid type\");\r\n            }\r\n        }\r\n\r\n        if (type === 'diaplayDate') {\r\n            this.setState({ diaplayDate: value })\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n        if (e.target.name === 'effectiveDate') {\r\n            if (e.target.value === '' || e.target.value === null) {\r\n                this.setState({ effectiveDateError: true });\r\n                this.show(\"effectiveDate\", true, \"effectiveDateError\", \"Enter valid effective date\");\r\n            } else if (moment(e.target.value).format('YYYY-MM-DD') < moment().format('YYYY-MM-DD')) {\r\n                this.setState({ effectiveDateError: true });\r\n                this.show(\"effectiveDate\", true, \"effectiveDate\", \"Please enter valid effective date\");\r\n            } else {\r\n                this.setState({ effectiveDateError: false, effectiveDate: e.target.value });\r\n                this.show(\"effectiveDate\", false, \"effectiveDateError\", \"\");\r\n            }\r\n        }\r\n\r\n        if (e.target.name === 'fromDate') {\r\n            this.setState({ fromDate: e.target.value });\r\n        }\r\n\r\n        if (e.target.name === 'ToDate') {\r\n            this.setState({ ToDate: e.target.value });\r\n        }\r\n    }\r\n\r\n    show(field, condition, errorField, message) {\r\n        console.log(\"(field, condition, errorField, message)\", field, condition, errorField, message);\r\n        if (condition) {\r\n            if (document.getElementById(field))\r\n                document.getElementById(field).className = \"form-control is-invalid\";\r\n\r\n            if (document.getElementById(errorField))\r\n                document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\r\n        } else {\r\n            if (document.getElementById(field))\r\n                document.getElementById(field).className = \"form-control\";\r\n\r\n            if (document.getElementById(errorField))\r\n                document.getElementById(errorField).innerHTML = null;\r\n        }\r\n    }\r\n\r\n    searchByDateAndDisplayMode() {\r\n        try {\r\n            var dataToSend = {\r\n                RiskQuestionId: this.props.match.params.Id,\r\n                fromDate: CommonConfig.isEmpty(this.state.fromDate) ? '' : this.state.fromDate,\r\n                ToDate: CommonConfig.isEmpty(this.state.ToDate) ? '' : this.state.ToDate,\r\n                diaplayDate: CommonConfig.isEmpty(this.state.diaplayDate) ? '' : this.state.diaplayDate,\r\n            }\r\n            api.post('api/getHistoryDates', dataToSend).then(res => {\r\n                if (res.success) {\r\n                    console.log(\"getRiskQuestionHistory\", res.data);\r\n                    var newArr = [];\r\n                    for (var i = 0; i < res.data[0].length; i++) {\r\n                        newArr.push({\r\n                            QuestionCode: res.data[0][i].QuestionCode,\r\n                            RiskQuestion: res.data[0][i].RiskQuestion,\r\n                            QuestionGroup: res.data[0][i].QuestionGroup,\r\n                            ResponseWeightTypeName: res.data[0][i].ResponseType,\r\n                            StartDate: moment(res.data[0][i].StartDate).format('DD-MM-YYYY'),\r\n                            UpdatedOn: res.data[0][i].UpdatedOn,\r\n                            // RiskQuestionResponseWeightageHistoryId: res.data[0][i].RiskQuestionResponseWeightageHistoryId,\r\n                            IsRateable: res.data[0][i].IsRateable.data[0] === 0 ? 'No' : 'Yes',\r\n                            QuestionCategoryName: res.data[0][i].QuestionCategory,\r\n                            ResponseWeightType: res.data[0][i].ResponseWeightType,\r\n                            Qualifier: res.data[0][i].Qualifier,\r\n                            isCurrent: res.data[0][i].IsCurrent,\r\n                        })\r\n                        this.setState({ QuestionCode: res.data[0][i].QuestionCode });\r\n                    }\r\n                    console.log(\"getRiskQuestionHistory\", newArr);\r\n                    this.setState({ products: newArr });\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(\"getRiskQuestionHistoryErr\", error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"basic-header\">\r\n                    <h1>RiskQuestion History</h1>\r\n                </div>\r\n                <div style={{ marginTop: 10 }}>\r\n                    <Row>\r\n                        <Col md=\"1\" style={{ padding: 0, marginLeft: 15 }}>\r\n                            <b>Question Code</b>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <label>{this.state.QuestionCode}</label>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md=\"1\" style={{ padding: 0, marginLeft: 20 }}>\r\n                            <b>Effective Date</b>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Input type=\"date\" name=\"fromDate\" id=\"fromDate\" onChange={(e) => this.handleChange(e)} value={this.state.fromDate} />\r\n                        </Col>\r\n                        <Col md=\"1\" style={{ padding: 0, marginLeft: 20 }}>\r\n                            <b>To</b>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Input type=\"date\" name=\"ToDate\" id=\"ToDate\" onChange={(e) => this.handleChange(e)} value={this.state.ToDate} />\r\n                        </Col>\r\n                        <Col md=\"1\" style={{ padding: 0, marginLeft: 15 }}>\r\n                            <b>Display Mode</b>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <Input type=\"select\" name=\"diaplayDate\" id=\"diaplayDate\" onChange={(e) => this.selectType(e.target.value, 'diaplayDate')} value={this.state.diaplayDate}>\r\n                                <option value=''>Select display date</option>\r\n                                {this.state.diaplayDateArr.map((type, i) => {\r\n                                    return (<option value={type.StringMapName}>{type.StringMapName}</option>)\r\n                                })\r\n                                }\r\n                            </Input>\r\n                        </Col>\r\n                        <Col md=\"2\">\r\n                            <BTN color=\"success\" onClick={() => this.searchByDateAndDisplayMode()}><i class=\"fa fa-check\"></i>Search</BTN>{' '}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <div style={{ marginTop: 30 }}>\r\n                    <BootstrapTable\r\n                        keyField='StartDate'\r\n                        data={this.state.products}\r\n                        columns={this.state.cols}\r\n                        rowEvents={this.rowEvents}\r\n                        expandRow={this.expandRow}\r\n                    />\r\n                </div>\r\n                <Modal isOpen={this.state.isEdit} toggle={() => this.toggleEdit('save')}\r\n                    className={'modal-lg ' + this.props.className}>\r\n                    <ModalHeader toggle={() => this.toggleEdit('save')}>Risk Question</ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <Row>\r\n                            <Col md=\"4\">\r\n                                <b>Question Category:</b> {this.state.tempData.QuestionCategoryName}\r\n                            </Col>\r\n                            <Col md=\"4\">\r\n                                <b>Question Group:</b> {this.state.tempData.QuestionGroup}\r\n                            </Col>\r\n                            <Col md=\"4\">\r\n                                <b>Question Code:</b> {this.state.tempData.QuestionCode}\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row style={{ marginTop: 10 }}>\r\n                            <Col>\r\n                                <span style={{ fontSize: 20 }}><b>Question:</b> {this.state.tempData.RiskQuestion}</span>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: 10 }}>\r\n                            <Col>\r\n                                <b>Response Type:</b> {this.state.tempData.ResponseWeightTypeName}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: 10 }}>\r\n                            <Col md=\"2\">\r\n                                <b>Is Rateable?</b>\r\n                            </Col>\r\n                            <Col>\r\n                                <Input disabled={this.state.isView} type='checkbox' name='IsRateable' value='IsRateable' id='IsRateable' checked={(this.state.IsRateable)}\r\n                                    onClick={(e) => this.checked(e.target.checked)} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{ marginTop: 10 }}>\r\n                            <Col md=\"1\">\r\n                                <b>Type</b>\r\n                            </Col>\r\n                            <Col md=\"2\">\r\n                                <div className=\"input-box\">\r\n                                    <Input disabled={this.state.isView} type=\"select\" name=\"ResponseWeightType\" id=\"ResponseWeightType\" onChange={(e) => this.selectType(e.target.value, 'ResponseWeightType')} value={this.state.ResponseWeightType}>\r\n                                        <option value=''>Select Rating Type</option>\r\n                                        {this.state.systemEndorsementArr.map((type, i) => {\r\n                                            return (<option value={type.StringMapName}>{type.StringMapName}</option>)\r\n                                        })\r\n                                        }\r\n                                    </Input>\r\n                                    <em id=\"ResponseWeightTypeError\" className=\"error invalid-feedback\"></em>\r\n                                    {/* <em className=\"error invalid-feedback\" >Please enter mooring registration no</em> */}\r\n                                </div>\r\n                            </Col>\r\n                            <Col md=\"2\">\r\n                                <label>{this.state.effectivedate}</label>\r\n                            </Col>\r\n                            <Col md=\"3\">\r\n                                <Input disabled={this.state.isView} type=\"date\" name=\"effectiveDate\" id=\"effectiveDate\" onChange={(e) => this.handleChange(e)} value={this.state.effectiveDate}\r\n                                    min={moment().format('YYYY-MM-DD')}\r\n                                    max={moment().add(100, 'years').format('YYYY-MM-DD')}\r\n                                >\r\n                                </Input>\r\n                                <em id=\"effectiveDateError\" className=\"error invalid-feedback\"></em>\r\n                            </Col>\r\n                        </Row>\r\n                        <div>\r\n                            {(this.state.tempData.ResponseWeightTypeName === \"ListOfValues\") ?   /*<~~~~~~~~~~~LIST~~~~~~~~~~>*/\r\n                                <div>\r\n                                    <Row>\r\n                                        <Col md=\"2\">\r\n                                            <b>{this.state.ResponseWeightTypeName}</b>\r\n                                        </Col>\r\n                                        <Col md=\"3\">\r\n                                            <b>Response</b>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {this.state.ListValue.map((value, index) => {\r\n                                        return (\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                    {(this.state.IsRateable) ?\r\n                                                        <div>\r\n                                                            <Input disabled={this.state.isView} type=\"text\" name=\"Rating\" id=\"Rating\" value={value.Rating} onChange={this.ListValueValidate('Rating', index)}></Input>\r\n                                                            {(value.RatingError) ?\r\n                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                : (null)}\r\n                                                        </div>\r\n                                                        : (null)}\r\n                                                </Col>\r\n                                                <Col md=\"10\">\r\n                                                    <b>{value.Response}</b>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        )\r\n                                    }\r\n                                    )}\r\n                                </div>\r\n\r\n                                : (this.state.tempData.ResponseWeightTypeName === \"YesNo\") ?   /*<~~~~~~~~~~~YESNO~~~~~~~~~~>*/\r\n                                    <div>\r\n                                        <Row>\r\n                                            <Col md=\"2\">\r\n                                                <b>{this.state.ResponseWeightTypeName}</b>\r\n                                            </Col>\r\n                                            <Col md=\"3\">\r\n                                                <b>Response</b>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {this.state.ListValue.map((value, index) => {\r\n                                            return (\r\n                                                <Row>\r\n                                                    <Col md=\"2\">\r\n                                                        {(this.state.IsRateable) ?\r\n                                                            <div>\r\n                                                                <Input disabled={this.state.isView} type=\"text\" name=\"Rating\" id=\"Rating\" value={value.Rating} onChange={this.ListValueValidate('Rating', index)}></Input>\r\n                                                                {(value.RatingError) ?\r\n                                                                    <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                    : (null)}\r\n                                                            </div>\r\n                                                            : (null)}\r\n                                                    </Col>\r\n                                                    <Col md=\"3\">\r\n                                                        <b>{value.Response}</b>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            )\r\n                                        }\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    : (this.state.tempData.ResponseWeightTypeName === \"Number\" || this.state.tempData.ResponseWeightTypeName === \"Percentage\" || this.state.tempData.ResponseWeightTypeName === \"Amount\") ?   /*<~~~~~~~~~~~NUMBER~~~~~~~~~~>*/\r\n                                        <div>\r\n                                            <Row>\r\n                                                <Col md=\"2\">\r\n                                                    <b>{this.state.ResponseWeightTypeName}</b>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    <b>Operator 1</b>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    <b>Bound 1</b>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    <b>Operator 2</b>\r\n                                                </Col>\r\n                                                <Col md=\"2\">\r\n                                                    <b>Bound 2</b>\r\n                                                </Col>\r\n\r\n                                            </Row>\r\n                                            <div>\r\n                                                {this.state.NumberOperations.map((value, index) => {\r\n                                                    console.log(\"NumberOperations\", value);\r\n                                                    return (\r\n                                                        <div>\r\n                                                            {(value.isDeleted == true) ? (null) : (\r\n                                                                <Row>\r\n                                                                    <Col md=\"2\">\r\n                                                                        {(this.state.IsRateable) ?\r\n                                                                            <div className=\"input-box\">\r\n                                                                                <Row>\r\n                                                                                    <Col>\r\n                                                                                        <Input type=\"text\" name=\"NumberRating\" value={value.NumberRating} id=\"NumberRating\" onChange={this.NumberInputValidate('NumberRating', index)} />\r\n                                                                                        {(value.NumberRatingError) ?\r\n                                                                                            <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                                            : (null)}\r\n                                                                                    </Col>\r\n                                                                                </Row>\r\n                                                                            </div>\r\n                                                                            : (null)}\r\n                                                                    </Col>\r\n                                                                    <Col md=\"2\">\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input disabled={this.state.isView} type=\"select\" name=\"NumberOperator1\" onChange={this.NumberInputValidate('NumberOperator1', index)} value={value.NumberOperator1}>\r\n                                                                                <option value=''>Select Rating Type</option>\r\n                                                                                {this.state.NumberOperator1Arr.map((type, i) => {\r\n                                                                                    return (<option value={type.StringMapName}>{type.StringMapName}</option>)\r\n                                                                                })\r\n                                                                                }\r\n                                                                            </Input>\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                    <Col md=\"2\">\r\n                                                                        {(value.IsAllOtherOperator) ?\r\n                                                                            <div className=\"input-box\">\r\n                                                                                <Input type=\"text\" name=\"NumberBound1\" value={value.NumberBound1} onChange={this.NumberInputValidate('NumberBound1', index)}></Input>\r\n                                                                            </div>\r\n                                                                            : (null)}\r\n                                                                    </Col>\r\n                                                                    <Col md=\"2\">\r\n                                                                        {/* {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ? */}\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input disabled={this.state.isView} type=\"select\" name=\"NumberOperator2\" onChange={this.NumberInputValidate('NumberOperator2', index)} value={value.NumberOperator2}>\r\n                                                                                <option value=''>Select Rating Type</option>\r\n                                                                                {this.state.NumberOperator2Arr.map((type, i) => {\r\n                                                                                    return (<option value={type.value}>{type.label}</option>)\r\n                                                                                })\r\n                                                                                }\r\n                                                                            </Input>\r\n                                                                        </div>\r\n                                                                        {/* : (null)} */}\r\n                                                                    </Col>\r\n                                                                    <Col md=\"2\">\r\n                                                                        {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ?\r\n                                                                            <div className=\"input-box\">\r\n                                                                                <Input type=\"text\" name=\"NumberBound2\" value={value.NumberBound2} onChange={this.NumberInputValidate('NumberBound2', index)}></Input>\r\n                                                                            </div>\r\n                                                                            : (null)}\r\n                                                                    </Col>\r\n                                                                    {(value.IsAllOtherOperator) ?\r\n                                                                        <Col>\r\n                                                                            <a onClick={() => this.addRowToArray('Number')}>Add Row</a>\r\n                                                                            {(index !== 0) ?\r\n                                                                                <a onClick={() => this.removeRowToNumberArray(value, index)}>  Remove</a> : null\r\n                                                                            }\r\n                                                                        </Col>\r\n                                                                        : (null)}\r\n                                                                </Row>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        : (this.state.tempData.ResponseWeightTypeName === \"Date\" || this.state.tempData.ResponseWeightTypeName === \"Year\") ?   /*<~~~~~~~~~~~DATE~~~~~~~~~~>*/\r\n                                            <div>\r\n                                                <Row>\r\n                                                    <Col md=\"2\">\r\n                                                        <b>{this.state.ResponseWeightTypeName}</b>\r\n                                                    </Col>\r\n                                                    <Col md=\"2\">\r\n                                                        <b>Operator 1</b>\r\n                                                    </Col>\r\n                                                    <Col md=\"2\">\r\n                                                        <b>Bound 1</b>\r\n                                                    </Col>\r\n                                                    <Col md=\"2\">\r\n                                                        <b>Operator 2</b>\r\n                                                    </Col>\r\n                                                    <Col md=\"2\">\r\n                                                        <b>Bound 2</b>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <div>\r\n                                                    {this.state.DateOperations.map((value, index) => {\r\n                                                        return (\r\n                                                            <Row>\r\n                                                                <Col md=\"2\">\r\n                                                                    {(this.state.IsRateable) ?\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input type=\"text\" name=\"DateRating\" id=\"DateRating\"\r\n                                                                                value={value.DateRating}\r\n                                                                                onChange={this.DateInputValidate('DateRating', index)} />\r\n                                                                            {(value.DateRatingError) ?\r\n                                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                                : (null)}\r\n                                                                        </div>\r\n                                                                        : (null)}\r\n                                                                </Col>\r\n                                                                <Col md=\"2\">\r\n                                                                    <div className=\"input-box\">\r\n                                                                        <Input disabled={this.state.isView} type=\"select\" name=\"DateOperator1\" onChange={this.DateInputValidate('DateOperator1', index)} value={value.DateOperator1}>\r\n                                                                            <option value=''>Select Rating Type</option>\r\n                                                                            {this.state.DateOperator1Arr.map((type, i) => {\r\n                                                                                return (<option value={type.value}>{type.label}</option>)\r\n                                                                            })\r\n                                                                            }\r\n                                                                        </Input>\r\n                                                                    </div>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"2\">\r\n                                                                    {(value.IsAllOtherOperator) ?\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input type=\"text\" name=\"DateBound1\" value={value.DateBound1} onChange={this.DateInputValidate('DateBound1', index)}></Input>\r\n                                                                        </div>\r\n                                                                        : (null)}\r\n                                                                </Col>\r\n\r\n\r\n                                                                <Col md=\"2\">\r\n                                                                    {/* {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ? */}\r\n                                                                    <div className=\"input-box\">\r\n                                                                        <Input disabled={this.state.isView} type=\"select\" name=\"DateOperator2\" onChange={this.DateInputValidate('DateOperator2', index)} value={value.DateOperator2}>\r\n                                                                            <option value=''>Select Rating Type</option>\r\n                                                                            {this.state.DateOperator2Arr.map((type, i) => {\r\n                                                                                return (<option value={type.value}>{type.label}</option>)\r\n                                                                            })\r\n                                                                            }\r\n                                                                        </Input>\r\n                                                                    </div>\r\n                                                                    {/* : (null)} */}\r\n                                                                </Col>\r\n\r\n\r\n                                                                <Col md=\"2\">\r\n                                                                    {(value.IsAllOtherOperator && value.IsOnlyOneOperator) ?\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input type=\"text\" name=\"DateBound2\" value={value.DateBound2} onChange={this.DateInputValidate('DateBound2', index)}></Input>\r\n                                                                        </div>\r\n                                                                        : (null)}\r\n                                                                </Col>\r\n                                                                {(value.IsAllOtherOperator) ?\r\n                                                                    <Col>\r\n                                                                        <a onClick={() => this.addRowToArray('Date')}>Add Row</a>\r\n                                                                        {(index !== 0) ?\r\n                                                                            <a onClick={() => this.removeRowToDateArray(value, index)}>  Remove</a> : null\r\n                                                                        }\r\n                                                                    </Col>\r\n                                                                    : (null)}\r\n                                                            </Row>\r\n                                                        )\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            : (this.state.tempData.ResponseWeightTypeName === \"Text\") ?   /*<~~~~~~~~~~~TEXT~~~~~~~~~~>*/\r\n                                                <div>\r\n                                                    <Row>\r\n                                                        <Col md=\"2\">\r\n                                                            <b>{this.state.ResponseWeightTypeName}</b>\r\n                                                        </Col>\r\n                                                        <Col md=\"3\">\r\n                                                            <b>Operator</b>\r\n                                                        </Col>\r\n                                                        <Col md=\"3\">\r\n                                                            <b>Text for Comparison</b>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    <div>\r\n                                                        {this.state.textOperations.map((value, index) => {\r\n                                                            return (\r\n                                                                <Row>\r\n                                                                    <Col md=\"2\">\r\n                                                                        {(this.state.IsRateable) ?\r\n                                                                            <div className=\"input-box\">\r\n                                                                                <Input type=\"text\" name=\"TextRating\" id=\"TextRating\" value={value.TextRating} onChange={this.InputValidate('TextRating', index)} />\r\n                                                                                {(value.TextRatingError) ?\r\n                                                                                    <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                                    : (null)}\r\n                                                                            </div>\r\n                                                                            : (null)}\r\n                                                                    </Col>\r\n                                                                    <Col md=\"3\">\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input type=\"select\" name=\"systemEndorsementText\" onChange={this.InputValidate('TextOperator', index)} value={value.TextOperator}>\r\n                                                                                <option value=''>Select Rating Type</option>\r\n                                                                                {this.state.systemEndorsementTextArr.map((type, i) => {\r\n                                                                                    return (<option value={type.value}>{type.label}</option>)\r\n                                                                                })\r\n                                                                                }\r\n                                                                            </Input>\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                    <Col md=\"3\">\r\n                                                                        <div className=\"input-box\">\r\n                                                                            <Input type=\"text\" name=\"TextToCompare\" id=\"TextToCompare\" value={value.TextToCompare} onChange={this.InputValidate('TextToCompare', index)} />\r\n                                                                            {(value.TextToCompareError) ?\r\n                                                                                <em style={{ display: \"block\" }} className=\"error invalid-feedback\"> Please enter valid input </em>\r\n                                                                                : (null)}\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                    <Col>\r\n                                                                        <a onClick={() => this.addRowToArray('Text')}>Add Row</a>\r\n                                                                        {(index !== 0) ?\r\n                                                                            <a onClick={() => this.removeRowToArray(value, index)}>  Remove</a> : null\r\n                                                                        }\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            )\r\n                                                        })}\r\n                                                    </div>\r\n                                                </div>\r\n                                                : (null)\r\n                            }\r\n                        </div>\r\n                    </ModalBody>\r\n\r\n\r\n                    < ModalFooter >\r\n                        {(this.state.isView) ? (\r\n                            null\r\n                        ) : (\r\n                                <div>\r\n                                    <BTN color=\"success\" onClick={() => this.updateQuestion()}><i class=\"fa fa-check\"></i> Update</BTN>\r\n                                    <BTN style={{ marginLeft: 10 }} color=\"primary\" onClick={() => this.toggleEdit('save')}><i class=\"fa fa-close\"></i> Cancel</BTN>\r\n                                </div>\r\n                            )}\r\n                    </ModalFooter >\r\n                </Modal >\r\n\r\n                <Modal isOpen={this.state.isOpenForUpdate} toggle={() => this.toggleEditModel('save')}\r\n                    className={'modal-lg ' + this.props.className}>\r\n                    <ModalHeader toggle={() => this.toggleEditModel('save')}>Risk Question</ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <label>Values for this date {moment(this.state.effectiveDate).format('DD-MM-YYYY')} is already added for {this.state.tempData.RiskQuestion}, are you sure you want to update this record ?</label>\r\n                    </ModalBody>\r\n\r\n                    < ModalFooter >\r\n                        <BTN color=\"success\" onClick={() => this.updateQuestionModal()}><i class=\"fa fa-check\"></i> Yes</BTN>{' '}\r\n                        <BTN color=\"primary\" onClick={() => this.toggleEditModel('save')}><i class=\"fa fa-close\"></i> No</BTN>\r\n                    </ModalFooter >\r\n                </Modal >\r\n\r\n                <Modal isOpen={this.state.isDelet} toggle={() => this.toggleDelete('save')}\r\n                    className={'modal-lg ' + this.props.className}>\r\n                    <ModalHeader toggle={() => this.toggleDelete('save')}>Risk Question</ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <label>Are you sure want to delete this records ?</label>\r\n                    </ModalBody>\r\n\r\n                    < ModalFooter >\r\n                        <BTN color=\"success\" onClick={() => this.deleteModal(this.state.newVar)}><i class=\"fa fa-check\"></i> Yes</BTN>{' '}\r\n                        <BTN color=\"primary\" onClick={() => this.toggleDelete('save')}><i class=\"fa fa-close\"></i> No</BTN>\r\n                    </ModalFooter >\r\n                </Modal >\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default RiskQuestionHistory;"]},"metadata":{},"sourceType":"module"}