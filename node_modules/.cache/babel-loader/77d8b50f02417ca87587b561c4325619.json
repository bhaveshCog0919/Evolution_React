{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar $ = require('../internals/export');\n\nvar aFunction = require('../internals/a-function');\n\nvar anObject = require('../internals/an-object');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar createIteratorProxy = require('../internals/iterator-create-proxy');\n\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar IteratorProxy = createIteratorProxy(function (arg) {\n  var iterator = this.iterator;\n  var result, mapped, iteratorMethod, innerIterator;\n\n  while (true) {\n    if (innerIterator = this.innerIterator) {\n      result = anObject(this.innerNext.call(innerIterator));\n      if (!result.done) return result.value;\n      this.innerIterator = this.innerNext = null;\n    }\n\n    result = anObject(this.next.call(iterator, arg));\n    if (this.done = !!result.done) return;\n    mapped = callWithSafeIterationClosing(iterator, this.mapper, result.value);\n    iteratorMethod = getIteratorMethod(mapped);\n\n    if (iteratorMethod === undefined) {\n      throw TypeError('.flatMap callback should return an iterable object');\n    }\n\n    this.innerIterator = innerIterator = anObject(iteratorMethod.call(mapped));\n    this.innerNext = aFunction(innerIterator.next);\n  }\n});\n$({\n  target: 'Iterator',\n  proto: true,\n  real: true\n}, {\n  flatMap: function flatMap(mapper) {\n    return new IteratorProxy({\n      iterator: anObject(this),\n      mapper: aFunction(mapper),\n      innerIterator: null,\n      innerNext: null\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}