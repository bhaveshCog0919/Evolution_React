{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Policy/Account.js\";\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Menu } from 'primereact/menu';\nimport { Button as BTN } from 'primereact/button';\nimport { apiBase } from '../../utils/config';\nimport { Modal, ModalHeader, Col, Row, Input, Button, InputGroup, UncontrolledTooltip } from 'reactstrap';\nimport api from '../../utils/apiClient';\nimport APIConstant from '../../utils/constants';\nimport moment from 'moment';\nimport { CommonConfig } from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nvar IBAN = require('iban');\n\nconst headers = {\n  'Content-Type': 'application/json',\n  'Authorization': 'JWT fefege...',\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"*\",\n  'X-Requested-With': 'XMLHttpRequest'\n};\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\nclass Account extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPageString = e => {\n      let firstPage = e.first + 1;\n      let l = e.rows * (e.page + 1);\n      let lastPage = l < this.state.arr.length ? l : this.state.arr.length;\n      var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arr.length + ' records';\n      this.setState({\n        selectedPage: e.first,\n        str: str,\n        rowsPerPage: e.rows\n      });\n    };\n\n    this.generateReceipt = rowData => {\n      console.log(\"generateReceipt\", rowData);\n\n      if (rowData.IsReceiptGenerated === 1) {\n        this.setState({\n          toggleModal: true,\n          regenerateDoc: rowData\n        });\n      } else {\n        let data = {\n          PolicyAccountId: rowData.PolicyAccountId,\n          loggedInUserId: CommonConfig.loggedInUserId()\n        };\n        api.post('api/generateReciept', data).then(res => {\n          if (res.success) {\n            console.log(\"generateReceipt\", res.data);\n            toast.success(res.data.message);\n            setTimeout(function () {\n              window.location.reload();\n            }, 1000);\n          }\n        });\n      }\n    };\n\n    this.editAccount = (e, rowData) => {\n      this.setState({\n        PolicyAccountId: rowData.PolicyAccountId,\n        referenceId: rowData.ReferenceId\n      });\n\n      if (rowData.TransactionType == 'Debit') {\n        this.setState({\n          paymentAmountError: false,\n          newEntryDateError: false,\n          descriptionError: false,\n          paymentModeError: false,\n          chargeAmountError: false,\n          isEdit: true\n        });\n      } else if (rowData.TransactionType == 'Credit') {\n        this.setState({\n          newEntryDateError: false,\n          descriptionError: false,\n          paymentAmountError: false,\n          paymentModeError: false,\n          chargeAmountError: false,\n          isEdit: true\n        });\n      } else {\n        this.setState({\n          newEntryDateError: false,\n          descriptionError: false,\n          paymentAmountError: false,\n          paymentModeError: false,\n          chargeAmountError: false,\n          isEdit: true,\n          isAccountRecordEdit: true,\n          entryTypeError: false\n        });\n      }\n\n      setTimeout(() => {\n        if (rowData.TransactionType == 'Debit' || rowData.TransactionType == 'Credit') {\n          this.showJournalEntryPopup(rowData);\n        } else {\n          if (rowData.TransactionType == 'Payment') {\n            this.showMakePaymentPopup(rowData);\n          } else {\n            this.showReturnPaymentPopup(rowData);\n          }\n        }\n      }, 100);\n    };\n\n    this.showJournalEntryPopup = rowData => {\n      if (rowData === undefined) {\n        this.resetAccountForm();\n      } else {\n        this.setState({\n          PolicyAccountId: rowData.PolicyAccountId,\n          newEntryDate: moment(rowData.TransactionDate, 'DD/MM/YYYY').format(\"YYYY-MM-DD\"),\n          transactionType: rowData.TransactionType,\n          referenceId: rowData.ReferenceId,\n          description: rowData.Description,\n          chargeAmount: rowData.ChargeAmount,\n          chargeFee: rowData.ChargeFeeAmount,\n          totalChargeAmount: rowData.TotalChargeAmount,\n          paymentAmount: rowData.PaymentAmount,\n          paymentMode: rowData.PaymentModeName,\n          paymentStatus: rowData.PaymentStatus,\n          note: rowData.Note,\n          isMakePayment: false,\n          isReturnPayment: false\n        });\n        this.calculateBalanceAFTPay();\n      }\n\n      this.setState({\n        toggleNewEntryModal: true,\n        accountData: rowData\n      });\n    };\n\n    this.showDeletePaymentPopup = (e, rowData) => {\n      this.setState({\n        toggleModalDel: true,\n        delPolicyId: rowData\n      });\n    };\n\n    this.deleteAccount = () => {\n      // console.log('deleteAccount state', this.state.delPolicyId.TransactionType);\n      // return;\n      let data = {\n        PolicyAccountId: this.state.delPolicyId.PolicyAccountId,\n        loggedInUserId: CommonConfig.loggedInUserId(),\n        DocumentId: this.state.delPolicyId.DocumentId\n      };\n\n      try {\n        api.post('api/deleteAccountById', data).then(res => {\n          if (res.success) {\n            if (res.data.success) {\n              if (this.state.delPolicyId.TransactionType == 'Payment') {\n                let data = {\n                  PolicyAccountId: this.state.delPolicyId.PolicyAccountId,\n                  loggedInUserId: CommonConfig.loggedInUserId()\n                };\n                api.post('api/updateTransactionOutstanding', data).then(response => {\n                  this.setState({\n                    toggleModalDel: false,\n                    delPolicyId: ''\n                  });\n                  toast.success(res.data.message);\n                  setTimeout(function () {\n                    window.location.reload();\n                  }, 1000);\n                });\n              } else {\n                this.setState({\n                  toggleModalDel: false,\n                  delPolicyId: ''\n                });\n                toast.success(res.data.message);\n                setTimeout(function () {\n                  window.location.reload();\n                }, 1000);\n              }\n            }\n          }\n        }).catch(err => {\n          console.log(\"err..\", err);\n        });\n      } catch (err) {\n        console.log(\"err..\", err);\n      }\n    };\n\n    this.handleDateChange = (e, type) => {\n      this.setState({\n        [type]: e\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n      let nameRegExp = CommonConfig.RegExp.nameWithSpace;\n      let numberRegExp = CommonConfig.RegExp.number;\n      let decimalRegExp = CommonConfig.RegExp.decimalWithOne;\n      let allowAllWithSpace = CommonConfig.RegExp.allowAllWithSpace; // let cardnumRegExp = /[^0-9]/;\n      // \"^(?:(?<visa>4[0-9]{12}(?:[0-9]{3})?)|\" +\n      // \"(?<mastercard>5[1-5][0-9]{14})|\" +\n      // \"(?<discover>6(?:011|5[0-9]{2})[0-9]{12})|\" +\n      // \"(?<amex>3[47][0-9]{13})|\" +\n      // \"(?<diners>3(?:0[0-5]|[68][0-9])?[0-9]{11})|\" +\n      // \"(?<jcb>(?:2131|1800|35[0-9]{3})[0-9]{11}))$\"\n\n      let cvvRegExp = /^[0-9]{3,4}$/;\n      let value = e.target.value;\n\n      if (e.target.name === 'newEntryDate') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            newEntryDateError: true\n          });\n          this.show(\"newEntryDate\", true, \"newEntryDateError\", \"Please enter date\");\n        } else {\n          this.setState({\n            newEntryDateError: false,\n            newEntryDate: e.target.value\n          });\n          this.show(\"newEntryDate\", false, \"newEntryDateError\", \"\");\n        }\n      }\n\n      if (e.target.name === 'chargeAmount') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            chargeAmountError: true\n          });\n          this.show(\"chargeAmount\", true, \"chargeAmountError\", \"Please enter charge fees \");\n        } else {\n          let nameRegEx = decimalRegExp;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              chargeAmountError: true\n            });\n            this.show(\"chargeAmount\", true, \"chargeAmountError\", \"Please enter valid charge fees\");\n          } else {\n            this.setState({\n              chargeAmountError: false,\n              chargeAmount: e.target.value\n            });\n            this.show(\"chargeAmount\", false, \"chargeAmountError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'paymentAmount') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            paymentAmountError: true\n          });\n          this.show(\"paymentAmount\", true, \"paymentAmountError\", \"Please enter charge fees \");\n        } else {\n          let nameRegEx = decimalRegExp;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              paymentAmountError: true\n            });\n            this.show(\"paymentAmount\", true, \"paymentAmountError\", \"Please enter valid charge fees\");\n          } else {\n            this.setState({\n              paymentAmountError: false,\n              paymentAmount: e.target.value\n            });\n            this.show(\"paymentAmount\", false, \"paymentAmountError\", \"\");\n          }\n        }\n\n        setTimeout(() => {\n          if (this.state.isTransferFundPopup) {\n            this.calculateTransferFundPremium();\n          } else {\n            this.calculatePremium();\n          }\n        }, 500);\n      }\n\n      if (e.target.name === 'chargeFee') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            chargeFeeError: true\n          });\n          this.show(\"chargeFee\", true, \"chargeFeeError\", \"Please enter charge fees \");\n        } else {\n          let nameRegEx = numberRegExp;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              chargeFeeError: true\n            });\n            this.show(\"chargeFee\", true, \"chargeFeeError\", \"Please enter valid charge fees\");\n          } else {\n            this.setState({\n              chargeFeeError: false,\n              chargeFee: e.target.value\n            });\n            this.show(\"chargeFee\", false, \"chargeFeeError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'description') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            descriptionError: true\n          });\n          this.show(\"description\", true, \"descriptionError\", \"Please enter description \");\n        } else {\n          let nameRegEx = allowAllWithSpace;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              descriptionError: true\n            });\n            this.show(\"description\", true, \"descriptionError\", \"Please enter valid description\");\n          } else {\n            this.setState({\n              descriptionError: false,\n              description: e.target.value\n            });\n            this.show(\"description\", false, \"descriptionError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'accountName') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            accountNameError: true\n          });\n          this.show(\"accountName\", true, \"accountNameError\", \"Please enter Account Name \");\n        } else {\n          let nameRegEx = CommonConfig.RegExp.nameWithSpace;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              accountNameError: true\n            });\n            this.show(\"accountName\", true, \"accountNameError\", \"Please enter valid Account Name\");\n          } else {\n            this.setState({\n              accountNameError: false,\n              accountName: e.target.value\n            });\n            this.show(\"accountName\", false, \"accountNameError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'bankName') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            bankNameError: true\n          });\n          this.show(\"bankName\", true, \"bankNameError\", \"Please enter Bank Name\");\n        } else {\n          let nameRegEx = CommonConfig.RegExp.nameWithSpace;\n          let name = e.target.value;\n\n          if (!nameRegEx.test(name)) {\n            this.setState({\n              bankNameError: true\n            });\n            this.show(\"bankName\", true, \"bankNameError\", \"Please enter valid Bank Name\");\n          } else {\n            this.setState({\n              bankNameError: false,\n              bankName: e.target.value\n            });\n            this.show(\"bankName\", false, \"bankNameError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'IBAN') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            IBANError: true\n          });\n          this.show(\"IBAN\", true, \"IBANError\", \"Please enter IBAN Number\");\n        } else {\n          // let nameRegEx = CommonConfig.RegExp.alphaNumeric;\n          let name = e.target.value;\n\n          if (IBAN.isValid(name)) {\n            this.setState({\n              IBANError: false,\n              IBAN: name\n            });\n            this.show(\"IBAN\", false, \"IBANError\", \"\");\n          } else {\n            this.setState({\n              IBANError: true\n            });\n            this.show(\"IBAN\", true, \"IBANError\", \"Please enter valid IBAN Number\");\n          }\n        }\n      }\n\n      if (e.target.name === 'BIC') {\n        this.setState({\n          BICError: false\n        });\n        /*if (CommonConfig.isEmpty(e.target.value)) {\n           this.setState({ BICError: true });\n           this.show(\"BIC\", true, \"BICError\", \"Please enter BIC Number\");\n         } else {\n           let nameRegEx = CommonConfig.RegExp.alphaNumeric;\n           let name = e.target.value;\n           if (!nameRegEx.test(name)) {\n             this.setState({ BICError: true });\n             this.show(\"BIC\", true, \"BICError\", \"Please enter valid BIC Number\");\n           } else {\n             if (e.target.value.length < 8 || e.target.value.length > 11) {\n               this.setState({ BICError: true, BIC: e.target.value });\n               this.show(\"BIC\", true, \"BICError\", \"BIC number must be between 8 to 11 Characters\");\n             } else {\n               this.setState({ BICError: false, BIC: e.target.value });\n               this.show(\"BIC\", false, \"BICError\", \"\");\n             }\n           }\n         }*/\n      }\n\n      if (e.target.name === 'CardholderName') {\n        if (CommonConfig.isEmpty(value)) {\n          this.setState({\n            CardholderNameError: true\n          });\n          this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter CardholderName\");\n        } else {\n          if (!nameRegExp.test(value)) {\n            this.setState({\n              CardholderNameError: true\n            });\n            this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter valid CardholderName\");\n          } else {\n            this.setState({\n              CardholderNameError: false,\n              CardholderName: value\n            });\n            this.show(\"CardholderName\", false, \"CardholderNameError\", \"\");\n          }\n        }\n      }\n\n      if (e.target.name === 'CardNumber') {\n        if (CommonConfig.isEmpty(value)) {\n          this.setState({\n            CardNumberError: true\n          });\n          this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter CardNumber\");\n        } else {\n          // if (!cardnumRegExp.test(value)) {\n          //     this.setState({ CardNumberError: true });\n          //     this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter valid CardNumber\");\n          //   } else {\n          this.setState({\n            CardNumberError: false,\n            CardNumber: value\n          });\n          this.show(\"CardNumber\", false, \"CardNumberError\", \"\"); // }\n        }\n      }\n\n      if (e.target.name === 'CVV') {\n        if (CommonConfig.isEmpty(value)) {\n          this.setState({\n            CVVError: true\n          });\n          this.show(\"CVV\", true, \"CVVError\", \"Please enter CVV\");\n        } else {\n          if (!cvvRegExp.test(value)) {\n            this.setState({\n              CVVError: true\n            });\n            this.show(\"CVV\", true, \"CVVError\", \"Please enter valid CVV\");\n          } else {\n            this.setState({\n              CVVError: false,\n              CVV: value\n            });\n            this.show(\"CVV\", false, \"CVVError\", \"\");\n          }\n        }\n      }\n\n      this.calculateBalanceAFTPay();\n      this.totalChargeAmt();\n    };\n\n    this.actionFormatter = (cell, rowData) => {\n      console.log(\"actionFormatter > \", cell, rowData, this);\n      var tempActions = rowData.Actions;\n      var actions = CommonConfig.isEmpty(tempActions) ? [] : tempActions.split(',');\n      console.log('actionFormatter > actions > ', actions);\n      var accountRecordMenu = [];\n\n      if (actions.length) {\n        for (var i = 0; i < actions.length; i++) {\n          if (actions[i] != '') {\n            accountRecordMenu.push({\n              label: actions[i],\n              data: rowData,\n              UniqueReferenceId: rowData.UniqueReferenceId\n            });\n          }\n        }\n      }\n\n      var path = apiBase + \"\" + rowData.URL;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'Account' + rowData.Id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1969,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(BTN, {\n        type: \"button\",\n        icon: \"pi pi-eye\",\n        className: \"p-button-primary\",\n        tooltip: \"View\",\n        tooltipOptions: {\n          position: 'bottom'\n        },\n        style: {\n          marginRight: '.5em'\n        },\n        onClick: e => this.editAccount(e, rowData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1970,\n          columnNumber: 17\n        }\n      }), accountRecordMenu.length ? /*#__PURE__*/React.createElement(Input, {\n        type: \"select\",\n        style: {\n          width: '40%',\n          display: 'inline-block'\n        },\n        name: \"accountRecord\" + rowData.Id,\n        id: \"accountRecord\" + rowData.Id,\n        onChange: e => this.accountRecordActions(e.target.value, rowData, false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1974,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1979,\n          columnNumber: 25\n        }\n      }, \"Select\"), accountRecordMenu.map((type, i) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: type.label,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1982,\n            columnNumber: 41\n          }\n        }, type.label);\n      })) : null);\n    };\n\n    this.handleOnExpand = (row, isExpand, rowIndex, e) => {\n      try {\n        if (isExpand) {\n          let data = {\n            UniqueReferenceId: row.UniqueReferenceId\n          };\n          api.post('api/getChildAccountRecords', data).then(res => {\n            this.setState({\n              childAccountData: []\n            });\n            var tempChildAccountData = res.data[0];\n            console.log(\"getChildAccountRecords\", tempChildAccountData);\n\n            if (res.success) {\n              tempChildAccountData.forEach(function (element) {\n                var tempActions = element.Menu;\n                var childActions = CommonConfig.isEmpty(tempActions) ? [] : tempActions.split(',');\n                console.log('handleOnExpand > childActions > ', childActions);\n                var childAccountRecordMenu = [];\n\n                if (childActions.length) {\n                  for (var i = 0; i < childActions.length; i++) {\n                    if (childActions[i] != '') {\n                      childAccountRecordMenu.push({\n                        label: childActions[i],\n                        UniqueReferenceId: element.UniqueReferenceId\n                      });\n                    }\n                  }\n                }\n\n                element.Actions = childAccountRecordMenu;\n                element.CurrencySymbol = row.CurrencySymbol;\n                element.Path = apiBase + \"\" + element.URL;\n              });\n              setTimeout(() => {\n                this.setState({\n                  childAccountData: tempChildAccountData\n                });\n              }, 500);\n            } else {\n              console.log(\"getChildAccountRecords > error 3\", res);\n            }\n          }).catch(err => {\n            this.setState({\n              childAccountData: []\n            });\n            console.log(\"getChildAccountRecords > error 2\", err);\n          });\n        }\n      } catch (error) {\n        console.log(\"handleOnExpand > Err\", error);\n      }\n    };\n\n    this.expandRow = {\n      onlyOneExpanding: true,\n      showExpandColumn: true,\n      expandByColumnOnly: true,\n      parentClassName: (isExpanded, row, rowIndex) => {\n        return 'parent-expand-foo';\n      },\n      onExpand: this.handleOnExpand,\n      renderer: row => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2055,\n          columnNumber: 13\n        }\n      }, this.state.childAccountData.length > 0 ? /*#__PURE__*/React.createElement(\"table\", {\n        width: '100%',\n        style: {\n          border: 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2058,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2059,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2060,\n          columnNumber: 29\n        }\n      }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2061,\n          columnNumber: 29\n        }\n      }, \"Txn Date\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2062,\n          columnNumber: 29\n        }\n      }, \"Transaction\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2063,\n          columnNumber: 29\n        }\n      }, \"Reference Id\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2064,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2065,\n          columnNumber: 29\n        }\n      }, \"Amount\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2066,\n          columnNumber: 29\n        }\n      }, \"Payment Mode\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2067,\n          columnNumber: 29\n        }\n      }, \"Added By\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2068,\n          columnNumber: 29\n        }\n      }, \"Outstanding\"), /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2069,\n          columnNumber: 29\n        }\n      }, \"Actions\")), this.state.childAccountData.map((accountEntry, i) => {\n        console.log(\"childAccountData > \" + i + \" > \", accountEntry);\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2075,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2076,\n            columnNumber: 41\n          }\n        }, i + 1), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2077,\n            columnNumber: 41\n          }\n        }, moment(accountEntry.TransactionDate).format(CommonConfig.dateFormat.dateOnly)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2078,\n            columnNumber: 41\n          }\n        }, accountEntry.ClientTransactionType), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2079,\n            columnNumber: 41\n          }\n        }, accountEntry.UniqueReferenceId), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2080,\n            columnNumber: 41\n          }\n        }, accountEntry.Description), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2081,\n            columnNumber: 41\n          }\n        }, accountEntry.TransactionType == 'Payment' || accountEntry.TransactionType == 'ReturnPayment' ? /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            float: 'right'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2085,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: accountEntry.CurrencySymbol,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2086,\n            columnNumber: 62\n          }\n        }), CommonConfig.isEmpty(accountEntry.PaymentAmount) ? '' : accountEntry.PaymentAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")) : /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            float: 'right'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2090,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: accountEntry.CurrencySymbol,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2091,\n            columnNumber: 62\n          }\n        }), CommonConfig.isEmpty(accountEntry.TotalChargeAmount) ? '' : accountEntry.TotalChargeAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2097,\n            columnNumber: 41\n          }\n        }, accountEntry.TransactionType == 'Payment' || accountEntry.TransactionType == 'ReturnPayment' ? accountEntry.PaymentMode : 'N/A'), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2100,\n            columnNumber: 41\n          }\n        }, accountEntry.CreatedByName, (CommonConfig.isEmpty(accountEntry.CreatedOn) ? '' : \" (\" + moment(accountEntry.CreatedOn).format(CommonConfig.dateFormat.dateTime)) + \")\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2107,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            float: 'right'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2108,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: accountEntry.CurrencySymbol,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2109,\n            columnNumber: 50\n          }\n        }), CommonConfig.isEmpty(accountEntry.Outstanding) ? '0' : accountEntry.Outstanding.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2113,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"childRccountRecordMenu\" + accountEntry.Id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2114,\n            columnNumber: 45\n          }\n        }, accountEntry.IsLocked ? /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2116,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          style: {\n            fontSize: '30px',\n            verticalAlign: 'sub',\n            color: 'red'\n          },\n          className: \"pi pi-lock\",\n          href: \"#\",\n          id: \"LockedTooltip\" + accountEntry.BReference,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2117,\n            columnNumber: 57\n          }\n        }), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n          placement: \"top\",\n          target: \"LockedTooltip\" + accountEntry.BReference,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2118,\n            columnNumber: 57\n          }\n        }, accountEntry.BReference)) : null, /*#__PURE__*/React.createElement(BTN, {\n          type: \"button\",\n          icon: \"pi pi-eye\",\n          className: \"p-button-primary\",\n          tooltip: \"View\",\n          tooltipOptions: {\n            position: 'bottom'\n          },\n          onClick: e => this.editAccount(e, accountEntry),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2124,\n            columnNumber: 49\n          }\n        }), accountEntry.ClientTransactionType !== 'Contra' && accountEntry.ClientTransactionType !== 'Short Write Off' && accountEntry.TransactionType === 'Payment' ? /*#__PURE__*/React.createElement(BTN, {\n          type: \"button\",\n          icon: \"pi pi-file\",\n          className: \"p-button-primary\",\n          tooltip: \"Generate Receipt of Payment\",\n          tooltipOptions: {\n            position: 'bottom'\n          },\n          style: {\n            marginRight: '.5em'\n          },\n          onClick: e => this.generateReceipt(accountEntry),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2128,\n            columnNumber: 53\n          }\n        }) : null, accountEntry.TransactionType === 'Payment' ? CommonConfig.isEmpty(accountEntry.IsReceiptGenerated) ? null : /*#__PURE__*/React.createElement(BTN, {\n          type: \"button\",\n          icon: \"pi pi-eye\",\n          className: \"p-button-warning\",\n          tooltip: \"View Receipt of Payment\",\n          tooltipOptions: {\n            position: 'bottom'\n          },\n          style: {\n            marginRight: '.5em'\n          },\n          onClick: e => window.open(accountEntry.Path, \"_blank\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2134,\n            columnNumber: 57\n          }\n        }) : null, accountEntry.Actions.length ? /*#__PURE__*/React.createElement(Input, {\n          type: \"select\",\n          style: {\n            width: '40%',\n            display: 'inline-block'\n          },\n          name: \"childRccountRecord\" + accountEntry.Id,\n          id: \"childRccountRecord\" + accountEntry.Id,\n          onChange: e => this.accountRecordActions(e.target.value, accountEntry, true),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2140,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2145,\n            columnNumber: 57\n          }\n        }, \"Select\"), accountEntry.Actions.map((type, j) => {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            value: type.label,\n            key: j,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 2148,\n              columnNumber: 73\n            }\n          }, type.label);\n        })) : null)));\n      })) : /*#__PURE__*/React.createElement(\"small\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2168,\n          columnNumber: 25\n        }\n      }, \"No Record for this transaction.\"))\n    };\n\n    this.accountRecordActions = (type, rowData, isAccountChildEntry) => {\n      try {\n        console.log(\"actionFormatter > accountRecordActions > \", type, rowData, isAccountChildEntry);\n\n        if (type == 'Make Payment') {\n          this.getPolicyOutstandingTransaction(rowData);\n        } else if (type == 'Short Write Off') {\n          var isConfirm = window.confirm(\"Are you sure you wants to Short Write Off \" + rowData.Balance + \" amount?\");\n\n          if (isConfirm == true) {\n            this.shortWriteoff(rowData.UniqueReferenceId, rowData.Balance);\n          }\n        } else if (type == 'Return Payment') {\n          this.setState({\n            returnPaymentData: rowData\n          });\n          setTimeout(() => {\n            this.showReturnPaymentPopup();\n          }, 100);\n        } else if (type == 'Transfer Fund') {\n          this.getAccountTransferFund(rowData);\n        } else if (type == 'Contra' || type == 'Cancel Payment' || type == 'Bounce Cheque' || type == 'Bank Transfer Failed' || type == 'Credit Card Declined') {\n          var isConfirm = window.confirm(\"Are you sure you wants to \" + type + \" #\" + rowData.UniqueReferenceId + \"?\");\n\n          if (isConfirm == true) {\n            this.processAccountEntry(type, rowData);\n          }\n        } // Dropdown action to default 'Select';\n\n\n        if (isAccountChildEntry) {\n          if (document.getElementsByName('childRccountRecord' + rowData.Id)) {\n            document.getElementsByName('childRccountRecord' + rowData.Id)[0].value = '';\n          }\n        } else {\n          if (document.getElementsByName('accountRecord' + rowData.Id)) {\n            document.getElementsByName('accountRecord' + rowData.Id)[0].value = '';\n          }\n        }\n      } catch (error) {\n        console.log(\"accountRecordActions > error \", error);\n      }\n    };\n\n    this.processAccountEntry = (type, rowData) => {\n      try {\n        if (rowData.UniqueReferenceId) {\n          let data = {\n            UniqueReferenceId: rowData.UniqueReferenceId,\n            AccountActionType: type,\n            CurrentUser: CommonConfig.loggedInUserId()\n          };\n          api.post('api/processAccountEntry', data).then(res => {\n            console.log(\"processAccountEntry > res\", res);\n\n            if (res.success) {\n              console.log(\"processAccountEntry > response > data\", res.data);\n              toast.success(type + \" successfully.\");\n              setTimeout(function () {\n                window.location.reload();\n              }, 1000);\n            } else {\n              toast.error('Account record is not relevent for ' + type + ' action.');\n            }\n          }).catch(err => {\n            console.log(\"processAccountEntry error\", err);\n            toast.error(err);\n          });\n        } else {\n          toast.error('Account record is not relevent for ' + type + ' action.');\n        }\n      } catch (error) {\n        console.log(\"processAccountEntry > error \", error);\n        toast.error(error);\n      }\n    };\n\n    let columns = [// { dataField: \"SequenceNumber\", text: \"#\" },\n    {\n      dataField: \"TransactionDate\",\n      text: \"Txn Date\"\n    }, {\n      dataField: \"Narration\",\n      text: \"Transaction\"\n    }, {\n      dataField: \"UniqueReferenceId\",\n      text: \"Reference ID\"\n    }, {\n      dataField: \"ClientTransactionType\",\n      text: \"Description\"\n    }, {\n      dataField: \"AmountCharge\",\n      text: \"Amount Charged\",\n      formatter: this.formatAmountChargedData\n    }, {\n      dataField: \"TotalPaymentAmount\",\n      text: \"Payment Amount\",\n      formatter: this.formatPaymentData\n    }, // { dataField: \"PaymentMode\", text: \"Payment Mode\" },\n    {\n      dataField: \"CreatedBy\",\n      text: \"Added By\"\n    }, {\n      dataField: \"Balance\",\n      text: \"Balance\",\n      formatter: this.formatBalanceData\n    }, {\n      dataField: \"Action\",\n      text: \"Actions\",\n      formatter: this.actionFormatter,\n      edit: this.editAccount,\n      accountRecordActions: this.accountRecordActions\n    }];\n    this.state = {\n      LanguageId: props.i18n.language === 'en' ? 'en-GB' : props.i18n.language === 'es' ? 'es-ES' : props.i18n.language === 'ie' ? 'en-IE' : props.i18n.language,\n      policyAccountList: [],\n      PolicyComputation: '',\n      isEdit: false,\n      EntityBankDetailId: '',\n      brand: null,\n      colors: null,\n      delPolicyId: [],\n      toggleModalDel: false,\n      toggleModalAdd: false,\n      cols: columns,\n      arr: [],\n      rowData: '',\n      selectedPage: 0,\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      str: '',\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      globalFilter: null,\n      toggleNewEntryModal: false,\n      toggleBnkDetailsModal: false,\n      policyNumber: props.PolicyNumber,\n      policyType: props.PolicyType,\n      policyHolder: props.PolicyHolder,\n      policyId: '',\n      EntityId: '',\n      EntityType: '',\n      referenceId: '',\n      PolicyAccountId: \"\",\n      accountData: \"\",\n      newEntryDate: moment().format('DD-MM-YYYY'),\n      newEntryDateError: false,\n      transactionType: 'Debit',\n      description: '',\n      descriptionError: true,\n      chargeAmount: 0,\n      chargeAmountError: true,\n      chargeFee: 0,\n      chargeFeeError: '',\n      totalChargeAmount: 0,\n      totalChargeAmountError: '',\n      paymentAmount: 0,\n      paymentAmountError: true,\n      paymentMode: '',\n      paymentModeError: true,\n      paymentDue: 0,\n      paymentStatus: '',\n      paymentStatusError: true,\n      note: '',\n      addedBy: '',\n      addedDate: '',\n      updatedBy: '',\n      updatedDate: '',\n      paymentModearr: [],\n      returnPaymentModearr: [],\n      paymentStatusarr: [],\n      isMakePayment: false,\n      isReturnPayment: false,\n      country: '',\n      IBAN: '',\n      IBANError: true,\n      journalEntry: '',\n      journalEntryError: true,\n      journalDebitData: [],\n      BIC: '',\n      BICError: false,\n      bankCountry: '',\n      bankCountryError: true,\n      countryList: [],\n      bankName: '',\n      bankNameError: true,\n      accountName: '',\n      accountNameError: true,\n      bankDetailsRes: [],\n      CurrencySymbol: '',\n      calculateBalanceAFTPay: 0,\n      TransactionType: '',\n      toggleModal: false,\n      regenerateDoc: [],\n      outstanding: 0,\n      existOutstanding: 0,\n      updatedPremium: 0,\n      updatedPremiumAdminFee: 0,\n      updatedPremiumLevy: 0,\n      updatedPremiumLessLevy: 0,\n      showCalculation: false,\n      isAccountRecordEdit: false,\n      Currency: 'Euro',\n      CardholderName: '',\n      CardNumber: '',\n      CardType: 'VISA',\n      ExpiryMonth: '1',\n      ExpiryYear: '2020',\n      CVV: '',\n      IsSelectedCard: 0,\n      RenewalDate: '',\n      Forename: '',\n      Surname: '',\n      EmailId: '',\n      ContactTelephoneNumber: '',\n      CardholderNameError: false,\n      CardNumberError: false,\n      CardTypeError: false,\n      ExpiryMonthError: false,\n      ExpiryYearError: false,\n      CVVError: false,\n      isPaymentPopup: false,\n      SystemOutstandingTransactions: [],\n      OutstandingTransactions: [],\n      entryType: '',\n      entryTypeError: true,\n      journalDebitData: [],\n      journalCreditData: [],\n      IsLapsePolicy: 0,\n      DaysOverdue: 0,\n      RenewalDate: '',\n      IsLapsePolicyPopup: false,\n      lapsePolicyNote: '',\n      isGenerateRenewal: 0,\n      PremiumType: '',\n      isPolicyRenewal: 0,\n      expandedRows: null,\n      childAccountData: [],\n      subAccMenu: false,\n      returnPaymentData: {},\n      isTransferFundPopup: false,\n      transferFundData: {},\n      PolicyOutstandingTransactions: [],\n      SystemPolicyOutstandingTransactions: [],\n      paymentAmountRemains: 0\n    };\n    this.onColumnToggle = this.onColumnToggle.bind(this);\n    this.actionTemplate = this.actionTemplate.bind(this); // this.export = this.export.bind(this);\n\n    /*\n    let columns = [\n      { field: \"SequenceNumber\", header: \"#\", sortable: true, filter: true, id: 0, style: { width: '2%' }, expander: true },\n      { field: \"TransactionDate\", header: \"Txn Date\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1, },\n      { field: \"Narration\", header: \"Transaction\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1, },\n      { field: \"UniqueReferenceId\", header: \"Txn ID\", sortable: true, filter: true, filterMatchMode: 'contains', id: 2, },\n      { field: \"ClientTransactionType\", header: \"Description\", sortable: true, filter: true, filterMatchMode: 'contains', id: 3, },\n      { body: this.formatAmountChargedData.bind(this), field: \"AmountCharge\", header: \"Amount Charged\", sortable: true, filter: true, filterMatchMode: 'contains', id: 4 },\n      { body: this.formatPaymentData.bind(this), field: \"PaymentAmount\", header: \"Payment Amount\", sortable: true, filter: true, filterMatchMode: 'contains', id: 5 },\n      { field: \"PaymentMode\", header: \"Payment Mode(Status)\", sortable: true, filter: true, filterMatchMode: 'contains', id: 6 },\n      { field: \"CreatedBy\", header: \"Added By\", sortable: true, filter: true, filterMatchMode: 'contains', id: 7 },\n      // { field: \"UpdatedBy\", header: \"Updated by\", sortable: true, filter: true, filterMatchMode: 'contains', id: 8 },\n      { body: this.formatBalanceData.bind(this), field: \"Balance\", header: \"Balance\", sortable: true, filter: true, filterMatchMode: 'contains', id: 9 },\n      { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, filterMatchMode: 'contains', id: 10, style: { width: '12%' } }\n    ];*/\n\n    /*this.colOptions = [];\n    for (let col of columns) {\n      this.colOptions.push({ label: col.header, value: col });\n    }*/\n  }\n\n  componentDidMount() {\n    this.setState({\n      newEntryDate: moment().format('YYYY-MM-DD')\n    });\n\n    if (this.props.match.params.constructor === Object && Object.keys(this.props.match.params).length !== 0) {\n      this.setState({\n        policyId: this.props.match.params.id,\n        EntityId: this.props.EntityId,\n        EntityType: this.props.EntityType,\n        CurrencySymbol: this.props.CurrencySymbol,\n        RenewalDate: this.props.RenewalDate,\n        Currency: this.props.currency\n      });\n    }\n\n    this.getAccountDetails();\n    this.getDropDownValues();\n    this.getPaymentMode();\n    this.getReturnPaymentMode();\n    this.getJournalDebitData();\n    this.getJournalCreditData();\n    this.getPaymentStatus();\n    this.getDropDownValues('POLICYCOUNTRY', 'countryList', 'StringMapName');\n    this.getUserBankAccountDetails();\n    this.getPolicyDetails();\n    this.getPaymentDetails();\n    this.getLapsePolicyDetails();\n    this.isGenerateRenewal();\n  }\n\n  isGenerateRenewal() {\n    const data = {\n      policyId: this.props.match.params.id\n    };\n    api.post(APIConstant.path.isGenerateRenewal, data).then(res => {\n      console.log('PolicyAccount isGenerateRenewal', res);\n\n      if (res.success) {\n        if (!CommonConfig.isEmpty(res.data[0].returnValue) && res.data[0].returnValue != 0) {\n          console.log('res.data[0].returnValue', res.data[0].returnValue);\n          this.setState({\n            isGenerateRenewal: res.data[0].returnValue,\n            PremiumType: 'Renewal',\n            isPolicyRenewal: 1\n          });\n        }\n      } else {\n        console.log('error');\n      }\n    }).catch(err => {});\n  }\n\n  getPaymentDetails() {\n    try {\n      const data = {\n        policyId: this.props.match.params.id\n      };\n      api.post('api/getpaymentholderdetails', data).then(res => {\n        if (res.success) {\n          let resdata = res.data[0];\n          this.setState({\n            EntityId: resdata[0].EntityId,\n            EntityType: resdata[0].EntityType,\n            RenewalDate: resdata[0].RenewalDate,\n            Forename: resdata[0].Forename,\n            Surname: resdata[0].Surname,\n            EmailId: resdata[0].EmailId,\n            ContactTelephoneNumber: resdata[0].CountryCode + ' ' + resdata[0].AreaCode + ' ' + CommonConfig.formatPhoneNumber(resdata[0].Phone) // SelectSavedCard:res.data[0].SelectSavedCard,\n            // CardholderName: res.data[0].CardholderName,\n            // CardNumber: res.data[0].CardNumber,\n            // CardType: res.data[0].CardType,\n            // ExpiryMonth: res.data[0].ExpiryMonth,\n            // ExpiryYear: res.data[0].ExpiryYear,\n            // IsSelectedCard: res.data[0].IsSelectedCard,\n\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getPolicyDetails() {\n    try {\n      const data = {\n        policyId: this.props.match.params.id\n      };\n      api.post('api/getPolicyComputation', data).then(res => {\n        if (res.success) {\n          console.log(\"-i-i-i-i--i-i--i---i---i\", res.data[0]);\n          let resdata = res.data[0];\n          this.setState({\n            PolicyComputation: resdata\n          });\n          console.log(\"-i-i-i-i--i-i--i---i---i\", this.state.PolicyComputation);\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getDropDownValues(stringMapType, setStateName, orderBy) {\n    try {\n      const data = {\n        stringmaptype: stringMapType,\n        orderby: orderBy\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  getJournalDebitData() {\n    try {\n      const data = {\n        stringmaptype: 'JOURNALENTRYDEBIT'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          var journalDebitData = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            journalDebitData.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          this.setState({\n            journalDebitData: journalDebitData\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getJournalCreditData() {\n    try {\n      const data = {\n        stringmaptype: 'JOURNALENTRYCREDIT'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          var journalCreditData = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            journalCreditData.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          this.setState({\n            journalCreditData: journalCreditData\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getPaymentMode() {\n    try {\n      const data = {\n        stringmaptype: 'PAYMENTMODE'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          var paymentMode = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            paymentMode.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          console.log(\"paymentMode-----\", paymentMode);\n          this.setState({\n            paymentModearr: paymentMode\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getReturnPaymentMode() {\n    try {\n      const data = {\n        stringmaptype: 'RETURNPAYMENTMODE'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          var returnPaymentMode = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            returnPaymentMode.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          this.setState({\n            returnPaymentModearr: returnPaymentMode\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getPaymentStatus() {\n    try {\n      const data = {\n        stringmaptype: 'PAYMENTSTATUS'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          var paymentStatus = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            paymentStatus.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          this.setState({\n            paymentStatusarr: paymentStatus\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getAccountDetails() {\n    try {\n      // debugger\n      let data = {\n        PolicyId: this.props.match.params.id\n      };\n      api.post('api/getDebitAccountList', data).then(res => {\n        console.log(\"getDebitAccountList\", res);\n        let accountData = res.data[0];\n\n        if (res.success) {\n          if (accountData.length) {\n            var duePayment = accountData[0].ClosingBalance;\n          } else {\n            duePayment = 0.00;\n          }\n\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < accountData.length; i++) {\n            let PaymentMode = \"\";\n\n            if (accountData[i].PaymentMode == \"null\") {} else if (accountData[i].PaymentMode) {\n              PaymentMode = accountData[i].PaymentMode + ' (' + accountData[i].PaymentStatus + ')';\n            }\n\n            var CreatedBy = CommonConfig.isEmpty(accountData[i].CreatedBy) ? '' : accountData[i].CreatedByName + \" (\" + moment(accountData[i].CreatedOn).format(CommonConfig.dateFormat.dateTime) + \")\";\n            var UpdatedBy = CommonConfig.isEmpty(accountData[i].UpdatedBy) ? '' : accountData[i].CreatedByName + \" (\" + moment(accountData[i].UpdatedOn).format(CommonConfig.dateFormat.dateTime) + \")\";\n            formattedData.push({\n              CurrencySymbol: this.props.CurrencySymbol,\n              Id: accountData[i].Id,\n              PolicyAccountId: accountData[i].PolicyAccountId,\n              DocumentId: accountData[i].DocumentId,\n              SequenceNumber: accountData[i].Id,\n              CreatedOn: moment(accountData[i].CreatedOn).format(CommonConfig.dateFormat.dateOnly),\n              CreatedOnDate: accountData[i].CreatedOn,\n              ClientTransactionType: accountData[i].ClientTransactionType,\n              TransactionUniqueReferenceId: accountData[i].TransactionUniqueReferenceId,\n              UniqueReferenceId: accountData[i].UniqueReferenceId,\n              ReferenceId: accountData[i].ReferenceId,\n              Description: accountData[i].Description,\n              ChargeAmount: accountData[i].ChargeAmount,\n              ChargeFeeAmount: accountData[i].ChargeFeeAmount,\n              TotalChargeAmount: accountData[i].TotalChargeAmount,\n              AmountCharge: accountData[i].TotalChargeAmount,\n              PaymentAmount: accountData[i].PaymentAmount,\n              Outstanding: accountData[i].Outstanding,\n              PaymentMode: PaymentMode,\n              CreatedBy: CreatedBy,\n              UpdatedBy: UpdatedBy,\n              Balance: accountData[i].Balance,\n              TransactionType: accountData[i].TransactionType,\n              PaymentModeName: accountData[i].PaymentMode,\n              TransactionDate: moment(accountData[i].TransactionDate).format(CommonConfig.dateFormat.dateOnly),\n              PaymentStatus: accountData[i].PaymentStatus,\n              Note: accountData[i].Note,\n              IsReceiptGenerated: CommonConfig.isEmpty(accountData[i].IsReceiptGenerated) ? 0 : accountData[i].IsReceiptGenerated.data[0],\n              ReceiptDocumentId: CommonConfig.isEmpty(accountData[i].ReceiptDocumentId) ? '' : accountData[i].ReceiptDocumentId,\n              URL: CommonConfig.isEmpty(accountData[i].URL) ? '' : accountData[i].URL,\n              RelatedReferenceId: accountData[i].RelatedReferenceId,\n              SystemEntryType: accountData[i].SystemEntryType,\n              RenewalOrInceptionDate: accountData[i].RenewalOrInceptionDate,\n              Narration: accountData[i].Narration,\n              BatchEntryId: accountData[i].BatchEntryId,\n              Balance: accountData[i].Balance,\n              Actions: accountData[i].Actions,\n              TotalPaymentAmount: accountData[i].TotalPaymentAmount\n            });\n          }\n\n          let firstPage = formattedData.length ? '1' : '0';\n          let lastPage = this.state.rowsPerPage < formattedData.length ? this.state.rowsPerPage : formattedData.length;\n          let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n          this.setState({\n            arr: formattedData,\n            str: str,\n            paymentDue: duePayment,\n            policyAccountList: accountData\n          });\n          console.log(\"formattedData\", this.state.arr);\n        } else {\n          console.log(\"getAccountDetails > error 3\", res);\n        }\n      }).catch(err => {\n        console.log(\"getAccountDetails > error 2\", err);\n      });\n    } catch (err) {\n      console.log(\"getAccountDetails > error 1\", err);\n    }\n  }\n\n  getDropDownValues(stringMapType, setStateName) {\n    try {\n      const data = {\n        stringmaptype: stringMapType,\n        orderby: 'sortorder'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  onColumnToggle(event) {\n    let valueInOrder = event.value.sort((x, y) => {\n      return x.id - y.id;\n    });\n    this.setState({\n      cols: valueInOrder\n    });\n  }\n\n  actionTemplate(rowData, column) {\n    // console.log(\"actionTemplate\", rowData);\n    var path = apiBase + \"\" + rowData.URL;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      type: \"button\",\n      icon: \"pi pi-eye\",\n      className: \"p-button-primary\",\n      tooltip: \"View\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      style: {\n        marginRight: '.5em'\n      },\n      onClick: e => this.editAccount(e, rowData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 13\n      }\n    }), rowData.TransactionType === 'Payment' ? /*#__PURE__*/React.createElement(BTN, {\n      type: \"button\",\n      icon: \"pi pi-file\",\n      className: \"p-button-primary\",\n      tooltip: \"Generate Receipt of Payment\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      style: {\n        marginRight: '.5em'\n      },\n      onClick: e => this.generateReceipt(rowData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 17\n      }\n    }) : null, rowData.TransactionType === 'Payment' && rowData.IsReceiptGenerated === 1 ? /*#__PURE__*/React.createElement(BTN, {\n      type: \"button\",\n      icon: \"pi pi-eye\",\n      className: \"p-button-warning\",\n      tooltip: \"View Receipt of Payment\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      style: {\n        marginRight: '.5em'\n      },\n      onClick: e => window.open(path, \"_blank\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 17\n      }\n    }) : null);\n  }\n\n  againGenerateReceipt() {\n    let data = {\n      PolicyAccountId: this.state.regenerateDoc.PolicyAccountId,\n      loggedInUserId: CommonConfig.loggedInUserId()\n    };\n    api.post('api/generateReciept', data).then(res => {\n      if (res.success) {\n        toast.success(res.data.message);\n        setTimeout(function () {\n          window.location.reload();\n        }, 1000);\n      }\n    });\n  }\n\n  hidePopup() {\n    this.setState({\n      toggleModal: false\n    });\n  }\n\n  formatAmountChargedData(cell, rowData) {\n    console.log(\"formatAmountChargedData\", this);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: rowData.CurrencySymbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 46\n      }\n    }), CommonConfig.isEmpty(rowData.TotalChargeAmount) ? '0' : rowData.TotalChargeAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n  }\n\n  formatPaymentData(cell, rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: rowData.CurrencySymbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 46\n      }\n    }), CommonConfig.isEmpty(rowData.TotalPaymentAmount) ? '0' : rowData.TotalPaymentAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n  }\n\n  formatBalanceData(cell, rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: rowData.CurrencySymbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 46\n      }\n    }), CommonConfig.isEmpty(rowData.Balance) ? '0' : rowData.Balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n  }\n\n  showMakePaymentPopup(rowData) {\n    if (rowData === undefined) {\n      this.getPolicyOutstandingTransaction();\n    } else {\n      this.setState({\n        isEdit: true\n      });\n      this.getBatchPaymentDetails(rowData);\n    }\n  }\n\n  hideMakePaymentPopup() {\n    this.setState({\n      isPaymentPopup: false,\n      transactionType: 'Payment',\n      description: '',\n      paymentAmount: '',\n      descriptionError: false,\n      paymentAmountError: false,\n      existOutstanding: 0\n    });\n  }\n\n  async saveMakePaymentEntry() {\n    try {\n      if (this.state.newEntryDateError) {\n        toast.error('Please Enter Transaction Date');\n      } else if (this.state.descriptionError) {\n        toast.error('Please Enter Description');\n      } else if (this.state.paymentAmountError) {\n        toast.error('Please Enter Payment Amount');\n      } else if (this.state.paymentModeError) {\n        toast.error('Please Select Payment Mode');\n      } else if (this.state.paymentAmount == 0) {\n        toast.error('Payment amount can not be 0.');\n      } else if (this.validateTransactionsTotal()) {\n        toast.error('Total Amount Applied must be match with Payment Amount');\n      } else {\n        let data = {\n          PolicyId: this.props.match.params.id,\n          EntryType: '',\n          NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n          TransactionType: this.state.transactionType,\n          ReferenceId: this.state.referenceId,\n          Description: this.state.description,\n          PaymentAmount: this.state.paymentAmount,\n          PaymentMode: this.state.paymentMode,\n          PaymentStatus: \"Success\",\n          Note: this.state.note,\n          CreatedBy: CommonConfig.loggedInUserId(),\n          PaymentEntries: this.state.OutstandingTransactions,\n          LanguageId: this.state.LanguageId\n        };\n\n        if (data.PaymentMode == \"Debit/Credit Card\") {\n          if (this.state.CardholderName === '' || this.state.CardholderName === null || this.state.CardholderName === 'null' || this.state.CardholderName === 'NULL' || this.state.CardholderName === 'undefined' || this.state.CardholderName === undefined) {\n            this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter CardholderName\");\n            return;\n          } else if (this.state.CardNumber === '' || this.state.CardNumber === null || this.state.CardNumber === 'null' || this.state.CardNumber === 'NULL' || this.state.CardNumber === 'undefined' || this.state.CardNumber === undefined) {\n            this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter CardNumber\");\n            return;\n          } else if (this.state.CardType === '' || this.state.CardType === null || this.state.CardType === 'null' || this.state.CardType === 'NULL' || this.state.CardType === 'undefined' || this.state.CardType === undefined) {\n            this.show('CardType', true, \"CardTypeError\", \"Select CardType\");\n            return;\n          } else if (this.state.ExpiryMonth === '' || this.state.ExpiryMonth === null || this.state.ExpiryMonth === 'null' || this.state.ExpiryMonth === 'NULL' || this.state.ExpiryMonth === 'undefined' || this.state.ExpiryMonth === undefined) {\n            this.show('ExpiryMonth', true, \"ExpiryMonthError\", \"Select ExpiryMonth\");\n            return;\n          } else if (this.state.ExpiryYear === '' || this.state.ExpiryYear === null || this.state.ExpiryYear === 'null' || this.state.ExpiryYear === 'NULL' || this.state.ExpiryYear === 'undefined' || this.state.ExpiryYear === undefined) {\n            this.show('ExpiryYear', true, \"ExpiryYearError\", \"Select ExpiryYear\");\n            return;\n          } else if (this.state.CVV === '' || this.state.CVV === null || this.state.CVV === 'null' || this.state.CVV === 'NULL' || this.state.CVV === 'undefined' || this.state.CVV === undefined) {\n            this.show(\"CVV\", true, \"CVVError\", \"Please enter valid CVV\");\n            return;\n          } else {\n            const params = new URLSearchParams();\n            params.append('CardNumber', this.state.CardNumber);\n            params.append('CardholderName', this.state.CardholderName);\n            params.append('ExpiryMonth', this.state.ExpiryMonth);\n            params.append('ExpiryYear', this.state.ExpiryYear);\n            params.append('CVV', this.state.CVV);\n            params.append('TotalAmount', data.PaymentAmount);\n            params.append('Currency', this.state.Currency);\n            params.append('amount', data.PaymentAmount);\n            await axios({\n              method: 'post',\n              url: CommonConfig.phpapi,\n              data: params\n            }).then(response => {\n              if (response.data.responseCode == \"00\") {\n                toast.success(\"Payment has been done successfully.\");\n                console.log(\"payment\", response.data); // console.log(\"fdsdsdffsd\",response.data.timestamp);\n                // console.log(\"fdsdsdffsd\",response.data.transactionReference.transactionId);\n                // console.log(\"fdsdsdffsd\",response.data.transactionReference.orderId);\n\n                var renewalPolicy = {\n                  RenewalPolicyDate: this.state.RenewalDate,\n                  PolicyNo: this.state.policyNumber,\n                  PolicyHolderForeName: this.state.Forename,\n                  PolicyHolderSurName: this.state.Surname,\n                  ContactNo: this.state.ContactTelephoneNumber,\n                  PolicyHolderEmail: this.state.EmailId,\n                  Amount: data.PaymentAmount,\n                  CardHolderName: this.state.CardholderName,\n                  CardNumber: this.state.CardNumber,\n                  CardType: this.state.CardType,\n                  ExpiryMonth: this.state.ExpiryMonth,\n                  ExpiryYear: this.state.ExpiryYear,\n                  Cvv: this.state.CVV,\n                  PaymentSource: 'Evolution',\n                  Currency: this.state.Currency,\n                  PaymentTimestamp: response.data.timestamp,\n                  PaymentTransactionId: response.data.transactionReference.transactionId,\n                  PaymentOrderId: response.data.transactionReference.orderId\n                };\n                api.post('api/renewalPolicy', renewalPolicy).then(res => {\n                  console.log(\"res\", res);\n                  this.saveMakePaymentEntryCallAPI(data);\n                }).catch(err => {\n                  toast.error(\"Payment has been done successfully but not able to add entry in database.\");\n                  console.log(\"addUpdateAccountEntry error 2\", err);\n                });\n              } else {\n                toast.error(\"payment not done\");\n              }\n            }).catch(error => {\n              console.log(error);\n            });\n          }\n        } else {\n          this.saveMakePaymentEntryCallAPI(data);\n        }\n      }\n    } catch (error) {\n      console.log(\"saveMakePaymentEntry error 1\", error);\n    }\n  }\n\n  saveMakePaymentEntryCallAPI(data) {\n    console.log(\"saveMakePaymentEntry-request\", JSON.stringify(data));\n\n    try {\n      api.post('api/saveMakePaymentEntry', data).then(res => {\n        console.log(\"saveMakePaymentEntry-response\", res.data);\n\n        if (res.success && res.data.success) {\n          let accountEntries = res.data.data[0].AccountEntries;\n          let accountRecord = accountEntries.split(',');\n          console.log(\"saveMakePaymentEntry-accountRecord\", accountRecord);\n\n          for (var i = 0; i < accountRecord.length; i++) {\n            if (!CommonConfig.isEmpty(accountRecord[i])) {\n              let generateRecieptData = {\n                PolicyAccountId: accountRecord[i],\n                loggedInUserId: CommonConfig.loggedInUserId()\n              };\n              api.post('api/generateReciept', generateRecieptData).then(generateRecieptRes => {\n                console.log(\"generateReciept \", i, accountRecord.length, generateRecieptRes);\n\n                if (i == accountRecord.length) {\n                  this.hideMakePaymentPopup();\n                  toast.success(res.data.message);\n                  setTimeout(function () {\n                    window.location.reload();\n                  }, 1000);\n                }\n              });\n            }\n          }\n        }\n      }).catch(err => {\n        toast.error(\"Not able to add entry in database.\");\n        console.log(\"saveMakePaymentEntry-err\", err);\n      });\n    } catch (error) {\n      toast.error(\"Not able to add entry in database.\");\n      console.log(\"saveMakePaymentEntry-err\", error);\n    }\n  }\n\n  validateTransactionsTotal() {\n    let OutstandingTransactions = this.state.OutstandingTransactions;\n    let PaymentAmount = this.state.paymentAmount;\n    let TotalAmount = 0;\n\n    for (let i = 0; i < OutstandingTransactions.length; i++) {\n      TotalAmount = parseFloat(TotalAmount) + parseFloat(OutstandingTransactions[i].AmountApplied);\n    }\n\n    if (PaymentAmount == TotalAmount) {\n      return false;\n    }\n\n    return true;\n  }\n\n  showReturnPaymentPopup(rowData) {\n    console.log(\"showReturnPaymentPopup>\", rowData);\n\n    if (rowData === undefined) {\n      var statusDesc = this.state.returnPaymentData.ClientTransactionType + \" : Return Payment\";\n      this.setState({\n        toggleNewEntryModal: true,\n        transactionType: 'ReturnPayment',\n        isMakePayment: true,\n        isReturnPayment: true,\n        newEntryDateError: false,\n        chargeAmountError: false,\n        calculateBalanceAFTPay: 0,\n        description: statusDesc,\n        note: '',\n        paymentAmount: 0,\n        descriptionError: false,\n        paymentAmountError: false,\n        entryTypeError: false,\n        isEdit: false,\n        isAccountRecordEdit: false,\n        existOutstanding: 0\n      });\n\n      if (!CommonConfig.isEmpty(this.state.returnPaymentData)) {\n        this.setState({\n          paymentAmount: Math.abs(this.state.returnPaymentData.Balance)\n        });\n      }\n    } else {\n      this.setState({\n        toggleNewEntryModal: true,\n        transactionType: 'ReturnPayment',\n        isMakePayment: true,\n        isReturnPayment: true,\n        calculateBalanceAFTPay: this.state.paymentDue,\n        description: rowData.Description,\n        paymentAmount: Math.abs(rowData.PaymentAmount),\n        paymentMode: rowData.PaymentMode,\n        note: rowData.Note,\n        isEdit: true,\n        isAccountRecordEdit: true,\n        newEntryDate: moment(rowData.TransactionDate).format(\"YYYY-MM-DD\"),\n        existOutstanding: rowData.Outstanding\n      });\n    }\n  }\n\n  showBankDetailsPopup() {\n    let accountNameError = CommonConfig.isEmpty(this.state.accountName) ? true : false;\n    let bankNameError = CommonConfig.isEmpty(this.state.bankName) ? true : false;\n    let bankCountryError = CommonConfig.isEmpty(this.state.bankCountry) ? true : false;\n    let IBANError = CommonConfig.isEmpty(this.state.IBAN) ? true : false;\n    this.setState({\n      toggleBnkDetailsModal: true,\n      paymentAmountError: false,\n      accountNameError: accountNameError,\n      bankNameError: bankNameError,\n      bankCountryError: bankCountryError,\n      IBANError: IBANError\n    });\n  }\n\n  hideEntryPopup() {\n    this.setState({\n      toggleNewEntryModal: false,\n      accountData: \"\",\n      referenceId: '',\n      description: '',\n      ChargeAmount: 0,\n      chargeFee: 0,\n      paymentAmount: 0,\n      PaymentAmount: 0,\n      paymentStatus: '',\n      paymentMode: '',\n      descriptionError: true,\n      paymentAmountError: true,\n      paymentModeError: true,\n      paymentStatusError: true,\n      PolicyAccountId: '',\n      newEntryDate: moment().format(\"YYYY-MM-DD\"),\n      isEdit: false,\n      isAccountRecordEdit: false,\n      returnPaymentData: {}\n    });\n    this.calculateBalanceAFTPay();\n  }\n\n  hideBankDetailsPopup() {\n    this.setState({\n      toggleBnkDetailsModal: false,\n      accountNameError: false,\n      bankNameError: false,\n      bankCountryError: false,\n      IBANError: false,\n      BICError: false,\n      accountName: this.state.bankDetailsRes.AccountName,\n      bankName: this.state.bankDetailsRes.BankName,\n      bankCountry: this.state.bankDetailsRes.Country,\n      IBAN: this.state.bankDetailsRes.IBAN,\n      BIC: this.state.bankDetailsRes.BIC\n    });\n  }\n\n  hidedeletePopup() {\n    this.setState({\n      toggleModalDel: false\n    });\n  }\n\n  async addUpdateAccountEntry() {\n    try {\n      if (this.state.newEntryDateError === false && this.state.descriptionError === false && this.state.paymentAmountError === false && this.state.chargeAmountError === false && this.state.paymentModeError === false && this.state.entryTypeError === false) {\n        let accountForm = {\n          PolicyId: this.props.match.params.id,\n          PolicyAccountId: this.state.PolicyAccountId,\n          EntryType: CommonConfig.isEmpty(this.state.entryType) ? '' : this.state.entryType,\n          NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n          TransactionType: this.state.transactionType,\n          ReferenceId: this.state.referenceId,\n          Description: this.state.description,\n          ChargeAmount: this.state.chargeAmount,\n          ChargeFeeAmount: this.state.chargeFee,\n          TotalChargeAmount: this.state.totalChargeAmount,\n          PaymentAmount: this.state.paymentAmount,\n          PaymentMode: this.state.paymentMode,\n          PaymentStatus: \"Success\",\n          Note: this.state.note,\n          CreatedBy: CommonConfig.loggedInUserId(),\n          Outstanding: Number(this.state.outstanding),\n          Premium: Number(this.state.updatedPremium),\n          AdminFee: Number(this.state.updatedPremiumAdminFee),\n          Levy: Number(this.state.updatedPremiumLevy),\n          LessLevy: Number(this.state.updatedPremiumLessLevy),\n          LanguageId: this.state.LanguageId\n        };\n\n        if (accountForm.TransactionType == 'ReturnPayment') {\n          accountForm.TransactionUniqueReferenceId = this.state.returnPaymentData.UniqueReferenceId.toString();\n        }\n\n        var API = 'api/addUpdateAccountEntry';\n\n        if (this.state.isReturnPayment) {\n          API = 'api/addReturnPaymentEntry';\n        }\n\n        console.log(\"addReturnPaymentEntry > \", accountForm);\n        api.post(API, accountForm).then(res => {\n          console.log(\"addUpdateAccountEntry>\", res);\n\n          if (res.success) {\n            if (res.data.success) {\n              if (this.state.isMakePayment && !this.state.isReturnPayment) {\n                let generateRecieptData = {\n                  PolicyAccountId: res.data.data,\n                  loggedInUserId: CommonConfig.loggedInUserId()\n                };\n                api.post('api/generateReciept', generateRecieptData).then(generateRecieptRes => {\n                  if (res.success) {\n                    toast.success(res.data.message);\n                    this.hideEntryPopup();\n                    setTimeout(function () {// window.location.reload();\n                    }, 1000);\n                  }\n                });\n              } else {\n                toast.success(res.data.message);\n                this.hideEntryPopup();\n                setTimeout(function () {\n                  window.location.reload();\n                }, 1000);\n              }\n            } else {\n              toast.error(res.data.message);\n              this.hideEntryPopup();\n              setTimeout(function () {\n                window.location.reload();\n              }, 1000);\n            }\n          }\n        }).catch(err => {\n          console.log(\"addUpdateAccountEntry error 2\", err);\n          this.hideEntryPopup();\n          setTimeout(function () {\n            window.location.reload();\n          }, 1000);\n        });\n      } else {\n        this.show(\"newEntryDate\", this.state.newEntryDateError, \"newEntryDateError\", \"Please enter transaction date\");\n        this.show(\"description\", this.state.descriptionError, \"descriptionError\", \"Please enter description\");\n        this.show(\"paymentAmount\", this.state.paymentAmountError, \"paymentAmountError\", \"Please enter payment amount\");\n        this.show(\"chargeAmount\", this.state.chargeAmountError, \"chargeAmountError\", \"Please enter charge amount\");\n        this.show(\"paymentMode\", this.state.paymentModeError, \"paymentModeError\", \"Please select payment mode\");\n        this.show(\"entryType\", this.state.entryTypeError, \"entryTypeError\", \"Please select type\");\n      }\n    } catch (error) {\n      console.log(\"addUpdateAccountEntry error 1\", error);\n    }\n  }\n\n  getUserBankAccountDetails() {\n    try {\n      const data = {\n        EntityId: this.props.EntityId,\n        EntityType: this.props.EntityType\n      };\n      console.log(\"getUserBankAccountDetails > req\", data);\n      api.post(APIConstant.path.getUserBankAccountDetails, data).then(res => {\n        console.log(\"getUserBankAccountDetails > res\", res);\n\n        if (res.data.length) {\n          var BankExists = 1;\n          this.setState({\n            accountNameError: false,\n            IBANError: false,\n            BICError: false,\n            bankNameError: false,\n            bankCountryError: false\n          });\n        } else {\n          this.setState({\n            EntityBankDetailId: '',\n            accountName: '',\n            IBAN: '',\n            BIC: '',\n            bankName: '',\n            bankCountry: '',\n            bankExists: 0,\n            bankDetailsRes: []\n          });\n          this.setState({\n            accountNameError: true,\n            IBANError: true,\n            BICError: false,\n            bankNameError: true,\n            bankCountryError: true\n          });\n        }\n\n        if (res.success) {\n          this.setState({\n            EntityBankDetailId: res.data[0].EntityBankDetailId,\n            accountName: res.data[0].AccountName,\n            IBAN: res.data[0].IBAN,\n            BIC: res.data[0].BIC,\n            bankName: res.data[0].BankName,\n            bankCountry: res.data[0].Country,\n            bankExists: BankExists,\n            bankDetailsRes: res.data[0]\n          });\n        } else {\n          console.log(\"else\");\n        }\n      }).catch(err => {\n        console.log(\"sss\", err);\n      });\n    } catch (error) {\n      console.log(\"ssss\", error);\n    }\n  }\n\n  addUpdateBankDetails() {\n    try {\n      if (this.state.accountNameError === false && this.state.bankNameError === false && this.state.bankCountryError === false && this.state.IBANError === false) {\n        let data = {\n          EntityBankDetailId: this.state.EntityBankDetailId,\n          entityId: this.props.EntityId,\n          EntityType: this.props.EntityType,\n          AccountName: this.state.accountName,\n          IBAN: this.state.IBAN,\n          BIC: this.state.BIC,\n          BankName: this.state.bankName,\n          Country: this.state.bankCountry,\n          LoggedInUserId: CommonConfig.loggedInUserId()\n        };\n        api.post('api/addUpdateBankDetails', data).then(res => {\n          if (res.success) {\n            if (res.data.success) {\n              toast.success(res.data.message); // window.location.reload();\n            } else {\n              toast.error(res.data.message);\n            }\n\n            setTimeout(() => {\n              this.getUserBankAccountDetails();\n              this.hideBankDetailsPopup();\n            }, 100);\n          }\n        }).catch(err => {\n          console.log(\"addUpdateAccountEntry error 2\", err);\n        });\n      } else {\n        this.show(\"accountName\", this.state.accountNameError, 'accountNameError', 'Please enter Account Name');\n        this.show(\"bankName\", this.state.bankNameError, 'bankNameError', 'Please enter Bank Name.');\n        this.show(\"bankCountry\", this.state.bankCountryError, 'bankCountryError', 'Please select country.');\n        this.show(\"IBAN\", this.state.IBANError, 'IBANError', 'Please enter valid IBAN.'); //this.show(\"BIC\", this.state.BICError);\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  clearBankDetails() {\n    try {\n      let data = {\n        EntityBankDetailId: this.state.EntityBankDetailId,\n        EntityId: this.props.EntityId,\n        LoggedInUserId: CommonConfig.loggedInUserId()\n      };\n      console.log(\"clearBankDetails\", data);\n      api.post('api/clearBankDetails', data).then(res => {\n        console.log(\"clearBankDetails > res\", res);\n\n        if (res.success) {\n          if (res.data.success) {\n            toast.success(res.data.message);\n          } else {\n            toast.error(res.data.message);\n          }\n\n          setTimeout(() => {\n            this.getUserBankAccountDetails();\n            this.hideBankDetailsPopup();\n          }, 100);\n        }\n      }).catch(err => {\n        console.log(\"clearBankDetails error\", err);\n      });\n    } catch (error) {\n      console.log(\"clearBankDetails > error\", error);\n    }\n  }\n\n  onRadioBtnClick(radioSelected) {\n    this.setState({\n      newEntryDate: moment().format('YYYY-MM-DD'),\n      transactionType: 'Debit',\n      referenceId: '',\n      description: '',\n      chargeAmount: 0,\n      chargeFee: 0,\n      totalChargeAmount: 0,\n      paymentAmount: 0,\n      paymentMode: '',\n      paymentStatus: '',\n      note: '',\n      addedBy: '',\n      addedDate: '',\n      updatedBy: '',\n      updatedDate: ''\n    }); // this.resetAccountForm();\n\n    this.setState({\n      transactionType: radioSelected\n    });\n\n    if (radioSelected == 'Credit') {\n      this.setState({\n        paymentAmountError: true,\n        chargeAmountError: false\n      });\n    }\n  }\n\n  selectType(value, type) {\n    if (type === 'paymentMode') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          paymentModeError: true,\n          paymentMode: value\n        });\n        this.show('paymentMode', true, \"paymentModeError\", \"Select payment mode\");\n      } else {\n        this.setState({\n          paymentModeError: false,\n          paymentMode: value\n        });\n        this.show('paymentMode', false, \"paymentModeError\", \"\");\n      }\n    }\n\n    if (type === 'paymentStatus') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          paymentStatusError: true,\n          paymentStatus: value\n        });\n        this.show('paymentStatus', true, \"paymentStatusError\", \"Select payment status\");\n      } else {\n        this.setState({\n          paymentStatusError: false,\n          paymentStatus: value\n        });\n        this.show('paymentStatus', false, \"paymentStatusError\", \"\");\n      }\n    }\n\n    if (type === 'bankCountry') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          bankCountryError: true,\n          bankCountry: value\n        });\n        this.show(\"bankCountry\", true, \"bankCountryError\", \"Please select Country\");\n      } else {\n        this.setState({\n          bankCountryError: false,\n          bankCountry: value\n        });\n        this.show(\"bankCountry\", false, \"bankCountryError\", \"\");\n      }\n    }\n\n    if (type === 'CardType') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          CardTypeError: true,\n          CardType: value\n        });\n        this.show('CardType', true, \"CardTypeError\", \"Select CardType\");\n      } else {\n        this.setState({\n          CardTypeError: false,\n          CardType: value\n        });\n        this.show('CardType', false, \"CardTypeError\", \"\");\n      } // this.setState({ CardType: value });\n\n    }\n\n    if (type === 'ExpiryMonth') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          ExpiryMonthError: true,\n          ExpiryMonth: value\n        });\n        this.show('ExpiryMonth', true, \"ExpiryMonthError\", \"Select ExpiryMonth\");\n      } else {\n        this.setState({\n          ExpiryMonthError: false,\n          ExpiryMonth: value\n        });\n        this.show('ExpiryMonth', false, \"ExpiryMonthError\", \"\");\n      } // this.setState({ ExpiryMonth: value });\n\n    }\n\n    if (type === 'ExpiryYear') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          ExpiryYearError: true,\n          ExpiryYear: value\n        });\n        this.show('ExpiryYear', true, \"ExpiryYearError\", \"Select ExpiryYear\");\n      } else {\n        this.setState({\n          ExpiryYearError: false,\n          ExpiryYear: value\n        });\n        this.show('ExpiryYear', false, \"ExpiryYearError\", \"\");\n      } // this.setState({ ExpiryYear: value });\n\n    }\n\n    if (type === 'entryType') {\n      if (CommonConfig.isEmpty(value)) {\n        this.setState({\n          entryTypeError: true,\n          entryType: value\n        });\n        this.show('entryType', true, \"entryTypeError\", \"Please select type\");\n      } else {\n        this.setState({\n          entryTypeError: false,\n          entryType: value,\n          description: value\n        });\n        this.show('entryType', false, \"entryTypeError\", \"\");\n      }\n    }\n  }\n\n  show(field, condition, errorField, message) {\n    if (condition) {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control is-invalid\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n    } else {\n      if (document.getElementById(field)) document.getElementById(field).className = \"form-control\";\n      if (document.getElementById(errorField)) document.getElementById(errorField).innerHTML = null;\n    }\n  }\n\n  handleChangeAmount(e, i) {\n    let value = e.target.value;\n\n    if (CommonConfig.isEmpty(value)) {\n      value = '';\n    }\n\n    let SystemOutstandingTransactions = this.state.SystemOutstandingTransactions;\n    let OutstandingTransactions = this.state.OutstandingTransactions;\n    let transaction = SystemOutstandingTransactions[i];\n    let AmountApplied = value;\n    let TotalDue = transaction.TotalDue;\n    let LevyTotalAmount = transaction.LevyTotalAmount;\n    let Outstanding = transaction.Outstanding;\n    OutstandingTransactions[i].AmountApplied = AmountApplied;\n\n    if (Outstanding >= AmountApplied) {\n      let UpdatedAdminFee = 0;\n      let OutstandingAfterPayment = 0;\n      var UpdatedLevy = 0;\n      var UpdatedNetPremium = 0;\n      OutstandingAfterPayment = Outstanding - AmountApplied;\n      UpdatedAdminFee = transaction.AdminFee * AmountApplied / TotalDue;\n      UpdatedLevy = AmountApplied * LevyTotalAmount / TotalDue;\n      UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n      OutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n      OutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n      OutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n      OutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n      this.show(\"AmountApplied\", false, \"AmountAppliedError\", \"\");\n    } else {\n      this.show(\"AmountApplied\", true, \"AmountAppliedError\", \"Please enter proper amount\");\n    }\n\n    this.setState({\n      OutstandingTransactions: OutstandingTransactions\n    });\n  }\n\n  resetAccountForm() {\n    this.setState({\n      newEntryDate: moment().format('YYYY-MM-DD'),\n      transactionType: 'Debit',\n      referenceId: '',\n      description: '',\n      chargeAmount: 0,\n      chargeFee: 0,\n      totalChargeAmount: 0,\n      paymentAmount: 0,\n      paymentMode: '',\n      paymentStatus: '',\n      note: '',\n      addedBy: '',\n      addedDate: '',\n      updatedBy: '',\n      updatedDate: '',\n      PolicyAccountId: '',\n      isMakePayment: false,\n      isReturnPayment: false,\n      newEntryDateError: false,\n      descriptionError: true,\n      chargeAmountError: true,\n      paymentAmountError: false,\n      paymentModeError: false,\n      paymentStatusError: true\n    });\n    this.calculateBalanceAFTPay();\n    this.totalChargeAmt();\n  }\n\n  calculateBalanceAFTPay() {\n    if (this.state.paymentDue && this.state.paymentAmount) {\n      setTimeout(() => {\n        var calculateBalanceAFTPay = 0;\n        var calculateBalanceAFTPay = Number(this.state.paymentDue) - Number(this.state.paymentAmount);\n        this.setState({\n          calculateBalanceAFTPay: calculateBalanceAFTPay\n        });\n      }, 100); // console.log(\"calculateBalanceAFTPay\", this.state.calculateBalanceAFTPay);\n    }\n  }\n\n  totalChargeAmt() {\n    if (this.state.chargeAmount) {\n      setTimeout(() => {\n        var totalAmount = 0;\n        var totalAmount = Number(this.state.chargeAmount) + Number(this.state.chargeFee);\n        this.setState({\n          totalChargeAmount: totalAmount\n        });\n      }, 100);\n      console.log(\"totalAmount\", this.state.totalAmount);\n    }\n  }\n\n  calculatePremium() {\n    try {\n      let SystemOutstandingTransactions = this.state.SystemOutstandingTransactions;\n      let OutstandingTransactions = this.state.OutstandingTransactions;\n      let PaymentAmount = this.state.paymentAmount;\n      var ExistOutstanding = Number(this.state.existOutstanding);\n      var RemainingPaymentAmount = PaymentAmount;\n\n      for (let i = 0; i < SystemOutstandingTransactions.length; i++) {\n        let transaction = SystemOutstandingTransactions[i];\n        let AmountApplied = 0;\n        let TotalDue = transaction.TotalDue;\n        let LevyTotalAmount = transaction.LevyTotalAmount;\n        let Outstanding = transaction.Outstanding;\n        let OutstandingAfterPayment = 0;\n        let UpdatedNetAmount = 0;\n        var UpdatedNetPremium = 0;\n        var UpdatedLevy = 0;\n        let UpdatedAdminFee = 0;\n\n        if (RemainingPaymentAmount > 0) {\n          AmountApplied = RemainingPaymentAmount <= Outstanding ? RemainingPaymentAmount : Outstanding;\n          OutstandingAfterPayment = Outstanding - AmountApplied;\n          UpdatedAdminFee = transaction.AdminFee * AmountApplied / TotalDue;\n          UpdatedNetAmount = AmountApplied - UpdatedAdminFee;\n          UpdatedLevy = AmountApplied * LevyTotalAmount / TotalDue;\n          UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n          RemainingPaymentAmount = RemainingPaymentAmount - AmountApplied;\n        }\n\n        OutstandingTransactions[i].AmountApplied = Number(AmountApplied).toFixed(2);\n        OutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n        OutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n        OutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n        OutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n      }\n\n      this.setState({\n        OutstandingTransactions: OutstandingTransactions\n      });\n    } catch (error) {\n      console.log(\"calculatePremium >> error\", error);\n    }\n  }\n\n  getCurrentDecription() {\n    let desc = \"\";\n    let policyAccountList = this.state.policyAccountList;\n    policyAccountList = policyAccountList.filter(function (val) {\n      return val.SystemEntryType != '';\n    });\n\n    if (policyAccountList.length) {\n      desc = policyAccountList[0].SystemEntryType;\n    }\n\n    return desc;\n  }\n\n  getPolicyOutstandingTransaction(rowData) {\n    console.log('rowData >', rowData);\n    let data = {\n      PolicyId: this.props.match.params.id,\n      LoggedInUserId: CommonConfig.loggedInUserId(),\n      UniqueReferenceId: ''\n    };\n\n    if (rowData !== undefined) {\n      data.UniqueReferenceId = rowData.UniqueReferenceId;\n    }\n\n    api.post('api/getPolicyOutstandingTransaction', data).then(res => {\n      console.log(\"getPolicyOutstandingTransaction res\", res);\n\n      if (res.success) {\n        if (res.data[0].length) {\n          this.setState({\n            SystemOutstandingTransactions: res.data[0],\n            OutstandingTransactions: res.data[0]\n          });\n          var statusDesc = rowData.ClientTransactionType; // this.getCurrentDecription();\n\n          this.setState({\n            isPaymentPopup: true,\n            transactionType: 'Payment',\n            description: statusDesc,\n            paymentAmount: res.data[0][0].Outstanding,\n            descriptionError: false,\n            paymentAmountError: false,\n            existOutstanding: 0,\n            isEdit: false,\n            newEntryDateError: false\n          });\n          setTimeout(() => {\n            this.calculatePremium();\n          }, 100);\n        } else {\n          toast.warn(\"There is no Payment Due for this Policy.\");\n        }\n      }\n    }).catch(err => {\n      console.log(\"getPolicyOutstandingTransaction error\", err);\n    });\n  }\n\n  getBatchPaymentDetails(rowData) {\n    let data = {\n      PolicyAccountId: this.state.PolicyAccountId\n    };\n    console.log(\"getBatchPaymentDetails rowdata \", rowData);\n    api.post('api/getBatchPaymentDetails', data).then(res => {\n      console.log(\"getBatchPaymentDetails res\", res);\n\n      if (res.success) {\n        if (res.data.length) {\n          var OutstandingTransactions = res.data;\n          this.setState({\n            OutstandingTransactions: OutstandingTransactions\n          });\n          console.log(\"getBatchPaymentDetails > OutstandingTransactions\", OutstandingTransactions);\n          var paymentAmountTotal = 0;\n\n          for (var i in OutstandingTransactions) {\n            paymentAmountTotal += parseFloat(OutstandingTransactions[i].PaymentAmount);\n          }\n\n          this.setState({\n            isPaymentPopup: true,\n            transactionType: 'Payment',\n            paymentAmountError: false,\n            paymentAmount: paymentAmountTotal.toFixed(2),\n            description: rowData.Description,\n            descriptionError: false,\n            existOutstanding: 0,\n            isEdit: true,\n            newEntryDate: moment(rowData.TransactionDate).format(\"YYYY-MM-DD\"),\n            paymentMode: rowData.PaymentMode,\n            note: rowData.Note\n          });\n        }\n      }\n    }).catch(err => {\n      console.log(\"getBatchPaymentDetails error\", err);\n    });\n  }\n\n  shortWriteoff(UniqueReferenceId, writeoffAmount) {\n    try {\n      let data = {\n        PolicyId: this.state.policyId,\n        UniqueReferenceId: UniqueReferenceId,\n        PaymentAmount: writeoffAmount,\n        LoggedInUserId: CommonConfig.loggedInUserId()\n      };\n      console.log(\"shortWriteoff > \", data);\n      api.post('api/shortWriteoff', data).then(res => {\n        console.log(\"shortWriteoff > res >\", res);\n\n        if (res.success) {\n          if (res.data.success) {\n            toast.success(res.data.message);\n            window.location.reload();\n          } else {\n            toast.error(res.data.message);\n          }\n        }\n      }).catch(err => {\n        console.log(\"shortWriteoff > error > 1\", err);\n      });\n    } catch (error) {\n      console.log(\"shortWriteoff > error > 2\", error);\n    }\n  }\n\n  getLapsePolicyDetails() {\n    try {\n      let data = {\n        PolicyId: this.props.match.params.id,\n        LoggedInUserId: CommonConfig.loggedInUserId()\n      };\n      api.post('api/getLapsePolicyDetails', data).then(res => {\n        console.log(\"getLapsePolicyDetails > res >\", res);\n\n        if (res.success) {\n          if (res.data.length) {\n            this.setState({\n              IsLapsePolicy: res.data[0].IsLapsePolicy,\n              DaysOverdue: res.data[0].DaysOverdue,\n              RenewalDate: res.data[0].RenewalDate\n            });\n          }\n        }\n      }).catch(err => {\n        console.log(\"getLapsePolicyDetails > error > 1\", err);\n      });\n    } catch (error) {\n      console.log(\"getLapsePolicyDetails > error > 2\", error);\n    }\n  }\n\n  showLapsePolicyPopup() {\n    this.setState({\n      IsLapsePolicyPopup: true,\n      lapsePolicyNote: ''\n    });\n  }\n\n  hideLapsePolicyPopup() {\n    this.setState({\n      IsLapsePolicyPopup: false,\n      lapsePolicyNote: ''\n    });\n  }\n\n  lapsePolicy() {\n    try {\n      let data = {\n        PolicyId: this.state.policyId,\n        Note: this.state.lapsePolicyNote,\n        LoggedInUserId: CommonConfig.loggedInUserId()\n      };\n      api.post('api/lapsePolicy', data).then(res => {\n        console.log(\"lapsePolicy > res >\", res);\n\n        if (res.success) {\n          if (res.data.success) {\n            toast.success(res.data.message);\n            setTimeout(() => {\n              window.location.reload();\n            }, 100);\n          } else {\n            toast.error(res.data.message);\n            setTimeout(() => {\n              window.location.reload();\n            }, 100);\n          }\n        } else {\n          toast.error(res.message);\n          setTimeout(() => {\n            window.location.reload();\n          }, 100);\n        }\n      }).catch(err => {\n        console.log(\"lapsePolicy > error > 1\", err);\n        setTimeout(() => {\n          window.location.reload();\n        }, 100);\n      });\n    } catch (error) {\n      console.log(\"lapsePolicy > error > 2\", error);\n    }\n  }\n\n  cancelTransaction(data) {\n    console.log(\"cancelTransaction >> \", data);\n  }\n\n  hideTransferFundPopup() {\n    this.setState({\n      isTransferFundPopup: false,\n      paymentMode: '',\n      transferFundData: '',\n      paymentAmountRemains: 0,\n      PolicyOutstandingTransactions: ''\n    });\n  }\n\n  handleTransferFundChangeAmount(e, i) {\n    let value = e.target.value;\n\n    if (CommonConfig.isEmpty(value)) {\n      value = '';\n    }\n\n    let SystemPolicyOutstandingTransactions = this.state.SystemPolicyOutstandingTransactions;\n    let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n    let transaction = SystemPolicyOutstandingTransactions[i];\n    let AmountApplied = value;\n    let TotalDue = transaction.TotalDue;\n    let LevyTotalAmount = transaction.LevyTotalAmount;\n    let Outstanding = transaction.Outstanding;\n    PolicyOutstandingTransactions[i].AmountApplied = AmountApplied;\n\n    if (Outstanding >= AmountApplied) {\n      let UpdatedAdminFee = 0;\n      let OutstandingAfterPayment = 0;\n      var UpdatedLevy = 0;\n      var UpdatedNetPremium = 0;\n      OutstandingAfterPayment = Outstanding - AmountApplied;\n      UpdatedAdminFee = transaction.AdminFee * AmountApplied / TotalDue;\n      UpdatedLevy = AmountApplied * LevyTotalAmount / TotalDue;\n      UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n      PolicyOutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n      PolicyOutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n      PolicyOutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n      PolicyOutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n      this.show(\"AmountApplied\" + i, false, \"AmountAppliedError\", \"\");\n    } else {\n      this.show(\"AmountApplied\" + i, true, \"AmountAppliedError\", \"Please enter proper amount\");\n    }\n\n    this.setState({\n      PolicyOutstandingTransactions: PolicyOutstandingTransactions\n    });\n    let PaymentAmount = this.state.paymentAmount;\n    let TotalAmount = 0;\n\n    for (let i = 0; i < PolicyOutstandingTransactions.length; i++) {\n      var POAmountApplied = PolicyOutstandingTransactions[i].AmountApplied == '' ? 0 : PolicyOutstandingTransactions[i].AmountApplied;\n      TotalAmount = parseFloat(TotalAmount) + parseFloat(POAmountApplied);\n    }\n\n    var paymentAmountRemains = Number(PaymentAmount - TotalAmount).toFixed(2);\n    this.setState({\n      paymentAmountRemains: paymentAmountRemains\n    });\n  }\n\n  getAccountTransferFund(rowData) {\n    try {\n      console.log(\"getAccountTransferFund > rowData\", rowData);\n      let data = {\n        PolicyId: this.state.policyId,\n        CurrentUser: CommonConfig.loggedInUserId()\n      };\n      api.post('api/getAccountTransferFund', data).then(res => {\n        console.log(\"getAccountTransferFund > res\", res);\n\n        if (res.success) {\n          if (res.data[0].length) {\n            this.setState({\n              isTransferFundPopup: true,\n              PolicyOutstandingTransactions: res.data[0],\n              SystemPolicyOutstandingTransactions: res.data[0],\n              transactionType: 'Payment',\n              description: 'Transfer a Fund',\n              paymentMode: 'Fund Transfer',\n              paymentAmount: Math.abs(rowData.Balance),\n              existOutstanding: 0,\n              isEdit: false,\n              paymentModeError: false,\n              newEntryDateError: false,\n              descriptionError: false,\n              paymentAmountError: false,\n              transferFundData: rowData\n            });\n            setTimeout(() => {\n              this.calculateTransferFundPremium();\n            }, 100);\n          } else {\n            toast.warn(\"There are no Payment Due for any Policy of \" + this.state.policyHolder + \".\");\n          }\n        } else {\n          toast.error('There are no due for other Policy of ' + this.state.policyHolder + '.');\n        }\n      }).catch(err => {\n        console.log(\"getAccountTransferFund error\", err);\n        toast.error(err);\n      });\n    } catch (error) {\n      console.log(\"getAccountTransferFund > error \", error);\n      toast.error(error);\n    }\n  }\n\n  calculateTransferFundPremium() {\n    try {\n      let SystemPolicyOutstandingTransactions = this.state.SystemPolicyOutstandingTransactions;\n      let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n      let PaymentAmount = this.state.paymentAmount;\n      var ExistOutstanding = Number(this.state.existOutstanding);\n      var RemainingPaymentAmount = PaymentAmount;\n\n      for (let i = 0; i < SystemPolicyOutstandingTransactions.length; i++) {\n        let transaction = SystemPolicyOutstandingTransactions[i];\n        console.log(\"transaction\", transaction);\n        let AmountApplied = 0;\n        let TotalDue = Number(transaction.TotalDue);\n        let LevyTotalAmount = Number(transaction.LevyTotalAmount);\n        let Outstanding = Number(transaction.Outstanding);\n        let OutstandingAfterPayment = 0;\n        let UpdatedNetAmount = 0;\n        var UpdatedNetPremium = 0;\n        var UpdatedLevy = 0;\n        let UpdatedAdminFee = 0;\n\n        if (RemainingPaymentAmount > 0) {\n          AmountApplied = RemainingPaymentAmount <= Outstanding ? Number(RemainingPaymentAmount) : Number(Outstanding);\n          OutstandingAfterPayment = Outstanding - AmountApplied;\n          UpdatedAdminFee = transaction.AdminFee * AmountApplied / TotalDue;\n          UpdatedNetAmount = AmountApplied - UpdatedAdminFee;\n          UpdatedLevy = AmountApplied * LevyTotalAmount / TotalDue;\n          UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n          RemainingPaymentAmount = RemainingPaymentAmount - AmountApplied;\n        } else {\n          OutstandingAfterPayment = Outstanding - AmountApplied;\n        }\n\n        PolicyOutstandingTransactions[i].AmountApplied = Number(AmountApplied).toFixed(2);\n        PolicyOutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n        PolicyOutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n        PolicyOutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n        PolicyOutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n      }\n\n      this.setState({\n        PolicyOutstandingTransactions: PolicyOutstandingTransactions,\n        paymentAmountRemains: RemainingPaymentAmount\n      });\n    } catch (error) {\n      console.log(\"calculatePremium >> error\", error);\n    }\n  }\n\n  validateTransferFundTotal() {\n    console.log(\"validateTransferFundTotal >\", this.state);\n    let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n    let PaymentAmount = this.state.paymentAmount;\n    let TotalAmount = 0;\n\n    for (let i = 0; i < PolicyOutstandingTransactions.length; i++) {\n      TotalAmount = parseFloat(TotalAmount) + parseFloat(PolicyOutstandingTransactions[i].AmountApplied);\n    }\n\n    if (TotalAmount > 0 && TotalAmount <= PaymentAmount) {\n      return false;\n    }\n\n    return true;\n  }\n\n  saveTransferFund() {\n    try {\n      if (this.state.newEntryDateError) {\n        toast.error('Please Enter Transaction Date');\n      } else if (this.state.descriptionError) {\n        toast.error('Please Enter Description');\n      } else if (this.state.paymentAmountError) {\n        toast.error('Please Enter Payment Amount');\n      } else if (this.state.paymentModeError) {\n        toast.error('Please Select Payment Mode');\n      } else if (this.state.paymentAmount == 0) {\n        toast.error('Payment amount can not be 0.');\n      } else if (this.validateTransferFundTotal()) {\n        toast.error('Total Amount Applied must be in between 1 to ' + this.state.paymentAmount + '.');\n      } else {\n        let data = {\n          PolicyId: this.props.match.params.id,\n          EntryType: '',\n          TransferFundRecord: this.state.transferFundData,\n          NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n          TransactionType: this.state.transactionType,\n          ReferenceId: this.state.referenceId,\n          Description: this.state.description,\n          PaymentAmount: this.state.paymentAmount,\n          PaymentMode: this.state.paymentMode,\n          PaymentStatus: \"Success\",\n          Note: this.state.note,\n          CreatedBy: CommonConfig.loggedInUserId(),\n          PaymentEntries: this.state.PolicyOutstandingTransactions,\n          LanguageId: this.state.LanguageId\n        };\n        console.log(\"saveTransferFund > \", data);\n        this.saveTransferFundAPICall(data);\n      }\n    } catch (error) {\n      console.log(\"saveMakePaymentEntry error 1\", JSON.stringify(error));\n    }\n  }\n\n  saveTransferFundAPICall(data) {\n    console.log(\"saveTransferFund-request\", JSON.stringify(data));\n\n    try {\n      api.post('api/saveTransferFund', data).then(res => {\n        console.log(\"saveTransferFund-response\", res.data);\n\n        if (res.success && res.data.success) {\n          this.hideTransferFundPopup();\n          toast.success(res.data.message);\n          setTimeout(function () {\n            window.location.reload();\n          }, 1000);\n        }\n      }).catch(err => {\n        toast.error(\"Not able to add entry in database.\");\n        console.log(\"saveTransferFund-err\", err);\n      });\n    } catch (error) {\n      toast.error(\"Not able to add entry in database.\");\n      console.log(\"saveTransferFund-err\", error);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2492,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2494,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      style: {\n        alignSelf: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2496,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2497,\n        columnNumber: 25\n      }\n    }, \" Policy Number: \", this.state.policyNumber)), /*#__PURE__*/React.createElement(Col, {\n      md: \"10\",\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2500,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      type: \"button\",\n      icon: \"fa fa-bank\",\n      className: \"p-button-primary\",\n      tooltip: \"Bank Details\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: () => this.showBankDetailsPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2501,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"inline-block\",\n        margin: \"10px 20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2504,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2505,\n        columnNumber: 29\n      }\n    }, \"Payment Due : \", /*#__PURE__*/React.createElement(\"i\", {\n      className: this.props.CurrencySymbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2506,\n        columnNumber: 47\n      }\n    }), \"  \", this.state.paymentDue ? this.state.paymentDue.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 0)), this.state.IsLapsePolicy ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        alignSelf: 'center',\n        display: \"inline-block\",\n        margin: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2512,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2513,\n        columnNumber: 33\n      }\n    }, \"Renewal Date: \", moment(this.state.RenewalDate).format(CommonConfig.dateFormat.dateOnly), \"(\", this.state.DaysOverdue < 0 ? this.state.DaysOverdue + ' Day(s) Overdue' : Math.abs(this.state.DaysOverdue) + ' Day(s) to Renewal', \")\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        margin: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.showLapsePolicyPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2517,\n        columnNumber: 33\n      }\n    }, \"Lapse Policy\")) : null)), /*#__PURE__*/React.createElement(BootstrapTable, {\n      keyField: \"SequenceNumber\",\n      data: this.state.arr,\n      columns: this.state.cols,\n      expandRow: this.expandRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2534,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toggleNewEntryModal,\n      className: 'modal-lg',\n      style: {\n        maxWidth: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2541,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hideEntryPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2542,\n        columnNumber: 21\n      }\n    }, this.state.transactionType == 'Payment' || this.state.transactionType == 'ReturnPayment' ? 'Payment Entry' : 'Journal Entry'), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        margin: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2546,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2548,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2549,\n        columnNumber: 29\n      }\n    }, \" Policy \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2550,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2550,\n        columnNumber: 42\n      }\n    }, this.state.policyNumber), \" \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2551,\n        columnNumber: 29\n      }\n    }, \" Policy Type \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2552,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2552,\n        columnNumber: 42\n      }\n    }, this.state.policyType), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2555,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2556,\n        columnNumber: 29\n      }\n    }, \" Policy Holder \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2557,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2557,\n        columnNumber: 42\n      }\n    }, this.state.policyHolder), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2560,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2561,\n        columnNumber: 29\n      }\n    }, \"Transaction Date*\"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2562,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2563,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      type: \"date\",\n      name: \"newEntryDate\",\n      id: \"newEntryDate\",\n      placeholder: \"transaction date\",\n      onBlur: e => this.handleChange(e),\n      onChange: e => this.handleChange(e),\n      value: this.state.newEntryDate,\n      min: moment().subtract(100, 'years').format('DD-MM-YYYY'),\n      max: moment().format('DD-MM-YYYY'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2564,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"newEntryDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2569,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2578,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2612,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2613,\n        columnNumber: 33\n      }\n    }, \" Description* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2614,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"description\",\n      type: \"text\",\n      id: \"description\",\n      className: \"\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.description,\n      disabled: this.state.isEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2615,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"descriptionError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2617,\n        columnNumber: 37\n      }\n    }))), this.state.transactionType === 'Debit' ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2624,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2625,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2626,\n        columnNumber: 49\n      }\n    }, \" Charge Amount* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2627,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"chargeAmount\",\n      type: \"text\",\n      id: \"chargeAmount\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.chargeAmount,\n      disabled: this.state.isEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2628,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"chargeAmountError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2629,\n        columnNumber: 53\n      }\n    })))) : null, this.state.transactionType === 'Credit' ? /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2642,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2643,\n        columnNumber: 45\n      }\n    }, \" Adj Amount* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2644,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"paymentAmount\",\n      type: \"number\",\n      id: \"paymentAmount\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.paymentAmount,\n      disabled: this.state.isEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2645,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"paymentAmountError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2646,\n        columnNumber: 49\n      }\n    }))) : null, this.state.transactionType === 'ReturnPayment' ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2657,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2658,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2659,\n        columnNumber: 49\n      }\n    }, \" Payment Amount* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2660,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"paymentAmount\",\n      type: \"number\",\n      id: \"paymentAmount\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.paymentAmount,\n      disabled: this.state.isEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2661,\n        columnNumber: 53\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2665,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2666,\n        columnNumber: 49\n      }\n    }, \" Return Payment Mode* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2667,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"paymentMode\",\n      id: \"paymentMode\",\n      disabled: this.state.isEdit,\n      onChange: e => this.selectType(e.target.value, 'paymentMode'),\n      value: this.state.paymentMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2668,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2671,\n        columnNumber: 57\n      }\n    }, \"Select payment mode\"), this.state.returnPaymentModearr.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.label,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2673,\n          columnNumber: 69\n        }\n      }, type.value);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"paymentModeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2677,\n        columnNumber: 53\n      }\n    })))) : null, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2686,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2687,\n        columnNumber: 33\n      }\n    }, \" Note \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2688,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"note\",\n      type: \"textarea\",\n      id: \"note\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.note,\n      disabled: this.state.isEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2689,\n        columnNumber: 37\n      }\n    }))))), CommonConfig.isEmpty(this.state.PolicyAccountId) ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2697,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2698,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.addUpdateAccountEntry(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2699,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2700,\n        columnNumber: 37\n      }\n    }), \"Save\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.hideEntryPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2703,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2704,\n        columnNumber: 37\n      }\n    }), \"Cancel\"))) : null), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isPaymentPopup,\n      className: 'modal-lg',\n      style: {\n        maxWidth: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2712,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hideMakePaymentPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2713,\n        columnNumber: 21\n      }\n    }, \"Payment Entry\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2715,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2717,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2718,\n        columnNumber: 29\n      }\n    }, \" Policy \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2719,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2719,\n        columnNumber: 42\n      }\n    }, this.state.policyNumber), \" \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2720,\n        columnNumber: 29\n      }\n    }, \" Policy Type \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2721,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2721,\n        columnNumber: 42\n      }\n    }, this.state.policyType), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2724,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2725,\n        columnNumber: 29\n      }\n    }, \" Policy Holder \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2726,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2726,\n        columnNumber: 42\n      }\n    }, this.state.policyHolder), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2729,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2730,\n        columnNumber: 29\n      }\n    }, \"Transaction Date*\"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2731,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2732,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      type: \"date\",\n      name: \"newEntryDate\",\n      id: \"newEntryDate\",\n      placeholder: \"transaction date\",\n      onBlur: e => this.handleChange(e),\n      onChange: e => this.handleChange(e),\n      value: this.state.newEntryDate,\n      min: moment().subtract(100, 'years').format('DD-MM-YYYY'),\n      max: moment().format('DD-MM-YYYY'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2733,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"newEntryDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2738,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2743,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2745,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2746,\n        columnNumber: 33\n      }\n    }, \" Description* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2747,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      name: \"description\",\n      type: \"text\",\n      id: \"description\",\n      className: \"\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2748,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"descriptionError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2750,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2754,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2755,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2756,\n        columnNumber: 37\n      }\n    }, \" Payment Amount* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2757,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      name: \"paymentAmount\",\n      type: \"number\",\n      id: \"paymentAmount\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.paymentAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2758,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2762,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2763,\n        columnNumber: 37\n      }\n    }, \" Payment Mode* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2764,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      type: \"select\",\n      name: \"paymentMode\",\n      id: \"paymentMode\",\n      onChange: e => this.selectType(e.target.value, 'paymentMode'),\n      value: this.state.paymentMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2765,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2768,\n        columnNumber: 45\n      }\n    }, \"Select payment mode\"), this.state.paymentModearr.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.label,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2770,\n          columnNumber: 57\n        }\n      }, type.value);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"paymentModeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2774,\n        columnNumber: 41\n      }\n    })))), this.state.OutstandingTransactions.length ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2797,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      border: \"1\",\n      style: {\n        width: '100%',\n        marginTop: 15,\n        marginBottom: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2799,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2800,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '20%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2801,\n        columnNumber: 45\n      }\n    }, \"Transaction Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2802,\n        columnNumber: 45\n      }\n    }, \"Reference Id\"), this.state.isEdit ? null : /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2804,\n        columnNumber: 80\n      }\n    }, \"Outstanding\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2806,\n        columnNumber: 45\n      }\n    }, \"Amount Applied\"), this.state.isEdit ? null : /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2808,\n        columnNumber: 80\n      }\n    }, \"Outstanding After Payment\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2810,\n        columnNumber: 45\n      }\n    }, \"Net Premium\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2811,\n        columnNumber: 45\n      }\n    }, \"Levy\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2812,\n        columnNumber: 45\n      }\n    }, \"Admin\")), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2814,\n        columnNumber: 41\n      }\n    }, this.state.OutstandingTransactions.map((transaction, i) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2817,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2818,\n          columnNumber: 57\n        }\n      }, transaction.Narration), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2819,\n          columnNumber: 57\n        }\n      }, transaction.UniqueReferenceId), this.state.isEdit ? null : /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2821,\n          columnNumber: 92\n        }\n      }, transaction.Outstanding), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2823,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isEdit,\n        name: \"AmountApplied\",\n        id: \"AmountApplied\",\n        type: \"number\",\n        value: transaction.AmountApplied,\n        onChange: e => this.handleChangeAmount(e, i),\n        onBlur: e => this.handleChangeAmount(e, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2824,\n          columnNumber: 61\n        }\n      })), this.state.isEdit ? null : /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2827,\n          columnNumber: 92\n        }\n      }, transaction.OutstandingAfterPayment), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2829,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedNetPremium), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2830,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedLevy), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2831,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedAdminFee));\n    }))), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"AmountAppliedError\",\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2838,\n        columnNumber: 37\n      }\n    })) : null, this.state.paymentMode == 'Debit/Credit Card' ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2843,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2845,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2846,\n        columnNumber: 41\n      }\n    }, \" Card Type (*) \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2847,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"CardType\",\n      type: \"select\",\n      id: \"CardType\",\n      onChange: e => this.selectType(e.target.value, 'CardType'),\n      value: this.state.CardType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2848,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"VISA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2849,\n        columnNumber: 49\n      }\n    }, \"Visa\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"MC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2850,\n        columnNumber: 49\n      }\n    }, \"Master Card\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"laser\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2851,\n        columnNumber: 49\n      }\n    }, \"Laser\")), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"CardTypeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2854,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2858,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2859,\n        columnNumber: 41\n      }\n    }, \" Cardholder Name (*) \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2860,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"CardholderName\",\n      type: \"text\",\n      id: \"CardholderName\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.CardholderName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2861,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"CardholderNameError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2862,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2866,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2867,\n        columnNumber: 41\n      }\n    }, \" Card Number (*) \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2868,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"CardNumber\",\n      type: \"text\",\n      id: \"CardNumber\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.CardNumber,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2869,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"CardNumberError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2870,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2874,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2875,\n        columnNumber: 41\n      }\n    }, \" Expiry (*) \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2876,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"ExpiryMonth\",\n      type: \"select\",\n      id: \"ExpiryMonth\",\n      onChange: e => this.selectType(e.target.value, 'ExpiryMonth'),\n      value: this.state.ExpiryMonth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2877,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2878,\n        columnNumber: 49\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2879,\n        columnNumber: 49\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2880,\n        columnNumber: 49\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2881,\n        columnNumber: 49\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2882,\n        columnNumber: 49\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2883,\n        columnNumber: 49\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2884,\n        columnNumber: 49\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2885,\n        columnNumber: 49\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2886,\n        columnNumber: 49\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2887,\n        columnNumber: 49\n      }\n    }, \"10\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2888,\n        columnNumber: 49\n      }\n    }, \"11\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2889,\n        columnNumber: 49\n      }\n    }, \"12\")), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"ExpiryMonthError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2891,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2893,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"ExpiryYear\",\n      type: \"select\",\n      id: \"ExpiryYear\",\n      onChange: e => this.selectType(e.target.value, 'ExpiryYear'),\n      value: this.state.ExpiryYear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2894,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2020\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2895,\n        columnNumber: 49\n      }\n    }, \"2020\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2021\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2896,\n        columnNumber: 49\n      }\n    }, \"2021\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2022\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2897,\n        columnNumber: 49\n      }\n    }, \"2022\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2023\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2898,\n        columnNumber: 49\n      }\n    }, \"2023\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2024\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2899,\n        columnNumber: 49\n      }\n    }, \"2024\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2025\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2900,\n        columnNumber: 49\n      }\n    }, \"2025\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2026\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2901,\n        columnNumber: 49\n      }\n    }, \"2026\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2027\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2902,\n        columnNumber: 49\n      }\n    }, \"2027\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2028\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2903,\n        columnNumber: 49\n      }\n    }, \"2028\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2029\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2904,\n        columnNumber: 49\n      }\n    }, \"2029\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2030\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2905,\n        columnNumber: 49\n      }\n    }, \"2030\")), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"ExpiryYearError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2907,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2911,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2912,\n        columnNumber: 41\n      }\n    }, \" CVV (*) \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2913,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"CVV\",\n      type: \"password\",\n      id: \"CVV\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.CVV,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2914,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"CVVError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2915,\n        columnNumber: 45\n      }\n    })))) : null, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2922,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2923,\n        columnNumber: 33\n      }\n    }, \" Note \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2924,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      name: \"note\",\n      type: \"textarea\",\n      id: \"note\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.note,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2925,\n        columnNumber: 37\n      }\n    }))))), CommonConfig.isEmpty(this.state.PolicyAccountId) ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2934,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2935,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.saveMakePaymentEntry(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2936,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2937,\n        columnNumber: 37\n      }\n    }), \" Save\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.hideMakePaymentPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2939,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2940,\n        columnNumber: 37\n      }\n    }), \" Cancel\"))) : null), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.isTransferFundPopup,\n      className: 'modal-lg',\n      style: {\n        maxWidth: '70%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2948,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hideTransferFundPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2949,\n        columnNumber: 21\n      }\n    }, \"Transfer a Fund\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2951,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2953,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2954,\n        columnNumber: 29\n      }\n    }, \" Policy \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2955,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2955,\n        columnNumber: 42\n      }\n    }, this.state.policyNumber), \" \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2956,\n        columnNumber: 29\n      }\n    }, \" Policy Type \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2957,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2957,\n        columnNumber: 42\n      }\n    }, this.state.policyType), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2960,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2961,\n        columnNumber: 29\n      }\n    }, \" Policy Holder \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2962,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2962,\n        columnNumber: 42\n      }\n    }, this.state.policyHolder), \" \")), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2965,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2966,\n        columnNumber: 29\n      }\n    }, \"Transaction Date*\"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2967,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2968,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      type: \"date\",\n      name: \"newEntryDate\",\n      id: \"newEntryDate\",\n      placeholder: \"transaction date\",\n      onBlur: e => this.handleChange(e),\n      onChange: e => this.handleChange(e),\n      value: this.state.newEntryDate,\n      min: moment().subtract(100, 'years').format('DD-MM-YYYY'),\n      max: moment().format('DD-MM-YYYY'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2969,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"newEntryDateError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2974,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2979,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2981,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2982,\n        columnNumber: 33\n      }\n    }, \" Description* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2983,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      name: \"description\",\n      type: \"text\",\n      id: \"description\",\n      className: \"\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2984,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"descriptionError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2986,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2990,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2991,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2992,\n        columnNumber: 37\n      }\n    }, \" Payment Amount* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2993,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: true,\n      name: \"paymentAmount\",\n      type: \"number\",\n      id: \"paymentAmount\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.paymentAmount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2994,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2996,\n        columnNumber: 37\n      }\n    }, this.state.paymentAmountRemains < 0 ? /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2998,\n        columnNumber: 46\n      }\n    }, \" Balance: \", this.state.paymentAmountRemains, \" \") : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3000,\n        columnNumber: 46\n      }\n    }, \" Balance: \", this.state.paymentAmountRemains, \" \"))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3005,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3006,\n        columnNumber: 37\n      }\n    }, \" Payment Mode* \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3007,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      type: \"select\",\n      name: \"paymentMode\",\n      id: \"paymentMode\",\n      onChange: e => this.selectType(e.target.value, 'paymentMode'),\n      value: this.state.paymentMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3008,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3011,\n        columnNumber: 45\n      }\n    }, \"Select payment mode\"), this.state.paymentModearr.map((type, i) => {\n      return type.label == 'Fund Transfer' ? /*#__PURE__*/React.createElement(\"option\", {\n        value: type.label,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3015,\n          columnNumber: 57\n        }\n      }, type.value) : null;\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"paymentModeError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3021,\n        columnNumber: 41\n      }\n    })))), this.state.PolicyOutstandingTransactions.length ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3027,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      border: \"1\",\n      style: {\n        width: '100%',\n        marginTop: 15,\n        marginBottom: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3028,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3029,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '20%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3030,\n        columnNumber: 45\n      }\n    }, \"Policy Number\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '20%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3031,\n        columnNumber: 45\n      }\n    }, \"Transaction Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3032,\n        columnNumber: 45\n      }\n    }, \"Reference Id\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3033,\n        columnNumber: 45\n      }\n    }, \"Outstanding\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3034,\n        columnNumber: 45\n      }\n    }, \"Amount Applied\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3035,\n        columnNumber: 45\n      }\n    }, \"Outstanding After Payment\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3036,\n        columnNumber: 45\n      }\n    }, \"Net Premium\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3037,\n        columnNumber: 45\n      }\n    }, \"Levy\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3038,\n        columnNumber: 45\n      }\n    }, \"Admin\")), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3040,\n        columnNumber: 41\n      }\n    }, this.state.PolicyOutstandingTransactions.map((transaction, i) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3043,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3044,\n          columnNumber: 57\n        }\n      }, transaction.PolicyNumber), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3045,\n          columnNumber: 57\n        }\n      }, transaction.Narration), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3046,\n          columnNumber: 57\n        }\n      }, transaction.UniqueReferenceId), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3047,\n          columnNumber: 57\n        }\n      }, transaction.Outstanding), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3048,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        disabled: this.state.isEdit,\n        name: \"AmountApplied\",\n        id: \"AmountApplied\" + i,\n        type: \"number\",\n        value: transaction.AmountApplied,\n        onChange: e => this.handleTransferFundChangeAmount(e, i),\n        onBlur: e => this.handleTransferFundChangeAmount(e, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3049,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3051,\n          columnNumber: 57\n        }\n      }, transaction.OutstandingAfterPayment), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3052,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedNetPremium), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3053,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedLevy), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3054,\n          columnNumber: 57\n        }\n      }, transaction.UpdatedAdminFee));\n    }))), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"AmountAppliedError\",\n      style: {\n        color: 'red'\n      },\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3061,\n        columnNumber: 37\n      }\n    })) : null, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3065,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3066,\n        columnNumber: 33\n      }\n    }, \" Note \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3067,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      disabled: this.state.isEdit,\n      name: \"note\",\n      type: \"textarea\",\n      id: \"note\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.note,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3068,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3076,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3077,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.saveTransferFund(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3078,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3079,\n        columnNumber: 33\n      }\n    }), \" Save\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.hideTransferFundPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3081,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3082,\n        columnNumber: 33\n      }\n    }), \" Cancel\")))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toggleBnkDetailsModal,\n      className: 'modal-lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3089,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hideBankDetailsPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3090,\n        columnNumber: 21\n      }\n    }, \" Enter Bank Details \"), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        margin: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3091,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3092,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3093,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3095,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3096,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3097,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3098,\n        columnNumber: 45\n      }\n    }, \"Account Name*\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3100,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"accountName\",\n      id: \"accountName\",\n      onChange: e => this.handleChange(e),\n      value: this.state.accountName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3101,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"accountNameError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3102,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3106,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3107,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3108,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3109,\n        columnNumber: 45\n      }\n    }, \"Bank Name*\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3111,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"bankName\",\n      id: \"bankName\",\n      onChange: e => this.handleChange(e),\n      value: this.state.bankName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3112,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"bankNameError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3113,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3117,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3118,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3119,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3120,\n        columnNumber: 45\n      }\n    }, \"Country*\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3122,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"bankCountry\",\n      id: \"bankCountry\",\n      onChange: e => this.selectType(e.target.value, 'bankCountry'),\n      value: this.state.bankCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3123,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3124,\n        columnNumber: 49\n      }\n    }, \"Select country\"), this.state.countryList.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.StringMapKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3126,\n          columnNumber: 61\n        }\n      }, type.StringMapName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"bankCountryError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3130,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3134,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3135,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3136,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3137,\n        columnNumber: 45\n      }\n    }, \"IBAN*\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3139,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"IBAN\",\n      id: \"IBAN\",\n      onChange: e => this.handleChange(e),\n      value: this.state.IBAN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3140,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"IBANError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3141,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3145,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3146,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3147,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3148,\n        columnNumber: 45\n      }\n    }, \"BIC\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3150,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"BIC\",\n      id: \"BIC\",\n      onChange: e => this.handleChange(e),\n      value: this.state.BIC,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3151,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      id: \"BICError\",\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3152,\n        columnNumber: 45\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3161,\n        columnNumber: 29\n      }\n    }, CommonConfig.isEmpty(this.state.EntityBankDetailId) ? null : /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.clearBankDetails(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3164,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-trash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3165,\n        columnNumber: 41\n      }\n    }), \" Clear Bank Details\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.addUpdateBankDetails(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3168,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3169,\n        columnNumber: 37\n      }\n    }), \" Save\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"primary\",\n      onClick: () => this.hideBankDetailsPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3171,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3172,\n        columnNumber: 37\n      }\n    }), \" Cancel\"))))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toggleModalDel,\n      className: 'modal-lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3179,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hidedeletePopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3180,\n        columnNumber: 21\n      }\n    }, \"Delete Payment\"), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        margin: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3185,\n        columnNumber: 29\n      }\n    }, \"Are you sure want to delete this payment of \", /*#__PURE__*/React.createElement(\"i\", {\n      className: this.props.CurrencySymbol,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3186,\n        columnNumber: 78\n      }\n    }), \" \", this.state.delPolicyId.TransactionType === 'Credit' || this.state.delPolicyId.TransactionType === 'Payment' || this.state.delPolicyId.TransactionType === 'ReturnPayment' ? this.state.delPolicyId.PaymentAmount : this.state.delPolicyId.AmountCharge, \" \", this.state.delPolicyId.PaymentModeName, \" on \", this.state.delPolicyId.TransactionDate))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3191,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3192,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"danger\",\n      onClick: () => this.deleteAccount(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3193,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-trash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3194,\n        columnNumber: 33\n      }\n    }), \"Delete\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"primary\",\n      onClick: () => this.hidedeletePopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3197,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3198,\n        columnNumber: 33\n      }\n    }), \"Cancel\")))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toggleModal,\n      className: 'modal-lg',\n      toggle: () => this.hidePopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hidePopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3206,\n        columnNumber: 21\n      }\n    }, \"Regenerate Receipt of Payment\"), /*#__PURE__*/React.createElement(Col, {\n      style: {\n        margin: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3209,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3210,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3211,\n        columnNumber: 29\n      }\n    }, \"Are you sure want to re-generate this receipt of payment ?\"))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3218,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.againGenerateReceipt(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3219,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3220,\n        columnNumber: 33\n      }\n    }), \"Yes\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"primary\",\n      onClick: () => this.hidePopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3223,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3224,\n        columnNumber: 33\n      }\n    }), \"No\")))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.IsLapsePolicyPopup,\n      className: 'modal-lg',\n      toggle: () => this.hideLapsePolicyPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3231,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: () => this.hideLapsePolicyPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3232,\n        columnNumber: 21\n      }\n    }, \" Are you sure you want to Lapse this policy ? \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      style: {\n        marginTop: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3234,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3237,\n        columnNumber: 29\n      }\n    }, \"Policy Number\"), /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3238,\n        columnNumber: 29\n      }\n    }, this.state.policyNumber)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3246,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3247,\n        columnNumber: 29\n      }\n    }, \" Note \"), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3248,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"lapsePolicyNote\",\n      id: \"lapsePolicyNote\",\n      rows: \"3\",\n      onChange: e => this.handleChange(e),\n      onBlur: e => this.handleChange(e),\n      value: this.state.lapsePolicyNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3249,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3255,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pull-right\",\n      style: {\n        backgroundColor: \"#fff\",\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3256,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"success\",\n      onClick: () => this.lapsePolicy(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3257,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3258,\n        columnNumber: 33\n      }\n    }), \"Yes\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      color: \"primary\",\n      onClick: () => this.hideLapsePolicyPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3260,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        marginRight: \"10px\"\n      },\n      className: \"fa fa-times\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3261,\n        columnNumber: 33\n      }\n    }), \"Cancel\")))));\n  }\n\n}\n\nexport default withTranslation()(Account);","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Policy/Account.js"],"names":["React","Component","toast","Menu","Button","BTN","apiBase","Modal","ModalHeader","Col","Row","Input","InputGroup","UncontrolledTooltip","api","APIConstant","moment","CommonConfig","withTranslation","axios","BootstrapTable","IBAN","require","headers","defaults","post","Account","constructor","props","getPageString","e","firstPage","first","l","rows","page","lastPage","state","arr","length","str","setState","selectedPage","rowsPerPage","generateReceipt","rowData","console","log","IsReceiptGenerated","toggleModal","regenerateDoc","data","PolicyAccountId","loggedInUserId","then","res","success","message","setTimeout","window","location","reload","editAccount","referenceId","ReferenceId","TransactionType","paymentAmountError","newEntryDateError","descriptionError","paymentModeError","chargeAmountError","isEdit","isAccountRecordEdit","entryTypeError","showJournalEntryPopup","showMakePaymentPopup","showReturnPaymentPopup","undefined","resetAccountForm","newEntryDate","TransactionDate","format","transactionType","description","Description","chargeAmount","ChargeAmount","chargeFee","ChargeFeeAmount","totalChargeAmount","TotalChargeAmount","paymentAmount","PaymentAmount","paymentMode","PaymentModeName","paymentStatus","PaymentStatus","note","Note","isMakePayment","isReturnPayment","calculateBalanceAFTPay","toggleNewEntryModal","accountData","showDeletePaymentPopup","toggleModalDel","delPolicyId","deleteAccount","DocumentId","response","catch","err","handleDateChange","type","handleChange","target","name","value","nameRegExp","RegExp","nameWithSpace","numberRegExp","number","decimalRegExp","decimalWithOne","allowAllWithSpace","cvvRegExp","isEmpty","show","nameRegEx","test","isTransferFundPopup","calculateTransferFundPremium","calculatePremium","chargeFeeError","accountNameError","accountName","bankNameError","bankName","IBANError","isValid","BICError","CardholderNameError","CardholderName","CardNumberError","CardNumber","CVVError","CVV","totalChargeAmt","actionFormatter","cell","tempActions","Actions","actions","split","accountRecordMenu","i","push","label","UniqueReferenceId","path","URL","Id","position","marginRight","width","display","accountRecordActions","map","handleOnExpand","row","isExpand","rowIndex","childAccountData","tempChildAccountData","forEach","element","childActions","childAccountRecordMenu","CurrencySymbol","Path","error","expandRow","onlyOneExpanding","showExpandColumn","expandByColumnOnly","parentClassName","isExpanded","onExpand","renderer","border","accountEntry","dateFormat","dateOnly","ClientTransactionType","float","toString","replace","PaymentMode","CreatedByName","CreatedOn","dateTime","Outstanding","IsLocked","fontSize","verticalAlign","color","BReference","open","j","textAlign","isAccountChildEntry","getPolicyOutstandingTransaction","isConfirm","confirm","Balance","shortWriteoff","returnPaymentData","getAccountTransferFund","processAccountEntry","document","getElementsByName","AccountActionType","CurrentUser","columns","dataField","text","formatter","formatAmountChargedData","formatPaymentData","formatBalanceData","edit","LanguageId","i18n","language","policyAccountList","PolicyComputation","EntityBankDetailId","brand","colors","toggleModalAdd","cols","rowsPerPageOptions","dataTableConfig","globalFilter","toggleBnkDetailsModal","policyNumber","PolicyNumber","policyType","PolicyType","policyHolder","PolicyHolder","policyId","EntityId","EntityType","totalChargeAmountError","paymentDue","paymentStatusError","addedBy","addedDate","updatedBy","updatedDate","paymentModearr","returnPaymentModearr","paymentStatusarr","country","journalEntry","journalEntryError","journalDebitData","BIC","bankCountry","bankCountryError","countryList","bankDetailsRes","outstanding","existOutstanding","updatedPremium","updatedPremiumAdminFee","updatedPremiumLevy","updatedPremiumLessLevy","showCalculation","Currency","CardType","ExpiryMonth","ExpiryYear","IsSelectedCard","RenewalDate","Forename","Surname","EmailId","ContactTelephoneNumber","CardTypeError","ExpiryMonthError","ExpiryYearError","isPaymentPopup","SystemOutstandingTransactions","OutstandingTransactions","entryType","journalCreditData","IsLapsePolicy","DaysOverdue","IsLapsePolicyPopup","lapsePolicyNote","isGenerateRenewal","PremiumType","isPolicyRenewal","expandedRows","subAccMenu","transferFundData","PolicyOutstandingTransactions","SystemPolicyOutstandingTransactions","paymentAmountRemains","onColumnToggle","bind","actionTemplate","componentDidMount","match","params","Object","keys","id","currency","getAccountDetails","getDropDownValues","getPaymentMode","getReturnPaymentMode","getJournalDebitData","getJournalCreditData","getPaymentStatus","getUserBankAccountDetails","getPolicyDetails","getPaymentDetails","getLapsePolicyDetails","returnValue","resdata","CountryCode","AreaCode","formatPhoneNumber","Phone","stringMapType","setStateName","orderBy","stringmaptype","orderby","dropdownbycode","StringMapName","returnPaymentMode","PolicyId","duePayment","ClosingBalance","formattedData","CreatedBy","UpdatedBy","UpdatedOn","SequenceNumber","CreatedOnDate","TransactionUniqueReferenceId","AmountCharge","ReceiptDocumentId","RelatedReferenceId","SystemEntryType","RenewalOrInceptionDate","Narration","BatchEntryId","TotalPaymentAmount","event","valueInOrder","sort","x","y","column","againGenerateReceipt","hidePopup","getBatchPaymentDetails","hideMakePaymentPopup","saveMakePaymentEntry","validateTransactionsTotal","EntryType","NewEntryDate","dbDateTime","PaymentEntries","URLSearchParams","append","method","url","phpapi","responseCode","renewalPolicy","RenewalPolicyDate","PolicyNo","PolicyHolderForeName","PolicyHolderSurName","ContactNo","PolicyHolderEmail","Amount","CardHolderName","Cvv","PaymentSource","PaymentTimestamp","timestamp","PaymentTransactionId","transactionReference","transactionId","PaymentOrderId","orderId","saveMakePaymentEntryCallAPI","JSON","stringify","accountEntries","AccountEntries","accountRecord","generateRecieptData","generateRecieptRes","TotalAmount","parseFloat","AmountApplied","statusDesc","Math","abs","showBankDetailsPopup","hideEntryPopup","hideBankDetailsPopup","AccountName","BankName","Country","hidedeletePopup","addUpdateAccountEntry","accountForm","Number","Premium","AdminFee","Levy","LessLevy","API","BankExists","bankExists","addUpdateBankDetails","entityId","LoggedInUserId","clearBankDetails","onRadioBtnClick","radioSelected","selectType","field","condition","errorField","getElementById","className","innerHTML","handleChangeAmount","transaction","TotalDue","LevyTotalAmount","UpdatedAdminFee","OutstandingAfterPayment","UpdatedLevy","UpdatedNetPremium","toFixed","totalAmount","ExistOutstanding","RemainingPaymentAmount","UpdatedNetAmount","getCurrentDecription","desc","filter","val","warn","paymentAmountTotal","writeoffAmount","showLapsePolicyPopup","hideLapsePolicyPopup","lapsePolicy","cancelTransaction","hideTransferFundPopup","handleTransferFundChangeAmount","POAmountApplied","validateTransferFundTotal","saveTransferFund","TransferFundRecord","saveTransferFundAPICall","render","alignSelf","margin","maxWidth","marginTop","subtract","backgroundColor","marginLeft","padding","marginBottom","StringMapKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Menu } from 'primereact/menu';\nimport { Button as BTN } from 'primereact/button';\nimport { apiBase } from '../../utils/config';\nimport { Modal, ModalHeader, Col, Row, Input, Button, InputGroup, UncontrolledTooltip } from 'reactstrap';\nimport api from '../../utils/apiClient';\nimport APIConstant from '../../utils/constants';\nimport moment from 'moment';\nimport { CommonConfig } from '../../utils/constants';\nimport { withTranslation } from 'react-i18next';\nimport axios from 'axios';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nvar IBAN = require('iban');\nconst headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'JWT fefege...',\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    'X-Requested-With': 'XMLHttpRequest'\n};\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\nclass Account extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        let columns = [\n            // { dataField: \"SequenceNumber\", text: \"#\" },\n            { dataField: \"TransactionDate\", text: \"Txn Date\" },\n            { dataField: \"Narration\", text: \"Transaction\" },\n            { dataField: \"UniqueReferenceId\", text: \"Reference ID\" },\n            { dataField: \"ClientTransactionType\", text: \"Description\" },\n            { dataField: \"AmountCharge\", text: \"Amount Charged\", formatter: this.formatAmountChargedData },\n            { dataField: \"TotalPaymentAmount\", text: \"Payment Amount\", formatter: this.formatPaymentData },\n            // { dataField: \"PaymentMode\", text: \"Payment Mode\" },\n            { dataField: \"CreatedBy\", text: \"Added By\" },\n            { dataField: \"Balance\", text: \"Balance\", formatter: this.formatBalanceData },\n            { dataField: \"Action\", text: \"Actions\", formatter: this.actionFormatter, edit: this.editAccount, accountRecordActions: this.accountRecordActions },\n        ];\n\n        this.state = {\n            LanguageId: (props.i18n.language === 'en') ? 'en-GB' : (props.i18n.language === 'es') ? 'es-ES' : (props.i18n.language === 'ie') ? 'en-IE' : props.i18n.language,\n            policyAccountList: [],\n            PolicyComputation: '',\n            isEdit: false,\n            EntityBankDetailId: '',\n            brand: null,\n            colors: null,\n            delPolicyId: [],\n            toggleModalDel: false,\n            toggleModalAdd: false,\n            cols: columns,\n            arr: [],\n            rowData: '',\n            selectedPage: 0,\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n            str: '',\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            globalFilter: null,\n            toggleNewEntryModal: false,\n            toggleBnkDetailsModal: false,\n\n            policyNumber: props.PolicyNumber,\n            policyType: props.PolicyType,\n            policyHolder: props.PolicyHolder,\n            policyId: '',\n            EntityId: '',\n            EntityType: '',\n            referenceId: '',\n\n            PolicyAccountId: \"\",\n            accountData: \"\",\n            newEntryDate: moment().format('DD-MM-YYYY'),\n            newEntryDateError: false,\n            transactionType: 'Debit',\n            description: '',\n            descriptionError: true,\n            chargeAmount: 0,\n            chargeAmountError: true,\n            chargeFee: 0,\n            chargeFeeError: '',\n            totalChargeAmount: 0,\n            totalChargeAmountError: '',\n            paymentAmount: 0,\n            paymentAmountError: true,\n            paymentMode: '',\n            paymentModeError: true,\n            paymentDue: 0,\n            paymentStatus: '',\n            paymentStatusError: true,\n            note: '',\n            addedBy: '',\n            addedDate: '',\n            updatedBy: '',\n            updatedDate: '',\n            paymentModearr: [],\n            returnPaymentModearr: [],\n            paymentStatusarr: [],\n            isMakePayment: false,\n            isReturnPayment: false,\n            country: '',\n            IBAN: '',\n            IBANError: true,\n\n            journalEntry: '',\n            journalEntryError: true,\n            journalDebitData: [],\n\n            BIC: '',\n            BICError: false,\n\n            bankCountry: '',\n            bankCountryError: true,\n            countryList: [],\n\n            bankName: '',\n            bankNameError: true,\n\n            accountName: '',\n            accountNameError: true,\n            bankDetailsRes: [],\n\n            CurrencySymbol: '',\n            calculateBalanceAFTPay: 0,\n\n            TransactionType: '',\n            toggleModal: false,\n            regenerateDoc: [],\n\n            outstanding: 0,\n            existOutstanding: 0,\n            updatedPremium: 0,\n            updatedPremiumAdminFee: 0,\n            updatedPremiumLevy: 0,\n            updatedPremiumLessLevy: 0,\n            showCalculation: false,\n\n            isAccountRecordEdit: false,\n            Currency: 'Euro',\n            CardholderName: '',\n            CardNumber: '',\n            CardType: 'VISA',\n            ExpiryMonth: '1',\n            ExpiryYear: '2020',\n            CVV: '',\n            IsSelectedCard: 0,\n            RenewalDate: '',\n            Forename: '',\n            Surname: '',\n            EmailId: '',\n            ContactTelephoneNumber: '',\n            CardholderNameError: false,\n            CardNumberError: false,\n            CardTypeError: false,\n            ExpiryMonthError: false,\n            ExpiryYearError: false,\n            CVVError: false,\n\n            isPaymentPopup: false,\n            SystemOutstandingTransactions: [],\n            OutstandingTransactions: [],\n\n            entryType: '',\n            entryTypeError: true,\n            journalDebitData: [],\n            journalCreditData: [],\n\n            IsLapsePolicy: 0,\n            DaysOverdue: 0,\n            RenewalDate: '',\n\n            IsLapsePolicyPopup: false,\n            lapsePolicyNote: '',\n\n            isGenerateRenewal: 0,\n            PremiumType: '',\n            isPolicyRenewal: 0,\n\n            expandedRows: null,\n            childAccountData: [],\n\n            subAccMenu: false,\n            returnPaymentData: {},\n\n            isTransferFundPopup: false,\n            transferFundData: {},\n            PolicyOutstandingTransactions: [],\n            SystemPolicyOutstandingTransactions: [],\n            paymentAmountRemains: 0\n        };\n\n        this.onColumnToggle = this.onColumnToggle.bind(this);\n        this.actionTemplate = this.actionTemplate.bind(this);\n        // this.export = this.export.bind(this);\n\n        /*\n        let columns = [\n          { field: \"SequenceNumber\", header: \"#\", sortable: true, filter: true, id: 0, style: { width: '2%' }, expander: true },\n          { field: \"TransactionDate\", header: \"Txn Date\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1, },\n          { field: \"Narration\", header: \"Transaction\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1, },\n          { field: \"UniqueReferenceId\", header: \"Txn ID\", sortable: true, filter: true, filterMatchMode: 'contains', id: 2, },\n          { field: \"ClientTransactionType\", header: \"Description\", sortable: true, filter: true, filterMatchMode: 'contains', id: 3, },\n          { body: this.formatAmountChargedData.bind(this), field: \"AmountCharge\", header: \"Amount Charged\", sortable: true, filter: true, filterMatchMode: 'contains', id: 4 },\n          { body: this.formatPaymentData.bind(this), field: \"PaymentAmount\", header: \"Payment Amount\", sortable: true, filter: true, filterMatchMode: 'contains', id: 5 },\n          { field: \"PaymentMode\", header: \"Payment Mode(Status)\", sortable: true, filter: true, filterMatchMode: 'contains', id: 6 },\n          { field: \"CreatedBy\", header: \"Added By\", sortable: true, filter: true, filterMatchMode: 'contains', id: 7 },\n          // { field: \"UpdatedBy\", header: \"Updated by\", sortable: true, filter: true, filterMatchMode: 'contains', id: 8 },\n          { body: this.formatBalanceData.bind(this), field: \"Balance\", header: \"Balance\", sortable: true, filter: true, filterMatchMode: 'contains', id: 9 },\n          { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, filterMatchMode: 'contains', id: 10, style: { width: '12%' } }\n        ];*/\n\n        /*this.colOptions = [];\n        for (let col of columns) {\n          this.colOptions.push({ label: col.header, value: col });\n        }*/\n\n    }\n\n    componentDidMount() {\n\n        this.setState({ newEntryDate: moment().format('YYYY-MM-DD') })\n        if (this.props.match.params.constructor === Object && Object.keys(this.props.match.params).length !== 0) {\n            this.setState({ policyId: this.props.match.params.id, EntityId: this.props.EntityId, EntityType: this.props.EntityType, CurrencySymbol: this.props.CurrencySymbol, RenewalDate: this.props.RenewalDate, Currency: this.props.currency });\n        }\n        this.getAccountDetails();\n        this.getDropDownValues();\n        this.getPaymentMode();\n        this.getReturnPaymentMode();\n        this.getJournalDebitData();\n        this.getJournalCreditData();\n        this.getPaymentStatus();\n        this.getDropDownValues('POLICYCOUNTRY', 'countryList', 'StringMapName');\n        this.getUserBankAccountDetails();\n        this.getPolicyDetails();\n        this.getPaymentDetails();\n        this.getLapsePolicyDetails();\n\n        this.isGenerateRenewal();\n    }\n\n    isGenerateRenewal() {\n        const data = { policyId: this.props.match.params.id };\n        api.post(APIConstant.path.isGenerateRenewal, data).then(res => {\n            console.log('PolicyAccount isGenerateRenewal', res);\n            if (res.success) {\n                if (!CommonConfig.isEmpty(res.data[0].returnValue) && res.data[0].returnValue != 0) {\n                    console.log('res.data[0].returnValue', res.data[0].returnValue);\n                    this.setState({ isGenerateRenewal: res.data[0].returnValue, PremiumType: 'Renewal', isPolicyRenewal: 1 })\n                }\n            } else {\n                console.log('error');\n            }\n        }).catch(err => {\n\n        });\n    }\n\n    getPaymentDetails() {\n        try {\n            const data = {\n                policyId: this.props.match.params.id,\n            };\n            api.post('api/getpaymentholderdetails', data).then(res => {\n                if (res.success) {\n\n                    let resdata = res.data[0];\n                    this.setState({\n                        EntityId: resdata[0].EntityId,\n                        EntityType: resdata[0].EntityType,\n                        RenewalDate: resdata[0].RenewalDate,\n                        Forename: resdata[0].Forename,\n                        Surname: resdata[0].Surname,\n                        EmailId: resdata[0].EmailId,\n                        ContactTelephoneNumber: resdata[0].CountryCode + ' ' + resdata[0].AreaCode + ' ' + CommonConfig.formatPhoneNumber(resdata[0].Phone),\n                        // SelectSavedCard:res.data[0].SelectSavedCard,\n                        // CardholderName: res.data[0].CardholderName,\n                        // CardNumber: res.data[0].CardNumber,\n                        // CardType: res.data[0].CardType,\n                        // ExpiryMonth: res.data[0].ExpiryMonth,\n                        // ExpiryYear: res.data[0].ExpiryYear,\n                        // IsSelectedCard: res.data[0].IsSelectedCard,\n                    });\n                } else {\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getPolicyDetails() {\n        try {\n            const data = {\n                policyId: this.props.match.params.id,\n            };\n            api.post('api/getPolicyComputation', data).then(res => {\n                if (res.success) {\n                    console.log(\"-i-i-i-i--i-i--i---i---i\", res.data[0]);\n                    let resdata = res.data[0];\n                    this.setState({ PolicyComputation: resdata });\n                    console.log(\"-i-i-i-i--i-i--i---i---i\", this.state.PolicyComputation);\n                } else {\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getDropDownValues(stringMapType, setStateName, orderBy) {\n        try {\n            const data = {\n                stringmaptype: stringMapType,\n                orderby: orderBy\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    this.setState({ [setStateName]: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n        }\n    }\n\n    getJournalDebitData() {\n        try {\n            const data = {\n                stringmaptype: 'JOURNALENTRYDEBIT',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    var journalDebitData = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        journalDebitData.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    this.setState({ journalDebitData: journalDebitData });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getJournalCreditData() {\n        try {\n            const data = {\n                stringmaptype: 'JOURNALENTRYCREDIT',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    var journalCreditData = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        journalCreditData.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    this.setState({ journalCreditData: journalCreditData });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getPaymentMode() {\n        try {\n            const data = {\n                stringmaptype: 'PAYMENTMODE',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    var paymentMode = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        paymentMode.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    console.log(\"paymentMode-----\", paymentMode);\n                    this.setState({ paymentModearr: paymentMode });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getReturnPaymentMode() {\n\n        try {\n            const data = {\n                stringmaptype: 'RETURNPAYMENTMODE',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    var returnPaymentMode = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        returnPaymentMode.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    this.setState({ returnPaymentModearr: returnPaymentMode });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getPaymentStatus() {\n        try {\n            const data = {\n                stringmaptype: 'PAYMENTSTATUS',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    var paymentStatus = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        paymentStatus.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    this.setState({ paymentStatusarr: paymentStatus });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    getAccountDetails() {\n        try {\n            // debugger\n            let data = {\n                PolicyId: this.props.match.params.id\n            }\n            api.post('api/getDebitAccountList', data).then(res => {\n                console.log(\"getDebitAccountList\", res);\n\n                let accountData = res.data[0];\n                if (res.success) {\n\n                    if (accountData.length) {\n                        var duePayment = accountData[0].ClosingBalance;\n                    } else {\n                        duePayment = 0.00;\n                    }\n\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < accountData.length; i++) {\n\n                        let PaymentMode = \"\";\n                        if (accountData[i].PaymentMode == \"null\") {\n                        } else if (accountData[i].PaymentMode) {\n                            PaymentMode = accountData[i].PaymentMode + ' (' + accountData[i].PaymentStatus + ')';\n                        }\n\n                        var CreatedBy = CommonConfig.isEmpty(accountData[i].CreatedBy) ? '' : accountData[i].CreatedByName + \" (\" + moment(accountData[i].CreatedOn).format(CommonConfig.dateFormat.dateTime) + \")\";\n\n                        var UpdatedBy = CommonConfig.isEmpty(accountData[i].UpdatedBy) ? '' : accountData[i].CreatedByName + \" (\" + moment(accountData[i].UpdatedOn).format(CommonConfig.dateFormat.dateTime) + \")\";\n\n                        formattedData.push({\n                            CurrencySymbol: this.props.CurrencySymbol,\n                            Id: accountData[i].Id,\n                            PolicyAccountId: accountData[i].PolicyAccountId,\n                            DocumentId: accountData[i].DocumentId,\n                            SequenceNumber: accountData[i].Id,\n                            CreatedOn: moment(accountData[i].CreatedOn).format(CommonConfig.dateFormat.dateOnly),\n                            CreatedOnDate: accountData[i].CreatedOn,\n                            ClientTransactionType: accountData[i].ClientTransactionType,\n                            TransactionUniqueReferenceId: accountData[i].TransactionUniqueReferenceId,\n                            UniqueReferenceId: accountData[i].UniqueReferenceId,\n                            ReferenceId: accountData[i].ReferenceId,\n                            Description: accountData[i].Description,\n                            ChargeAmount: accountData[i].ChargeAmount,\n                            ChargeFeeAmount: accountData[i].ChargeFeeAmount,\n                            TotalChargeAmount: accountData[i].TotalChargeAmount,\n                            AmountCharge: accountData[i].TotalChargeAmount,\n                            PaymentAmount: accountData[i].PaymentAmount,\n                            Outstanding: accountData[i].Outstanding,\n                            PaymentMode: PaymentMode,\n                            CreatedBy: CreatedBy,\n                            UpdatedBy: UpdatedBy,\n                            Balance: accountData[i].Balance,\n                            TransactionType: accountData[i].TransactionType,\n                            PaymentModeName: accountData[i].PaymentMode,\n                            TransactionDate: moment(accountData[i].TransactionDate).format(CommonConfig.dateFormat.dateOnly),\n                            PaymentStatus: accountData[i].PaymentStatus,\n                            Note: accountData[i].Note,\n                            IsReceiptGenerated: CommonConfig.isEmpty(accountData[i].IsReceiptGenerated) ? 0 : accountData[i].IsReceiptGenerated.data[0],\n                            ReceiptDocumentId: CommonConfig.isEmpty(accountData[i].ReceiptDocumentId) ? '' : accountData[i].ReceiptDocumentId,\n                            URL: CommonConfig.isEmpty(accountData[i].URL) ? '' : accountData[i].URL,\n                            RelatedReferenceId: accountData[i].RelatedReferenceId,\n                            SystemEntryType: accountData[i].SystemEntryType,\n                            RenewalOrInceptionDate: accountData[i].RenewalOrInceptionDate,\n                            Narration: accountData[i].Narration,\n                            BatchEntryId: accountData[i].BatchEntryId,\n                            Balance: accountData[i].Balance,\n                            Actions: accountData[i].Actions,\n                            TotalPaymentAmount: accountData[i].TotalPaymentAmount\n                        });\n                    }\n                    let firstPage = (formattedData.length) ? '1' : '0';\n                    let lastPage = (this.state.rowsPerPage < formattedData.length) ? this.state.rowsPerPage : formattedData.length;\n                    let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n                    this.setState({ arr: formattedData, str: str, paymentDue: duePayment, policyAccountList: accountData });\n                    console.log(\"formattedData\", this.state.arr);\n                } else {\n                    console.log(\"getAccountDetails > error 3\", res);\n                }\n            }).catch(err => {\n                console.log(\"getAccountDetails > error 2\", err);\n            });\n        } catch (err) {\n            console.log(\"getAccountDetails > error 1\", err);\n        }\n    }\n\n    getDropDownValues(stringMapType, setStateName) {\n        try {\n            const data = {\n                stringmaptype: stringMapType,\n                orderby: 'sortorder'\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    this.setState({ [setStateName]: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n        }\n    }\n\n    getPageString = (e) => {\n        let firstPage = e.first + 1;\n        let l = e.rows * (e.page + 1);\n        let lastPage = (l < this.state.arr.length) ? l : this.state.arr.length\n        var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arr.length + ' records';\n        this.setState({ selectedPage: e.first, str: str, rowsPerPage: e.rows });\n    }\n\n    onColumnToggle(event) {\n        let valueInOrder = event.value.sort((x, y) => { return x.id - y.id });\n        this.setState({ cols: valueInOrder });\n    }\n\n    actionTemplate(rowData, column) {\n        // console.log(\"actionTemplate\", rowData);\n        var path = apiBase + \"\" + rowData.URL;\n        return <div>\n            {/* {(rowData.TransactionType !== 'Payment') ? ( */}\n            <BTN type=\"button\" icon=\"pi pi-eye\" className=\"p-button-primary\" tooltip=\"View\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => this.editAccount(e, rowData)}>\n            </BTN>\n            {/* ) : (null)} */}\n\n            {/* <BTN type=\"button\" icon=\"pi pi-trash\" className=\"p-button-danger\" tooltip=\"Delete\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => this.showDeletePaymentPopup(e, rowData)}>\n      </BTN> */}\n\n            {(rowData.TransactionType === 'Payment') ? (\n                <BTN type=\"button\" icon=\"pi pi-file\" className=\"p-button-primary\" tooltip=\"Generate Receipt of Payment\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => this.generateReceipt(rowData)}>\n                </BTN>\n            ) : (\n                    null\n                )}\n\n            {(rowData.TransactionType === 'Payment' && rowData.IsReceiptGenerated === 1) ? (\n                <BTN type=\"button\" icon=\"pi pi-eye\" className=\"p-button-warning\" tooltip=\"View Receipt of Payment\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => window.open(path, \"_blank\")} >\n                </BTN>\n            ) : (null)}\n\n        </div>;\n    }\n\n    generateReceipt = (rowData) => {\n        console.log(\"generateReceipt\", rowData);\n        if (rowData.IsReceiptGenerated === 1) {\n            this.setState({ toggleModal: true, regenerateDoc: rowData })\n        } else {\n            let data = {\n                PolicyAccountId: rowData.PolicyAccountId,\n                loggedInUserId: CommonConfig.loggedInUserId()\n            }\n            api.post('api/generateReciept', data).then(res => {\n                if (res.success) {\n                    console.log(\"generateReceipt\", res.data);\n                    toast.success(res.data.message);\n                    setTimeout(function () {\n                        window.location.reload();\n                    }, 1000);\n                }\n            });\n        }\n    }\n\n    againGenerateReceipt() {\n        let data = {\n            PolicyAccountId: this.state.regenerateDoc.PolicyAccountId,\n            loggedInUserId: CommonConfig.loggedInUserId()\n        }\n        api.post('api/generateReciept', data).then(res => {\n            if (res.success) {\n                toast.success(res.data.message);\n                setTimeout(function () {\n                    window.location.reload();\n                }, 1000);\n            }\n        });\n    }\n\n    hidePopup() {\n        this.setState({ toggleModal: false })\n    }\n\n    formatAmountChargedData(cell, rowData) {\n        console.log(\"formatAmountChargedData\", this);\n        return (\n            <div style={{ float: 'right' }}>{<i className={rowData.CurrencySymbol} ></i>}{(CommonConfig.isEmpty(rowData.TotalChargeAmount) ? ('0') : (rowData.TotalChargeAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}</div>\n        )\n    }\n\n    formatPaymentData(cell, rowData) {\n        return (\n            <div style={{ float: 'right' }}>{<i className={rowData.CurrencySymbol} ></i>}{(CommonConfig.isEmpty(rowData.TotalPaymentAmount) ? ('0') : (rowData.TotalPaymentAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}</div>\n        )\n    }\n\n    formatBalanceData(cell, rowData) {\n        return (\n            <div style={{ float: 'right' }}>{<i className={rowData.CurrencySymbol} ></i>}{(CommonConfig.isEmpty(rowData.Balance) ? ('0') : (rowData.Balance.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}</div>\n        )\n    }\n\n    editAccount = (e, rowData) => {\n        this.setState({ PolicyAccountId: rowData.PolicyAccountId, referenceId: rowData.ReferenceId });\n        if (rowData.TransactionType == 'Debit') {\n            this.setState({ paymentAmountError: false, newEntryDateError: false, descriptionError: false, paymentModeError: false, chargeAmountError: false, isEdit: true })\n        }\n        else if (rowData.TransactionType == 'Credit') {\n            this.setState({ newEntryDateError: false, descriptionError: false, paymentAmountError: false, paymentModeError: false, chargeAmountError: false, isEdit: true })\n        } else {\n            this.setState({ newEntryDateError: false, descriptionError: false, paymentAmountError: false, paymentModeError: false, chargeAmountError: false, isEdit: true, isAccountRecordEdit: true, entryTypeError: false })\n        }\n\n        setTimeout(() => {\n\n            if (rowData.TransactionType == 'Debit' || rowData.TransactionType == 'Credit') {\n                this.showJournalEntryPopup(rowData);\n            } else {\n                if (rowData.TransactionType == 'Payment') {\n                    this.showMakePaymentPopup(rowData);\n                } else {\n                    this.showReturnPaymentPopup(rowData);\n                }\n            }\n\n        }, 100);\n    }\n\n    showJournalEntryPopup = (rowData) => {\n        if (rowData === undefined) {\n            this.resetAccountForm();\n        } else {\n            this.setState({\n                PolicyAccountId: rowData.PolicyAccountId,\n                newEntryDate: moment(rowData.TransactionDate, 'DD/MM/YYYY').format(\"YYYY-MM-DD\"),\n                transactionType: rowData.TransactionType,\n                referenceId: rowData.ReferenceId,\n                description: rowData.Description,\n                chargeAmount: rowData.ChargeAmount,\n                chargeFee: rowData.ChargeFeeAmount,\n                totalChargeAmount: rowData.TotalChargeAmount,\n                paymentAmount: rowData.PaymentAmount,\n                paymentMode: rowData.PaymentModeName,\n                paymentStatus: rowData.PaymentStatus,\n                note: rowData.Note,\n                isMakePayment: false,\n                isReturnPayment: false,\n            });\n            this.calculateBalanceAFTPay();\n        }\n\n        this.setState({ toggleNewEntryModal: true, accountData: rowData });\n    }\n\n    showMakePaymentPopup(rowData) {\n        if (rowData === undefined) {\n            this.getPolicyOutstandingTransaction();\n        } else {\n            this.setState({ isEdit: true });\n            this.getBatchPaymentDetails(rowData);\n        }\n    }\n\n    hideMakePaymentPopup() {\n        this.setState({ isPaymentPopup: false, transactionType: 'Payment', description: '', paymentAmount: '', descriptionError: false, paymentAmountError: false, existOutstanding: 0 });\n    }\n\n    async saveMakePaymentEntry() {\n        try {\n\n            if (this.state.newEntryDateError) {\n                toast.error('Please Enter Transaction Date');\n            } else if (this.state.descriptionError) {\n                toast.error('Please Enter Description');\n            } else if (this.state.paymentAmountError) {\n                toast.error('Please Enter Payment Amount');\n            } else if (this.state.paymentModeError) {\n                toast.error('Please Select Payment Mode');\n            } else if (this.state.paymentAmount == 0) {\n                toast.error('Payment amount can not be 0.');\n            } else if (this.validateTransactionsTotal()) {\n                toast.error('Total Amount Applied must be match with Payment Amount');\n            } else {\n                let data = {\n                    PolicyId: this.props.match.params.id,\n                    EntryType: '',\n                    NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n                    TransactionType: this.state.transactionType,\n                    ReferenceId: this.state.referenceId,\n                    Description: this.state.description,\n                    PaymentAmount: this.state.paymentAmount,\n                    PaymentMode: this.state.paymentMode,\n                    PaymentStatus: \"Success\",\n                    Note: this.state.note,\n                    CreatedBy: CommonConfig.loggedInUserId(),\n                    PaymentEntries: this.state.OutstandingTransactions,\n                    LanguageId: this.state.LanguageId\n                };\n                if (data.PaymentMode == \"Debit/Credit Card\") {\n\n                    if (this.state.CardholderName === '' || this.state.CardholderName === null || this.state.CardholderName === 'null' || this.state.CardholderName === 'NULL' || this.state.CardholderName === 'undefined' || this.state.CardholderName === undefined) {\n                        this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter CardholderName\");\n                        return;\n                    } else if (this.state.CardNumber === '' || this.state.CardNumber === null || this.state.CardNumber === 'null' || this.state.CardNumber === 'NULL' || this.state.CardNumber === 'undefined' || this.state.CardNumber === undefined) {\n                        this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter CardNumber\");\n                        return;\n                    } else if (this.state.CardType === '' || this.state.CardType === null || this.state.CardType === 'null' || this.state.CardType === 'NULL' || this.state.CardType === 'undefined' || this.state.CardType === undefined) {\n                        this.show('CardType', true, \"CardTypeError\", \"Select CardType\");\n                        return;\n                    } else if (this.state.ExpiryMonth === '' || this.state.ExpiryMonth === null || this.state.ExpiryMonth === 'null' || this.state.ExpiryMonth === 'NULL' || this.state.ExpiryMonth === 'undefined' || this.state.ExpiryMonth === undefined) {\n                        this.show('ExpiryMonth', true, \"ExpiryMonthError\", \"Select ExpiryMonth\");\n                        return;\n                    } else if (this.state.ExpiryYear === '' || this.state.ExpiryYear === null || this.state.ExpiryYear === 'null' || this.state.ExpiryYear === 'NULL' || this.state.ExpiryYear === 'undefined' || this.state.ExpiryYear === undefined) {\n                        this.show('ExpiryYear', true, \"ExpiryYearError\", \"Select ExpiryYear\");\n                        return;\n                    } else if (this.state.CVV === '' || this.state.CVV === null || this.state.CVV === 'null' || this.state.CVV === 'NULL' || this.state.CVV === 'undefined' || this.state.CVV === undefined) {\n                        this.show(\"CVV\", true, \"CVVError\", \"Please enter valid CVV\");\n                        return;\n                    } else {\n                        const params = new URLSearchParams();\n                        params.append('CardNumber', this.state.CardNumber);\n                        params.append('CardholderName', this.state.CardholderName);\n                        params.append('ExpiryMonth', this.state.ExpiryMonth);\n                        params.append('ExpiryYear', this.state.ExpiryYear);\n                        params.append('CVV', this.state.CVV);\n                        params.append('TotalAmount', data.PaymentAmount);\n                        params.append('Currency', this.state.Currency);\n                        params.append('amount', data.PaymentAmount);\n                        await axios({\n                            method: 'post',\n                            url: CommonConfig.phpapi,\n                            data: params\n                        }).then(response => {\n                            if (response.data.responseCode == \"00\") {\n                                toast.success(\"Payment has been done successfully.\");\n                                console.log(\"payment\", response.data);\n                                // console.log(\"fdsdsdffsd\",response.data.timestamp);\n                                // console.log(\"fdsdsdffsd\",response.data.transactionReference.transactionId);\n                                // console.log(\"fdsdsdffsd\",response.data.transactionReference.orderId);\n                                var renewalPolicy = {\n                                    RenewalPolicyDate: this.state.RenewalDate,\n                                    PolicyNo: this.state.policyNumber,\n                                    PolicyHolderForeName: this.state.Forename,\n                                    PolicyHolderSurName: this.state.Surname,\n                                    ContactNo: this.state.ContactTelephoneNumber,\n                                    PolicyHolderEmail: this.state.EmailId,\n                                    Amount: data.PaymentAmount,\n                                    CardHolderName: this.state.CardholderName,\n                                    CardNumber: this.state.CardNumber,\n                                    CardType: this.state.CardType,\n                                    ExpiryMonth: this.state.ExpiryMonth,\n                                    ExpiryYear: this.state.ExpiryYear,\n                                    Cvv: this.state.CVV,\n                                    PaymentSource: 'Evolution',\n                                    Currency: this.state.Currency,\n                                    PaymentTimestamp: response.data.timestamp,\n                                    PaymentTransactionId: response.data.transactionReference.transactionId,\n                                    PaymentOrderId: response.data.transactionReference.orderId\n                                };\n                                api.post('api/renewalPolicy', renewalPolicy).then(res => {\n                                    console.log(\"res\", res);\n                                    this.saveMakePaymentEntryCallAPI(data);\n                                }).catch(err => {\n                                    toast.error(\"Payment has been done successfully but not able to add entry in database.\");\n                                    console.log(\"addUpdateAccountEntry error 2\", err);\n                                });\n                            }\n                            else {\n                                toast.error(\"payment not done\");\n                            }\n                        }).catch(error => {\n                            console.log(error);\n                        });\n                    }\n                }\n                else {\n                    this.saveMakePaymentEntryCallAPI(data);\n                }\n\n            }\n        } catch (error) {\n            console.log(\"saveMakePaymentEntry error 1\", error);\n        }\n    }\n\n    saveMakePaymentEntryCallAPI(data) {\n        console.log(\"saveMakePaymentEntry-request\", JSON.stringify(data));\n        try {\n            api.post('api/saveMakePaymentEntry', data).then(res => {\n                console.log(\"saveMakePaymentEntry-response\", res.data);\n                if (res.success && res.data.success) {\n\n                    let accountEntries = res.data.data[0].AccountEntries;\n                    let accountRecord = accountEntries.split(',');\n\n                    console.log(\"saveMakePaymentEntry-accountRecord\", accountRecord);\n\n                    for (var i = 0; i < accountRecord.length; i++) {\n                        if (!CommonConfig.isEmpty(accountRecord[i])) {\n                            let generateRecieptData = {\n                                PolicyAccountId: accountRecord[i],\n                                loggedInUserId: CommonConfig.loggedInUserId()\n                            }\n                            api.post('api/generateReciept', generateRecieptData).then(generateRecieptRes => {\n                                console.log(\"generateReciept \", i, accountRecord.length, generateRecieptRes);\n                                if (i == accountRecord.length) {\n                                    this.hideMakePaymentPopup();\n                                    toast.success(res.data.message);\n                                    setTimeout(function () {\n                                        window.location.reload();\n                                    }, 1000);\n                                }\n                            });\n                        }\n                    }\n                }\n            }).catch(err => {\n                toast.error(\"Not able to add entry in database.\");\n                console.log(\"saveMakePaymentEntry-err\", err);\n            });\n        } catch (error) {\n            toast.error(\"Not able to add entry in database.\");\n            console.log(\"saveMakePaymentEntry-err\", error);\n        }\n\n    }\n\n    validateTransactionsTotal() {\n        let OutstandingTransactions = this.state.OutstandingTransactions;\n        let PaymentAmount = this.state.paymentAmount;\n        let TotalAmount = 0;\n\n        for (let i = 0; i < OutstandingTransactions.length; i++) {\n            TotalAmount = parseFloat(TotalAmount) + parseFloat(OutstandingTransactions[i].AmountApplied);\n        }\n\n        if (PaymentAmount == TotalAmount) {\n            return false;\n        }\n        return true;\n    }\n\n    showReturnPaymentPopup(rowData) {\n\n        console.log(\"showReturnPaymentPopup>\", rowData);\n\n        if (rowData === undefined) {\n            var statusDesc = this.state.returnPaymentData.ClientTransactionType + \" : Return Payment\";\n            this.setState({\n                toggleNewEntryModal: true,\n                transactionType: 'ReturnPayment',\n                isMakePayment: true,\n                isReturnPayment: true,\n                newEntryDateError: false,\n                chargeAmountError: false,\n                calculateBalanceAFTPay: 0,\n                description: statusDesc,\n                note: '',\n                paymentAmount: 0,\n                descriptionError: false,\n                paymentAmountError: false,\n                entryTypeError: false,\n                isEdit: false,\n                isAccountRecordEdit: false,\n                existOutstanding: 0\n            });\n            if (!CommonConfig.isEmpty(this.state.returnPaymentData)) {\n                this.setState({\n                    paymentAmount: Math.abs(this.state.returnPaymentData.Balance),\n                });\n            }\n        } else {\n            this.setState({\n                toggleNewEntryModal: true,\n                transactionType: 'ReturnPayment',\n                isMakePayment: true,\n                isReturnPayment: true,\n                calculateBalanceAFTPay: this.state.paymentDue,\n                description: rowData.Description,\n                paymentAmount: Math.abs(rowData.PaymentAmount),\n                paymentMode: rowData.PaymentMode,\n                note: rowData.Note,\n                isEdit: true,\n                isAccountRecordEdit: true,\n                newEntryDate: moment(rowData.TransactionDate).format(\"YYYY-MM-DD\"),\n                existOutstanding: rowData.Outstanding\n            });\n        }\n    }\n\n    showBankDetailsPopup() {\n        let accountNameError = CommonConfig.isEmpty(this.state.accountName) ? true : false;\n        let bankNameError = CommonConfig.isEmpty(this.state.bankName) ? true : false;\n        let bankCountryError = CommonConfig.isEmpty(this.state.bankCountry) ? true : false;\n        let IBANError = CommonConfig.isEmpty(this.state.IBAN) ? true : false;\n\n        this.setState({\n            toggleBnkDetailsModal: true, paymentAmountError: false,\n            accountNameError: accountNameError, bankNameError: bankNameError, bankCountryError: bankCountryError, IBANError: IBANError\n        });\n    }\n\n    showDeletePaymentPopup = (e, rowData) => {\n        this.setState({ toggleModalDel: true, delPolicyId: rowData });\n    }\n\n    deleteAccount = () => {\n        // console.log('deleteAccount state', this.state.delPolicyId.TransactionType);\n        // return;\n        let data = {\n            PolicyAccountId: this.state.delPolicyId.PolicyAccountId,\n            loggedInUserId: CommonConfig.loggedInUserId(),\n            DocumentId: this.state.delPolicyId.DocumentId,\n        }\n        try {\n            api.post('api/deleteAccountById', data).then(res => {\n                if (res.success) {\n                    if (res.data.success) {\n                        if (this.state.delPolicyId.TransactionType == 'Payment') {\n                            let data = {\n                                PolicyAccountId: this.state.delPolicyId.PolicyAccountId,\n                                loggedInUserId: CommonConfig.loggedInUserId()\n                            }\n                            api.post('api/updateTransactionOutstanding', data).then(response => {\n                                this.setState({ toggleModalDel: false, delPolicyId: '' });\n                                toast.success(res.data.message);\n                                setTimeout(function () {\n                                    window.location.reload();\n                                }, 1000);\n                            });\n                        } else {\n                            this.setState({ toggleModalDel: false, delPolicyId: '' });\n                            toast.success(res.data.message);\n                            setTimeout(function () {\n                                window.location.reload();\n                            }, 1000);\n                        }\n\n                    }\n                }\n            }).catch(err => {\n                console.log(\"err..\", err);\n            });\n        }\n        catch (err) {\n            console.log(\"err..\", err);\n        }\n    }\n\n    hideEntryPopup() {\n        this.setState({\n            toggleNewEntryModal: false, accountData: \"\", referenceId: '', description: '', ChargeAmount: 0, chargeFee: 0, paymentAmount: 0, PaymentAmount: 0, paymentStatus: '', paymentMode: '', descriptionError: true,\n            paymentAmountError: true, paymentModeError: true, paymentStatusError: true, PolicyAccountId: '', newEntryDate: moment().format(\"YYYY-MM-DD\"), isEdit: false, isAccountRecordEdit: false, returnPaymentData: {}\n        });\n        this.calculateBalanceAFTPay();\n    }\n\n    hideBankDetailsPopup() {\n        this.setState({\n            toggleBnkDetailsModal: false, accountNameError: false, bankNameError: false,\n            bankCountryError: false, IBANError: false, BICError: false,\n            accountName: this.state.bankDetailsRes.AccountName,\n            bankName: this.state.bankDetailsRes.BankName,\n            bankCountry: this.state.bankDetailsRes.Country,\n            IBAN: this.state.bankDetailsRes.IBAN,\n            BIC: this.state.bankDetailsRes.BIC,\n        });\n    }\n\n    hidedeletePopup() {\n        this.setState({ toggleModalDel: false })\n    }\n\n    async addUpdateAccountEntry() {\n        try {\n            if (\n                this.state.newEntryDateError === false && this.state.descriptionError === false && this.state.paymentAmountError === false &&\n                this.state.chargeAmountError === false && this.state.paymentModeError === false && this.state.entryTypeError === false\n            ) {\n                let accountForm = {\n                    PolicyId: this.props.match.params.id,\n                    PolicyAccountId: this.state.PolicyAccountId,\n                    EntryType: CommonConfig.isEmpty(this.state.entryType) ? '' : this.state.entryType,\n                    NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n                    TransactionType: this.state.transactionType,\n                    ReferenceId: this.state.referenceId,\n                    Description: this.state.description,\n                    ChargeAmount: this.state.chargeAmount,\n                    ChargeFeeAmount: this.state.chargeFee,\n                    TotalChargeAmount: this.state.totalChargeAmount,\n                    PaymentAmount: this.state.paymentAmount,\n                    PaymentMode: this.state.paymentMode,\n                    PaymentStatus: \"Success\",\n                    Note: this.state.note,\n                    CreatedBy: CommonConfig.loggedInUserId(),\n                    Outstanding: Number(this.state.outstanding),\n                    Premium: Number(this.state.updatedPremium),\n                    AdminFee: Number(this.state.updatedPremiumAdminFee),\n                    Levy: Number(this.state.updatedPremiumLevy),\n                    LessLevy: Number(this.state.updatedPremiumLessLevy),\n                    LanguageId: this.state.LanguageId\n                }\n\n                if (accountForm.TransactionType == 'ReturnPayment') {\n                    accountForm.TransactionUniqueReferenceId = this.state.returnPaymentData.UniqueReferenceId.toString();\n                }\n\n                var API = 'api/addUpdateAccountEntry';\n                if (this.state.isReturnPayment) {\n                    API = 'api/addReturnPaymentEntry';\n                }\n\n                console.log(\"addReturnPaymentEntry > \", accountForm);\n\n                api.post(API, accountForm).then(res => {\n                    console.log(\"addUpdateAccountEntry>\", res);\n                    if (res.success) {\n                        if (res.data.success) {\n                            if (this.state.isMakePayment && !this.state.isReturnPayment) {\n                                let generateRecieptData = {\n                                    PolicyAccountId: res.data.data,\n                                    loggedInUserId: CommonConfig.loggedInUserId()\n                                }\n                                api.post('api/generateReciept', generateRecieptData).then(generateRecieptRes => {\n                                    if (res.success) {\n                                        toast.success(res.data.message);\n                                        this.hideEntryPopup();\n                                        setTimeout(function () {\n                                            // window.location.reload();\n                                        }, 1000);\n                                    }\n                                });\n                            } else {\n                                toast.success(res.data.message);\n                                this.hideEntryPopup();\n                                setTimeout(function () {\n                                    window.location.reload();\n                                }, 1000);\n                            }\n                        } else {\n                            toast.error(res.data.message);\n                            this.hideEntryPopup();\n                            setTimeout(function () {\n                                window.location.reload();\n                            }, 1000);\n                        }\n                    }\n                }).catch(err => {\n                    console.log(\"addUpdateAccountEntry error 2\", err);\n                    this.hideEntryPopup();\n                    setTimeout(function () {\n                        window.location.reload();\n                    }, 1000);\n                });\n\n            } else {\n                this.show(\"newEntryDate\", this.state.newEntryDateError, \"newEntryDateError\", \"Please enter transaction date\")\n                this.show(\"description\", this.state.descriptionError, \"descriptionError\", \"Please enter description\")\n                this.show(\"paymentAmount\", this.state.paymentAmountError, \"paymentAmountError\", \"Please enter payment amount\");\n                this.show(\"chargeAmount\", this.state.chargeAmountError, \"chargeAmountError\", \"Please enter charge amount\");\n                this.show(\"paymentMode\", this.state.paymentModeError, \"paymentModeError\", \"Please select payment mode\");\n                this.show(\"entryType\", this.state.entryTypeError, \"entryTypeError\", \"Please select type\");\n            }\n        } catch (error) {\n            console.log(\"addUpdateAccountEntry error 1\", error);\n        }\n    }\n\n    getUserBankAccountDetails() {\n        try {\n            const data = { EntityId: this.props.EntityId, EntityType: this.props.EntityType };\n            console.log(\"getUserBankAccountDetails > req\", data);\n            api.post(APIConstant.path.getUserBankAccountDetails, data).then(res => {\n                console.log(\"getUserBankAccountDetails > res\", res);\n                if (res.data.length) {\n                    var BankExists = 1\n                    this.setState({ accountNameError: false, IBANError: false, BICError: false, bankNameError: false, bankCountryError: false });\n                } else {\n                    this.setState({\n                        EntityBankDetailId: '',\n                        accountName: '',\n                        IBAN: '',\n                        BIC: '',\n                        bankName: '',\n                        bankCountry: '',\n                        bankExists: 0,\n                        bankDetailsRes: []\n                    });\n                    this.setState({ accountNameError: true, IBANError: true, BICError: false, bankNameError: true, bankCountryError: true });\n                }\n                if (res.success) {\n                    this.setState({\n                        EntityBankDetailId: res.data[0].EntityBankDetailId,\n                        accountName: res.data[0].AccountName,\n                        IBAN: res.data[0].IBAN,\n                        BIC: res.data[0].BIC,\n                        bankName: res.data[0].BankName,\n                        bankCountry: res.data[0].Country,\n                        bankExists: BankExists,\n                        bankDetailsRes: res.data[0]\n                    });\n                } else {\n                    console.log(\"else\");\n                }\n            }).catch(err => {\n                console.log(\"sss\", err);\n            });\n        } catch (error) {\n            console.log(\"ssss\", error);\n        }\n    }\n\n    addUpdateBankDetails() {\n        try {\n\n            if (\n                this.state.accountNameError === false &&\n                this.state.bankNameError === false &&\n                this.state.bankCountryError === false &&\n                this.state.IBANError === false\n            ) {\n                let data = {\n                    EntityBankDetailId: this.state.EntityBankDetailId,\n                    entityId: this.props.EntityId,\n                    EntityType: this.props.EntityType,\n                    AccountName: this.state.accountName,\n                    IBAN: this.state.IBAN,\n                    BIC: this.state.BIC,\n                    BankName: this.state.bankName,\n                    Country: this.state.bankCountry,\n                    LoggedInUserId: CommonConfig.loggedInUserId()\n                }\n                api.post('api/addUpdateBankDetails', data).then(res => {\n                    if (res.success) {\n                        if (res.data.success) {\n                            toast.success(res.data.message);\n                            // window.location.reload();\n                        } else {\n                            toast.error(res.data.message);\n                        }\n                        setTimeout(() => {\n                            this.getUserBankAccountDetails();\n                            this.hideBankDetailsPopup();\n                        }, 100);\n                    }\n                }).catch(err => {\n                    console.log(\"addUpdateAccountEntry error 2\", err);\n                });\n            } else {\n                this.show(\"accountName\", this.state.accountNameError, 'accountNameError', 'Please enter Account Name');\n                this.show(\"bankName\", this.state.bankNameError, 'bankNameError', 'Please enter Bank Name.');\n                this.show(\"bankCountry\", this.state.bankCountryError, 'bankCountryError', 'Please select country.');\n                this.show(\"IBAN\", this.state.IBANError, 'IBANError', 'Please enter valid IBAN.');\n                //this.show(\"BIC\", this.state.BICError);\n            }\n\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n    clearBankDetails() {\n        try {\n            let data = {\n                EntityBankDetailId: this.state.EntityBankDetailId,\n                EntityId: this.props.EntityId,\n                LoggedInUserId: CommonConfig.loggedInUserId()\n            };\n            console.log(\"clearBankDetails\", data);\n            api.post('api/clearBankDetails', data).then(res => {\n                console.log(\"clearBankDetails > res\", res);\n                if (res.success) {\n                    if (res.data.success) {\n                        toast.success(res.data.message);\n                    } else {\n                        toast.error(res.data.message);\n                    }\n                    setTimeout(() => {\n                        this.getUserBankAccountDetails();\n                        this.hideBankDetailsPopup();\n                    }, 100);\n                }\n            }).catch(err => {\n                console.log(\"clearBankDetails error\", err);\n            });\n        } catch (error) {\n            console.log(\"clearBankDetails > error\", error);\n        }\n    }\n\n    handleDateChange = (e, type) => {\n        this.setState({ [type]: e });\n    }\n\n    onRadioBtnClick(radioSelected) {\n        this.setState({\n            newEntryDate: moment().format('YYYY-MM-DD'),\n            transactionType: 'Debit',\n            referenceId: '',\n            description: '',\n            chargeAmount: 0,\n            chargeFee: 0,\n            totalChargeAmount: 0,\n            paymentAmount: 0,\n            paymentMode: '',\n            paymentStatus: '',\n\n            note: '',\n            addedBy: '',\n            addedDate: '',\n            updatedBy: '',\n            updatedDate: ''\n        })\n        // this.resetAccountForm();\n        this.setState({\n            transactionType: radioSelected\n        });\n        if (radioSelected == 'Credit') {\n            this.setState({\n                paymentAmountError: true, chargeAmountError: false\n            });\n        }\n    }\n\n    selectType(value, type) {\n\n        if (type === 'paymentMode') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ paymentModeError: true, paymentMode: value });\n                this.show('paymentMode', true, \"paymentModeError\", \"Select payment mode\");\n            } else {\n                this.setState({ paymentModeError: false, paymentMode: value });\n                this.show('paymentMode', false, \"paymentModeError\", \"\");\n\n            }\n        }\n\n        if (type === 'paymentStatus') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ paymentStatusError: true, paymentStatus: value });\n                this.show('paymentStatus', true, \"paymentStatusError\", \"Select payment status\");\n            } else {\n                this.setState({ paymentStatusError: false, paymentStatus: value });\n                this.show('paymentStatus', false, \"paymentStatusError\", \"\");\n\n            }\n        }\n\n        if (type === 'bankCountry') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ bankCountryError: true, bankCountry: value });\n                this.show(\"bankCountry\", true, \"bankCountryError\", \"Please select Country\");\n            } else {\n                this.setState({ bankCountryError: false, bankCountry: value });\n                this.show(\"bankCountry\", false, \"bankCountryError\", \"\");\n            }\n        }\n\n        if (type === 'CardType') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ CardTypeError: true, CardType: value });\n                this.show('CardType', true, \"CardTypeError\", \"Select CardType\");\n            } else {\n                this.setState({ CardTypeError: false, CardType: value });\n                this.show('CardType', false, \"CardTypeError\", \"\");\n            }\n            // this.setState({ CardType: value });\n        }\n\n        if (type === 'ExpiryMonth') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ ExpiryMonthError: true, ExpiryMonth: value });\n                this.show('ExpiryMonth', true, \"ExpiryMonthError\", \"Select ExpiryMonth\");\n            } else {\n                this.setState({ ExpiryMonthError: false, ExpiryMonth: value });\n                this.show('ExpiryMonth', false, \"ExpiryMonthError\", \"\");\n            }\n            // this.setState({ ExpiryMonth: value });\n        }\n\n        if (type === 'ExpiryYear') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ ExpiryYearError: true, ExpiryYear: value });\n                this.show('ExpiryYear', true, \"ExpiryYearError\", \"Select ExpiryYear\");\n            } else {\n                this.setState({ ExpiryYearError: false, ExpiryYear: value });\n                this.show('ExpiryYear', false, \"ExpiryYearError\", \"\");\n            }\n            // this.setState({ ExpiryYear: value });\n        }\n\n        if (type === 'entryType') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ entryTypeError: true, entryType: value });\n                this.show('entryType', true, \"entryTypeError\", \"Please select type\");\n            } else {\n                this.setState({ entryTypeError: false, entryType: value, description: value });\n                this.show('entryType', false, \"entryTypeError\", \"\");\n            }\n        }\n\n    }\n\n    show(field, condition, errorField, message) {\n        if (condition) {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control is-invalid\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';\n        } else {\n            if (document.getElementById(field))\n                document.getElementById(field).className = \"form-control\";\n\n            if (document.getElementById(errorField))\n                document.getElementById(errorField).innerHTML = null;\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n        let nameRegExp = CommonConfig.RegExp.nameWithSpace;\n        let numberRegExp = CommonConfig.RegExp.number;\n        let decimalRegExp = CommonConfig.RegExp.decimalWithOne;\n        let allowAllWithSpace = CommonConfig.RegExp.allowAllWithSpace;\n        // let cardnumRegExp = /[^0-9]/;\n        // \"^(?:(?<visa>4[0-9]{12}(?:[0-9]{3})?)|\" +\n        // \"(?<mastercard>5[1-5][0-9]{14})|\" +\n        // \"(?<discover>6(?:011|5[0-9]{2})[0-9]{12})|\" +\n        // \"(?<amex>3[47][0-9]{13})|\" +\n        // \"(?<diners>3(?:0[0-5]|[68][0-9])?[0-9]{11})|\" +\n        // \"(?<jcb>(?:2131|1800|35[0-9]{3})[0-9]{11}))$\"\n        let cvvRegExp = /^[0-9]{3,4}$/;\n        let value = e.target.value;\n        if (e.target.name === 'newEntryDate') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ newEntryDateError: true });\n                this.show(\"newEntryDate\", true, \"newEntryDateError\", \"Please enter date\");\n            } else {\n                this.setState({ newEntryDateError: false, newEntryDate: e.target.value });\n                this.show(\"newEntryDate\", false, \"newEntryDateError\", \"\");\n            }\n        }\n\n        if (e.target.name === 'chargeAmount') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ chargeAmountError: true });\n                this.show(\"chargeAmount\", true, \"chargeAmountError\", \"Please enter charge fees \");\n            } else {\n                let nameRegEx = decimalRegExp;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ chargeAmountError: true });\n                    this.show(\"chargeAmount\", true, \"chargeAmountError\", \"Please enter valid charge fees\");\n                } else {\n                    this.setState({ chargeAmountError: false, chargeAmount: e.target.value });\n                    this.show(\"chargeAmount\", false, \"chargeAmountError\", \"\");\n                }\n            }\n        }\n\n        if (e.target.name === 'paymentAmount') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ paymentAmountError: true });\n                this.show(\"paymentAmount\", true, \"paymentAmountError\", \"Please enter charge fees \");\n            } else {\n                let nameRegEx = decimalRegExp;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ paymentAmountError: true });\n                    this.show(\"paymentAmount\", true, \"paymentAmountError\", \"Please enter valid charge fees\");\n                } else {\n                    this.setState({ paymentAmountError: false, paymentAmount: e.target.value });\n                    this.show(\"paymentAmount\", false, \"paymentAmountError\", \"\");\n                }\n            }\n            setTimeout(() => {\n                if (this.state.isTransferFundPopup) {\n                    this.calculateTransferFundPremium();\n                } else {\n                    this.calculatePremium();\n                }\n            }, 500);\n        }\n\n        if (e.target.name === 'chargeFee') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ chargeFeeError: true });\n                this.show(\"chargeFee\", true, \"chargeFeeError\", \"Please enter charge fees \");\n            } else {\n                let nameRegEx = numberRegExp;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ chargeFeeError: true });\n                    this.show(\"chargeFee\", true, \"chargeFeeError\", \"Please enter valid charge fees\");\n                } else {\n                    this.setState({ chargeFeeError: false, chargeFee: e.target.value });\n                    this.show(\"chargeFee\", false, \"chargeFeeError\", \"\");\n                }\n            }\n        }\n\n        if (e.target.name === 'description') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ descriptionError: true });\n                this.show(\"description\", true, \"descriptionError\", \"Please enter description \");\n            } else {\n                let nameRegEx = allowAllWithSpace;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ descriptionError: true });\n                    this.show(\"description\", true, \"descriptionError\", \"Please enter valid description\");\n                } else {\n                    this.setState({ descriptionError: false, description: e.target.value });\n                    this.show(\"description\", false, \"descriptionError\", \"\");\n                }\n            }\n        }\n\n        if (e.target.name === 'accountName') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ accountNameError: true });\n                this.show(\"accountName\", true, \"accountNameError\", \"Please enter Account Name \");\n            } else {\n                let nameRegEx = CommonConfig.RegExp.nameWithSpace;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ accountNameError: true });\n                    this.show(\"accountName\", true, \"accountNameError\", \"Please enter valid Account Name\");\n                } else {\n                    this.setState({ accountNameError: false, accountName: e.target.value });\n                    this.show(\"accountName\", false, \"accountNameError\", \"\");\n                }\n            }\n        }\n\n        if (e.target.name === 'bankName') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ bankNameError: true });\n                this.show(\"bankName\", true, \"bankNameError\", \"Please enter Bank Name\");\n            } else {\n                let nameRegEx = CommonConfig.RegExp.nameWithSpace;\n                let name = e.target.value;\n                if (!nameRegEx.test(name)) {\n                    this.setState({ bankNameError: true });\n                    this.show(\"bankName\", true, \"bankNameError\", \"Please enter valid Bank Name\");\n                } else {\n                    this.setState({ bankNameError: false, bankName: e.target.value });\n                    this.show(\"bankName\", false, \"bankNameError\", \"\");\n                }\n            }\n        }\n\n        if (e.target.name === 'IBAN') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ IBANError: true });\n                this.show(\"IBAN\", true, \"IBANError\", \"Please enter IBAN Number\");\n            } else {\n                // let nameRegEx = CommonConfig.RegExp.alphaNumeric;\n                let name = e.target.value;\n                if (IBAN.isValid(name)) {\n                    this.setState({ IBANError: false, IBAN: name });\n                    this.show(\"IBAN\", false, \"IBANError\", \"\");\n                } else {\n                    this.setState({ IBANError: true });\n                    this.show(\"IBAN\", true, \"IBANError\", \"Please enter valid IBAN Number\");\n                }\n            }\n        }\n\n        if (e.target.name === 'BIC') {\n            this.setState({ BICError: false });\n\n            /*if (CommonConfig.isEmpty(e.target.value)) {\n               this.setState({ BICError: true });\n               this.show(\"BIC\", true, \"BICError\", \"Please enter BIC Number\");\n             } else {\n               let nameRegEx = CommonConfig.RegExp.alphaNumeric;\n               let name = e.target.value;\n               if (!nameRegEx.test(name)) {\n                 this.setState({ BICError: true });\n                 this.show(\"BIC\", true, \"BICError\", \"Please enter valid BIC Number\");\n               } else {\n                 if (e.target.value.length < 8 || e.target.value.length > 11) {\n                   this.setState({ BICError: true, BIC: e.target.value });\n                   this.show(\"BIC\", true, \"BICError\", \"BIC number must be between 8 to 11 Characters\");\n                 } else {\n                   this.setState({ BICError: false, BIC: e.target.value });\n                   this.show(\"BIC\", false, \"BICError\", \"\");\n                 }\n               }\n             }*/\n        }\n\n        if (e.target.name === 'CardholderName') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ CardholderNameError: true });\n                this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter CardholderName\");\n            } else {\n                if (!nameRegExp.test(value)) {\n                    this.setState({ CardholderNameError: true });\n                    this.show(\"CardholderName\", true, \"CardholderNameError\", \"Please enter valid CardholderName\");\n                } else {\n                    this.setState({ CardholderNameError: false, CardholderName: value });\n                    this.show(\"CardholderName\", false, \"CardholderNameError\", \"\");\n                }\n\n            }\n        }\n\n        if (e.target.name === 'CardNumber') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ CardNumberError: true });\n                this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter CardNumber\");\n            } else {\n                // if (!cardnumRegExp.test(value)) {\n                //     this.setState({ CardNumberError: true });\n                //     this.show(\"CardNumber\", true, \"CardNumberError\", \"Please enter valid CardNumber\");\n                //   } else {\n                this.setState({ CardNumberError: false, CardNumber: value });\n                this.show(\"CardNumber\", false, \"CardNumberError\", \"\");\n                // }\n\n            }\n        }\n\n        if (e.target.name === 'CVV') {\n            if (CommonConfig.isEmpty(value)) {\n                this.setState({ CVVError: true });\n                this.show(\"CVV\", true, \"CVVError\", \"Please enter CVV\");\n            } else {\n                if (!cvvRegExp.test(value)) {\n                    this.setState({ CVVError: true });\n                    this.show(\"CVV\", true, \"CVVError\", \"Please enter valid CVV\");\n                } else {\n                    this.setState({ CVVError: false, CVV: value });\n                    this.show(\"CVV\", false, \"CVVError\", \"\");\n                }\n\n            }\n        }\n\n        this.calculateBalanceAFTPay();\n        this.totalChargeAmt();\n    }\n\n    handleChangeAmount(e, i) {\n\n        let value = e.target.value;\n        if (CommonConfig.isEmpty(value)) {\n            value = '';\n        }\n\n        let SystemOutstandingTransactions = this.state.SystemOutstandingTransactions;\n        let OutstandingTransactions = this.state.OutstandingTransactions;\n        let transaction = SystemOutstandingTransactions[i];\n\n        let AmountApplied = value;\n        let TotalDue = transaction.TotalDue;\n        let LevyTotalAmount = transaction.LevyTotalAmount;\n        let Outstanding = transaction.Outstanding;\n\n        OutstandingTransactions[i].AmountApplied = AmountApplied;\n\n        if (Outstanding >= AmountApplied) {\n            let UpdatedAdminFee = 0;\n            let OutstandingAfterPayment = 0;\n            var UpdatedLevy = 0;\n            var UpdatedNetPremium = 0;\n\n            OutstandingAfterPayment = Outstanding - AmountApplied;\n            UpdatedAdminFee = (transaction.AdminFee * AmountApplied) / TotalDue;\n            UpdatedLevy = (AmountApplied * LevyTotalAmount) / TotalDue;\n            UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n            OutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n            OutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n            OutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n            OutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n\n            this.show(\"AmountApplied\", false, \"AmountAppliedError\", \"\");\n        } else {\n            this.show(\"AmountApplied\", true, \"AmountAppliedError\", \"Please enter proper amount\");\n        }\n\n        this.setState({ OutstandingTransactions: OutstandingTransactions });\n\n    }\n\n    resetAccountForm() {\n        this.setState({\n            newEntryDate: moment().format('YYYY-MM-DD'),\n            transactionType: 'Debit',\n            referenceId: '',\n            description: '',\n            chargeAmount: 0,\n            chargeFee: 0,\n            totalChargeAmount: 0,\n            paymentAmount: 0,\n            paymentMode: '',\n            paymentStatus: '',\n            note: '',\n            addedBy: '',\n            addedDate: '',\n            updatedBy: '',\n            updatedDate: '',\n            PolicyAccountId: '',\n            isMakePayment: false,\n            isReturnPayment: false,\n            newEntryDateError: false,\n            descriptionError: true,\n            chargeAmountError: true,\n            paymentAmountError: false,\n            paymentModeError: false,\n            paymentStatusError: true\n        });\n        this.calculateBalanceAFTPay();\n        this.totalChargeAmt();\n    }\n\n    calculateBalanceAFTPay() {\n\n        if (this.state.paymentDue && this.state.paymentAmount) {\n            setTimeout(() => {\n                var calculateBalanceAFTPay = 0;\n                var calculateBalanceAFTPay = Number(this.state.paymentDue) - Number(this.state.paymentAmount);\n\n                this.setState({ calculateBalanceAFTPay: calculateBalanceAFTPay });\n            }, 100);\n            // console.log(\"calculateBalanceAFTPay\", this.state.calculateBalanceAFTPay);\n        }\n    }\n\n    totalChargeAmt() {\n\n        if (this.state.chargeAmount) {\n            setTimeout(() => {\n                var totalAmount = 0;\n                var totalAmount = Number(this.state.chargeAmount) + Number(this.state.chargeFee);\n\n                this.setState({ totalChargeAmount: totalAmount });\n            }, 100);\n            console.log(\"totalAmount\", this.state.totalAmount);\n        }\n    }\n\n    calculatePremium() {\n        try {\n\n            let SystemOutstandingTransactions = this.state.SystemOutstandingTransactions;\n            let OutstandingTransactions = this.state.OutstandingTransactions;\n            let PaymentAmount = this.state.paymentAmount;\n            var ExistOutstanding = Number(this.state.existOutstanding);\n            var RemainingPaymentAmount = PaymentAmount;\n\n            for (let i = 0; i < SystemOutstandingTransactions.length; i++) {\n\n                let transaction = SystemOutstandingTransactions[i];\n\n                let AmountApplied = 0;\n                let TotalDue = transaction.TotalDue;\n                let LevyTotalAmount = transaction.LevyTotalAmount;\n\n                let Outstanding = transaction.Outstanding;\n                let OutstandingAfterPayment = 0;\n                let UpdatedNetAmount = 0;\n                var UpdatedNetPremium = 0;\n                var UpdatedLevy = 0;\n                let UpdatedAdminFee = 0;\n\n                if (RemainingPaymentAmount > 0) {\n                    AmountApplied = (RemainingPaymentAmount <= Outstanding) ? RemainingPaymentAmount : Outstanding;\n                    OutstandingAfterPayment = Outstanding - AmountApplied;\n                    UpdatedAdminFee = (transaction.AdminFee * AmountApplied) / TotalDue;\n                    UpdatedNetAmount = AmountApplied - UpdatedAdminFee;\n                    UpdatedLevy = (AmountApplied * LevyTotalAmount) / TotalDue;\n                    UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n                    RemainingPaymentAmount = RemainingPaymentAmount - AmountApplied;\n                }\n\n                OutstandingTransactions[i].AmountApplied = Number(AmountApplied).toFixed(2);\n                OutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n                OutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n                OutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n                OutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n            }\n            this.setState({ OutstandingTransactions: OutstandingTransactions });\n\n        } catch (error) {\n            console.log(\"calculatePremium >> error\", error);\n        }\n    }\n\n    getCurrentDecription() {\n        let desc = \"\";\n        let policyAccountList = this.state.policyAccountList;\n        policyAccountList = policyAccountList.filter(function (val) {\n            return val.SystemEntryType != '';\n        });\n        if (policyAccountList.length) {\n            desc = policyAccountList[0].SystemEntryType;\n        }\n        return desc;\n    }\n\n    getPolicyOutstandingTransaction(rowData) {\n        console.log('rowData >', rowData);\n        let data = {\n            PolicyId: this.props.match.params.id,\n            LoggedInUserId: CommonConfig.loggedInUserId(),\n            UniqueReferenceId: ''\n        };\n        if (rowData !== undefined) {\n            data.UniqueReferenceId = rowData.UniqueReferenceId;\n        }\n        api.post('api/getPolicyOutstandingTransaction', data).then(res => {\n            console.log(\"getPolicyOutstandingTransaction res\", res);\n            if (res.success) {\n                if (res.data[0].length) {\n                    this.setState({ SystemOutstandingTransactions: res.data[0], OutstandingTransactions: res.data[0] });\n\n                    var statusDesc = rowData.ClientTransactionType; // this.getCurrentDecription();\n                    this.setState({ isPaymentPopup: true, transactionType: 'Payment', description: statusDesc, paymentAmount: res.data[0][0].Outstanding, descriptionError: false, paymentAmountError: false, existOutstanding: 0, isEdit: false, newEntryDateError: false });\n\n                    setTimeout(() => {\n                        this.calculatePremium();\n                    }, 100);\n\n                } else {\n                    toast.warn(\"There is no Payment Due for this Policy.\");\n                }\n            }\n        }).catch(err => {\n            console.log(\"getPolicyOutstandingTransaction error\", err);\n        });\n    }\n\n    getBatchPaymentDetails(rowData) {\n        let data = {\n            PolicyAccountId: this.state.PolicyAccountId\n        }\n        console.log(\"getBatchPaymentDetails rowdata \", rowData);\n        api.post('api/getBatchPaymentDetails', data).then(res => {\n            console.log(\"getBatchPaymentDetails res\", res);\n            if (res.success) {\n                if (res.data.length) {\n                    var OutstandingTransactions = res.data;\n                    this.setState({ OutstandingTransactions: OutstandingTransactions });\n\n                    console.log(\"getBatchPaymentDetails > OutstandingTransactions\", OutstandingTransactions);\n\n                    var paymentAmountTotal = 0;\n\n                    for (var i in OutstandingTransactions) {\n                        paymentAmountTotal += parseFloat(OutstandingTransactions[i].PaymentAmount);\n                    }\n\n                    this.setState({\n                        isPaymentPopup: true, transactionType: 'Payment',\n                        paymentAmountError: false, paymentAmount: paymentAmountTotal.toFixed(2),\n                        description: rowData.Description, descriptionError: false,\n                        existOutstanding: 0, isEdit: true,\n                        newEntryDate: moment(rowData.TransactionDate).format(\"YYYY-MM-DD\"),\n                        paymentMode: rowData.PaymentMode,\n                        note: rowData.Note\n                    });\n                }\n            }\n        }).catch(err => {\n            console.log(\"getBatchPaymentDetails error\", err);\n        });\n    }\n\n    shortWriteoff(UniqueReferenceId, writeoffAmount) {\n        try {\n            let data = {\n                PolicyId: this.state.policyId,\n                UniqueReferenceId: UniqueReferenceId,\n                PaymentAmount: writeoffAmount,\n                LoggedInUserId: CommonConfig.loggedInUserId()\n            }\n            console.log(\"shortWriteoff > \", data);\n            api.post('api/shortWriteoff', data).then(res => {\n                console.log(\"shortWriteoff > res >\", res);\n                if (res.success) {\n                    if (res.data.success) {\n                        toast.success(res.data.message);\n                        window.location.reload();\n                    } else {\n                        toast.error(res.data.message);\n                    }\n                }\n            }).catch(err => {\n                console.log(\"shortWriteoff > error > 1\", err);\n            });\n\n        } catch (error) {\n            console.log(\"shortWriteoff > error > 2\", error);\n        }\n    }\n\n    getLapsePolicyDetails() {\n        try {\n            let data = {\n                PolicyId: this.props.match.params.id,\n                LoggedInUserId: CommonConfig.loggedInUserId()\n            }\n            api.post('api/getLapsePolicyDetails', data).then(res => {\n                console.log(\"getLapsePolicyDetails > res >\", res);\n                if (res.success) {\n                    if (res.data.length) {\n                        this.setState({\n                            IsLapsePolicy: res.data[0].IsLapsePolicy,\n                            DaysOverdue: res.data[0].DaysOverdue,\n                            RenewalDate: res.data[0].RenewalDate\n                        });\n                    }\n                }\n            }).catch(err => {\n                console.log(\"getLapsePolicyDetails > error > 1\", err);\n            });\n\n        } catch (error) {\n            console.log(\"getLapsePolicyDetails > error > 2\", error);\n        }\n    }\n\n    showLapsePolicyPopup() {\n        this.setState({ IsLapsePolicyPopup: true, lapsePolicyNote: '' });\n    }\n\n    hideLapsePolicyPopup() {\n        this.setState({ IsLapsePolicyPopup: false, lapsePolicyNote: '' });\n    }\n\n    lapsePolicy() {\n        try {\n            let data = {\n                PolicyId: this.state.policyId,\n                Note: this.state.lapsePolicyNote,\n                LoggedInUserId: CommonConfig.loggedInUserId()\n            }\n            api.post('api/lapsePolicy', data).then(res => {\n                console.log(\"lapsePolicy > res >\", res);\n                if (res.success) {\n                    if (res.data.success) {\n                        toast.success(res.data.message);\n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 100);\n                    } else {\n                        toast.error(res.data.message);\n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 100);\n                    }\n                } else {\n                    toast.error(res.message);\n                    setTimeout(() => {\n                        window.location.reload();\n                    }, 100);\n                }\n            }).catch(err => {\n                console.log(\"lapsePolicy > error > 1\", err);\n                setTimeout(() => {\n                    window.location.reload();\n                }, 100);\n            });\n\n        } catch (error) {\n            console.log(\"lapsePolicy > error > 2\", error);\n        }\n    }\n\n    actionFormatter = (cell, rowData) => {\n        console.log(\"actionFormatter > \", cell, rowData, this);\n\n        var tempActions = rowData.Actions;\n        var actions = CommonConfig.isEmpty(tempActions) ? [] : tempActions.split(',');\n        console.log('actionFormatter > actions > ', actions);\n\n        var accountRecordMenu = [];\n        if (actions.length) {\n            for (var i = 0; i < actions.length; i++) {\n                if (actions[i] != '') {\n                    accountRecordMenu.push({\n                        label: actions[i],\n                        data: rowData,\n                        UniqueReferenceId: rowData.UniqueReferenceId,\n                    });\n                }\n            }\n        }\n\n        var path = apiBase + \"\" + rowData.URL;\n        return (\n            <div className={'Account' + rowData.Id}>\n                <BTN type=\"button\" icon=\"pi pi-eye\" className=\"p-button-primary\" tooltip=\"View\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => this.editAccount(e, rowData)}>\n                </BTN>\n\n                {(accountRecordMenu.length) ? (\n                    <Input type=\"select\"\n                        style={{ width: '40%', display: 'inline-block' }}\n                        name={\"accountRecord\" + rowData.Id} id={\"accountRecord\" + rowData.Id}\n                        onChange={(e) => this.accountRecordActions(e.target.value, rowData, false)}\n                    >\n                        <option value=''>Select</option>\n                        {\n                            accountRecordMenu.map((type, i) => {\n                                return (<option value={type.label} key={i}>{type.label}</option>)\n                            })\n                        }\n                    </Input>\n                ) : (null)}\n\n                {/* <Menu model={accountRecordMenu} popup={true} ref={el => this.menu = el} id={\"accountMenu\" + rowData.Id} />\n                <BTN icon=\"pi pi-ellipsis-v\" className=\"p-button-primary\"\n                    aria-controls={\"accountMenu\" + rowData.Id} aria-haspopup={true}\n                    onMouseEnter={(event) => this.menu.toggle(event)} /> */}\n\n            </div>\n        );\n    }\n\n    handleOnExpand = (row, isExpand, rowIndex, e) => {\n        try {\n            if (isExpand) {\n                let data = {\n                    UniqueReferenceId: row.UniqueReferenceId\n                };\n                api.post('api/getChildAccountRecords', data).then(res => {\n                    this.setState({ childAccountData: [] });\n                    var tempChildAccountData = res.data[0];\n                    console.log(\"getChildAccountRecords\", tempChildAccountData);\n                    if (res.success) {\n\n                        tempChildAccountData.forEach(function (element) {\n                            var tempActions = element.Menu;\n                            var childActions = CommonConfig.isEmpty(tempActions) ? [] : tempActions.split(',');\n                            console.log('handleOnExpand > childActions > ', childActions);\n\n                            var childAccountRecordMenu = [];\n                            if (childActions.length) {\n                                for (var i = 0; i < childActions.length; i++) {\n                                    if (childActions[i] != '') {\n                                        childAccountRecordMenu.push({\n                                            label: childActions[i],\n                                            UniqueReferenceId: element.UniqueReferenceId,\n                                        });\n                                    }\n                                }\n                            }\n                            element.Actions = childAccountRecordMenu;\n                            element.CurrencySymbol = row.CurrencySymbol;\n                            element.Path = apiBase + \"\" + element.URL;\n                        });\n\n                        setTimeout(() => {\n                            this.setState({ childAccountData: tempChildAccountData });\n                        }, 500);\n                    } else {\n                        console.log(\"getChildAccountRecords > error 3\", res);\n                    }\n                }).catch(err => {\n                    this.setState({ childAccountData: [] });\n                    console.log(\"getChildAccountRecords > error 2\", err);\n                });\n            }\n        } catch (error) {\n            console.log(\"handleOnExpand > Err\", error);\n        }\n    }\n\n    expandRow = {\n        onlyOneExpanding: true,\n        showExpandColumn: true,\n        expandByColumnOnly: true,\n        parentClassName: (isExpanded, row, rowIndex) => {\n            return 'parent-expand-foo';\n        },\n        onExpand: this.handleOnExpand,\n        renderer: row => (\n            <div>\n                {(this.state.childAccountData.length > 0) ? (\n\n                    <table width={'100%'} style={{ border: 'none' }}>\n                        <tr>\n                            <th>#</th>\n                            <th>Txn Date</th>\n                            <th>Transaction</th>\n                            <th>Reference Id</th>\n                            <th>Description</th>\n                            <th>Amount</th>\n                            <th>Payment Mode</th>\n                            <th>Added By</th>\n                            <th>Outstanding</th>\n                            <th>Actions</th>\n                        </tr>\n                        {\n                            this.state.childAccountData.map((accountEntry, i) => {\n                                console.log(\"childAccountData > \" + i + \" > \", accountEntry);\n                                return (\n                                    <tr>\n                                        <td>{(i + 1)}</td>\n                                        <td>{moment(accountEntry.TransactionDate).format(CommonConfig.dateFormat.dateOnly)}</td>\n                                        <td>{accountEntry.ClientTransactionType}</td>\n                                        <td>{accountEntry.UniqueReferenceId}</td>\n                                        <td>{accountEntry.Description}</td>\n                                        <td>\n                                            {\n                                                (accountEntry.TransactionType == 'Payment' || accountEntry.TransactionType == 'ReturnPayment') ?\n                                                    (\n                                                        <div style={{ float: 'right' }}>\n                                                            {<i className={accountEntry.CurrencySymbol} ></i>}\n                                                            {(CommonConfig.isEmpty(accountEntry.PaymentAmount) ? ('') : (accountEntry.PaymentAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}\n                                                        </div>\n                                                    ) : (\n                                                        <div style={{ float: 'right' }}>\n                                                            {<i className={accountEntry.CurrencySymbol} ></i>}\n                                                            {(CommonConfig.isEmpty(accountEntry.TotalChargeAmount) ? ('') : (accountEntry.TotalChargeAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}\n                                                        </div>\n                                                    )\n                                            }\n                                        </td>\n                                        <td>\n                                            {(accountEntry.TransactionType == 'Payment' || accountEntry.TransactionType == 'ReturnPayment') ? (accountEntry.PaymentMode) : ('N/A')}\n                                        </td>\n                                        <td>\n                                            {accountEntry.CreatedByName}\n                                            {\n                                                (CommonConfig.isEmpty(accountEntry.CreatedOn) ?\n                                                    ('') : \" (\" + moment(accountEntry.CreatedOn).format(CommonConfig.dateFormat.dateTime)) + \")\"\n                                            }\n                                        </td>\n                                        <td>\n                                            <div style={{ float: 'right' }}>\n                                                {<i className={accountEntry.CurrencySymbol} ></i>}\n                                                {(CommonConfig.isEmpty(accountEntry.Outstanding) ? ('0') : (accountEntry.Outstanding.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")))}\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div className={\"childRccountRecordMenu\" + accountEntry.Id} >\n                                                {(accountEntry.IsLocked) ? (\n                                                    <span>\n                                                        <i style={{ fontSize: '30px', verticalAlign: 'sub', color: 'red' }} className=\"pi pi-lock\" href=\"#\" id={\"LockedTooltip\" + accountEntry.BReference}></i>\n                                                        <UncontrolledTooltip placement=\"top\" target={\"LockedTooltip\" + accountEntry.BReference}>\n                                                            {accountEntry.BReference}\n                                                        </UncontrolledTooltip>\n                                                    </span>\n                                                ) : (null)}\n\n                                                <BTN type=\"button\" icon=\"pi pi-eye\" className=\"p-button-primary\" tooltip=\"View\" tooltipOptions={{ position: 'bottom' }} onClick={(e) => this.editAccount(e, accountEntry)}>\n                                                </BTN>\n\n                                                {((accountEntry.ClientTransactionType !== 'Contra' && accountEntry.ClientTransactionType !== 'Short Write Off') && accountEntry.TransactionType === 'Payment') ? (\n                                                    <BTN type=\"button\" icon=\"pi pi-file\" className=\"p-button-primary\" tooltip=\"Generate Receipt of Payment\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => this.generateReceipt(accountEntry)}>\n                                                    </BTN>\n                                                ) : (null)}\n\n                                                {(accountEntry.TransactionType === 'Payment') ? (\n                                                    CommonConfig.isEmpty(accountEntry.IsReceiptGenerated) ? (null) : (\n                                                        <BTN type=\"button\" icon=\"pi pi-eye\" className=\"p-button-warning\" tooltip=\"View Receipt of Payment\" tooltipOptions={{ position: 'bottom' }} style={{ marginRight: '.5em' }} onClick={(e) => window.open(accountEntry.Path, \"_blank\")} >\n                                                        </BTN>\n                                                    )\n                                                ) : (null)}\n\n                                                {(accountEntry.Actions.length) ? (\n                                                    <Input type=\"select\"\n                                                        style={{ width: '40%', display: 'inline-block' }}\n                                                        name={\"childRccountRecord\" + accountEntry.Id} id={\"childRccountRecord\" + accountEntry.Id}\n                                                        onChange={(e) => this.accountRecordActions(e.target.value, accountEntry, true)}\n                                                    >\n                                                        <option value=''>Select</option>\n                                                        {\n                                                            accountEntry.Actions.map((type, j) => {\n                                                                return (<option value={type.label} key={j}>{type.label}</option>)\n                                                            })\n                                                        }\n                                                    </Input>\n                                                ) : (null)}\n\n                                                {/* <Menu model={accountEntry.Menu} popup={true} ref={el => this.menu = el} id={\"subAccountMenu\" + i} />\n                                                    <BTN icon=\"pi pi-ellipsis-v\" className=\"p-button-primary\"\n                                                        aria-controls={\"subAccountMenu\" + i} aria-haspopup={true}\n                                                        onMouseEnter={(event) => this.menu.toggle(event)}\n                                                    // onMouseLeave={(event) => this.menu.toggle(event)}\n                                                        /> */}\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </table>\n                ) : (\n                        <small style={{ textAlign: \"center\" }}>No Record for this transaction.</small>\n                    )}\n            </div>\n        )\n    };\n\n    accountRecordActions = (type, rowData, isAccountChildEntry) => {\n        try {\n            console.log(\"actionFormatter > accountRecordActions > \", type, rowData, isAccountChildEntry);\n\n            if (type == 'Make Payment') {\n                this.getPolicyOutstandingTransaction(rowData);\n\n            } else if (type == 'Short Write Off') {\n                var isConfirm = window.confirm(\"Are you sure you wants to Short Write Off \" + rowData.Balance + \" amount?\");\n                if (isConfirm == true) {\n                    this.shortWriteoff(rowData.UniqueReferenceId, rowData.Balance);\n                }\n            } else if (type == 'Return Payment') {\n                this.setState({ returnPaymentData: rowData });\n                setTimeout(() => {\n                    this.showReturnPaymentPopup();\n                }, 100);\n            } else if (type == 'Transfer Fund') {\n                this.getAccountTransferFund(rowData);\n\n            } else if (type == 'Contra' || type == 'Cancel Payment' || type == 'Bounce Cheque' || type == 'Bank Transfer Failed' || type == 'Credit Card Declined') {\n                var isConfirm = window.confirm(\"Are you sure you wants to \" + type + \" #\" + rowData.UniqueReferenceId + \"?\");\n                if (isConfirm == true) {\n                    this.processAccountEntry(type, rowData);\n                }\n            }\n\n            // Dropdown action to default 'Select';\n            if (isAccountChildEntry) {\n                if (document.getElementsByName('childRccountRecord' + rowData.Id)) {\n                    document.getElementsByName('childRccountRecord' + rowData.Id)[0].value = '';\n                }\n            } else {\n                if (document.getElementsByName('accountRecord' + rowData.Id)) {\n                    document.getElementsByName('accountRecord' + rowData.Id)[0].value = '';\n                }\n            }\n\n        } catch (error) {\n            console.log(\"accountRecordActions > error \", error);\n        }\n    }\n\n    processAccountEntry = (type, rowData) => {\n        try {\n            if (rowData.UniqueReferenceId) {\n\n                let data = {\n                    UniqueReferenceId: rowData.UniqueReferenceId,\n                    AccountActionType: type,\n                    CurrentUser: CommonConfig.loggedInUserId(),\n                };\n                api.post('api/processAccountEntry', data).then(res => {\n                    console.log(\"processAccountEntry > res\", res);\n                    if (res.success) {\n                        console.log(\"processAccountEntry > response > data\", res.data);\n                        toast.success(type + \" successfully.\");\n                        setTimeout(function () {\n                            window.location.reload();\n                        }, 1000);\n                    } else {\n                        toast.error('Account record is not relevent for ' + type + ' action.');\n                    }\n                }).catch(err => {\n                    console.log(\"processAccountEntry error\", err);\n                    toast.error(err);\n                });\n            } else {\n                toast.error('Account record is not relevent for ' + type + ' action.');\n            }\n        } catch (error) {\n            console.log(\"processAccountEntry > error \", error);\n            toast.error(error);\n        }\n    }\n\n    cancelTransaction(data) {\n        console.log(\"cancelTransaction >> \", data);\n    }\n\n    hideTransferFundPopup() {\n        this.setState({\n            isTransferFundPopup: false,\n            paymentMode: '',\n            transferFundData: '',\n            paymentAmountRemains: 0,\n            PolicyOutstandingTransactions: ''\n        });\n    }\n\n    handleTransferFundChangeAmount(e, i) {\n\n        let value = e.target.value;\n        if (CommonConfig.isEmpty(value)) {\n            value = '';\n        }\n\n        let SystemPolicyOutstandingTransactions = this.state.SystemPolicyOutstandingTransactions;\n        let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n        let transaction = SystemPolicyOutstandingTransactions[i];\n\n        let AmountApplied = value;\n        let TotalDue = transaction.TotalDue;\n        let LevyTotalAmount = transaction.LevyTotalAmount;\n        let Outstanding = transaction.Outstanding;\n\n        PolicyOutstandingTransactions[i].AmountApplied = AmountApplied;\n\n        if (Outstanding >= AmountApplied) {\n            let UpdatedAdminFee = 0;\n            let OutstandingAfterPayment = 0;\n            var UpdatedLevy = 0;\n            var UpdatedNetPremium = 0;\n\n            OutstandingAfterPayment = Outstanding - AmountApplied;\n            UpdatedAdminFee = (transaction.AdminFee * AmountApplied) / TotalDue;\n            UpdatedLevy = (AmountApplied * LevyTotalAmount) / TotalDue;\n            UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n            PolicyOutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n            PolicyOutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n            PolicyOutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n            PolicyOutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n\n            this.show(\"AmountApplied\" + i, false, \"AmountAppliedError\", \"\");\n        } else {\n            this.show(\"AmountApplied\" + i, true, \"AmountAppliedError\", \"Please enter proper amount\");\n        }\n\n        this.setState({ PolicyOutstandingTransactions: PolicyOutstandingTransactions });\n\n        let PaymentAmount = this.state.paymentAmount;\n        let TotalAmount = 0;\n        for (let i = 0; i < PolicyOutstandingTransactions.length; i++) {\n            var POAmountApplied = PolicyOutstandingTransactions[i].AmountApplied == '' ? 0 : PolicyOutstandingTransactions[i].AmountApplied;\n            TotalAmount = parseFloat(TotalAmount) + parseFloat(POAmountApplied);\n        }\n        var paymentAmountRemains = Number(PaymentAmount - TotalAmount).toFixed(2);\n        this.setState({ paymentAmountRemains: paymentAmountRemains });\n\n    }\n\n    getAccountTransferFund(rowData) {\n        try {\n            console.log(\"getAccountTransferFund > rowData\", rowData);\n            let data = {\n                PolicyId: this.state.policyId,\n                CurrentUser: CommonConfig.loggedInUserId(),\n            };\n            api.post('api/getAccountTransferFund', data).then(res => {\n                console.log(\"getAccountTransferFund > res\", res);\n                if (res.success) {\n                    if (res.data[0].length) {\n                        this.setState({\n                            isTransferFundPopup: true,\n                            PolicyOutstandingTransactions: res.data[0],\n                            SystemPolicyOutstandingTransactions: res.data[0],\n                            transactionType: 'Payment',\n                            description: 'Transfer a Fund',\n                            paymentMode: 'Fund Transfer',\n                            paymentAmount: Math.abs(rowData.Balance),\n                            existOutstanding: 0,\n                            isEdit: false,\n                            paymentModeError: false,\n                            newEntryDateError: false,\n                            descriptionError: false,\n                            paymentAmountError: false,\n                            transferFundData: rowData\n                        });\n\n                        setTimeout(() => {\n                            this.calculateTransferFundPremium();\n                        }, 100);\n                    } else {\n                        toast.warn(\"There are no Payment Due for any Policy of \" + this.state.policyHolder + \".\");\n                    }\n                } else {\n                    toast.error('There are no due for other Policy of ' + this.state.policyHolder + '.');\n                }\n            }).catch(err => {\n                console.log(\"getAccountTransferFund error\", err);\n                toast.error(err);\n            });\n        } catch (error) {\n            console.log(\"getAccountTransferFund > error \", error);\n            toast.error(error);\n        }\n    }\n\n    calculateTransferFundPremium() {\n        try {\n            let SystemPolicyOutstandingTransactions = this.state.SystemPolicyOutstandingTransactions;\n            let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n            let PaymentAmount = this.state.paymentAmount;\n            var ExistOutstanding = Number(this.state.existOutstanding);\n            var RemainingPaymentAmount = PaymentAmount;\n\n            for (let i = 0; i < SystemPolicyOutstandingTransactions.length; i++) {\n\n                let transaction = SystemPolicyOutstandingTransactions[i];\n\n                console.log(\"transaction\", transaction);\n\n                let AmountApplied = 0;\n                let TotalDue = Number(transaction.TotalDue);\n                let LevyTotalAmount = Number(transaction.LevyTotalAmount);\n\n                let Outstanding = Number(transaction.Outstanding);\n                let OutstandingAfterPayment = 0;\n                let UpdatedNetAmount = 0;\n                var UpdatedNetPremium = 0;\n                var UpdatedLevy = 0;\n                let UpdatedAdminFee = 0;\n\n                if (RemainingPaymentAmount > 0) {\n                    AmountApplied = (RemainingPaymentAmount <= Outstanding) ? Number(RemainingPaymentAmount) : Number(Outstanding);\n                    OutstandingAfterPayment = Outstanding - AmountApplied;\n                    UpdatedAdminFee = (transaction.AdminFee * AmountApplied) / TotalDue;\n                    UpdatedNetAmount = AmountApplied - UpdatedAdminFee;\n                    UpdatedLevy = (AmountApplied * LevyTotalAmount) / TotalDue;\n                    UpdatedNetPremium = AmountApplied - UpdatedLevy - UpdatedAdminFee;\n                    RemainingPaymentAmount = RemainingPaymentAmount - AmountApplied;\n                } else {\n                    OutstandingAfterPayment = Outstanding - AmountApplied;\n                }\n\n                PolicyOutstandingTransactions[i].AmountApplied = Number(AmountApplied).toFixed(2);\n                PolicyOutstandingTransactions[i].OutstandingAfterPayment = Number(OutstandingAfterPayment).toFixed(2);\n                PolicyOutstandingTransactions[i].UpdatedNetPremium = Number(UpdatedNetPremium).toFixed(2);\n                PolicyOutstandingTransactions[i].UpdatedLevy = Number(UpdatedLevy).toFixed(2);\n                PolicyOutstandingTransactions[i].UpdatedAdminFee = Number(UpdatedAdminFee).toFixed(2);\n            }\n            this.setState({ PolicyOutstandingTransactions: PolicyOutstandingTransactions, paymentAmountRemains: RemainingPaymentAmount });\n\n        } catch (error) {\n            console.log(\"calculatePremium >> error\", error);\n        }\n    }\n\n    validateTransferFundTotal() {\n        console.log(\"validateTransferFundTotal >\", this.state);\n        let PolicyOutstandingTransactions = this.state.PolicyOutstandingTransactions;\n        let PaymentAmount = this.state.paymentAmount;\n        let TotalAmount = 0;\n\n        for (let i = 0; i < PolicyOutstandingTransactions.length; i++) {\n            TotalAmount = parseFloat(TotalAmount) + parseFloat(PolicyOutstandingTransactions[i].AmountApplied);\n        }\n\n        if (TotalAmount > 0 && TotalAmount <= PaymentAmount) {\n            return false;\n        }\n        return true;\n    }\n\n    saveTransferFund() {\n        try {\n            if (this.state.newEntryDateError) {\n                toast.error('Please Enter Transaction Date');\n            } else if (this.state.descriptionError) {\n                toast.error('Please Enter Description');\n            } else if (this.state.paymentAmountError) {\n                toast.error('Please Enter Payment Amount');\n            } else if (this.state.paymentModeError) {\n                toast.error('Please Select Payment Mode');\n            } else if (this.state.paymentAmount == 0) {\n                toast.error('Payment amount can not be 0.');\n            } else if (this.validateTransferFundTotal()) {\n                toast.error('Total Amount Applied must be in between 1 to ' + this.state.paymentAmount + '.');\n            } else {\n                let data = {\n                    PolicyId: this.props.match.params.id,\n                    EntryType: '',\n                    TransferFundRecord: this.state.transferFundData,\n                    NewEntryDate: moment(this.state.newEntryDate).format(CommonConfig.dateFormat.dbDateTime),\n                    TransactionType: this.state.transactionType,\n                    ReferenceId: this.state.referenceId,\n                    Description: this.state.description,\n                    PaymentAmount: this.state.paymentAmount,\n                    PaymentMode: this.state.paymentMode,\n                    PaymentStatus: \"Success\",\n                    Note: this.state.note,\n                    CreatedBy: CommonConfig.loggedInUserId(),\n                    PaymentEntries: this.state.PolicyOutstandingTransactions,\n                    LanguageId: this.state.LanguageId\n                };\n                console.log(\"saveTransferFund > \", data);\n\n                this.saveTransferFundAPICall(data);\n            }\n        } catch (error) {\n            console.log(\"saveMakePaymentEntry error 1\", JSON.stringify(error));\n        }\n    }\n\n    saveTransferFundAPICall(data) {\n        console.log(\"saveTransferFund-request\", JSON.stringify(data));\n        try {\n            api.post('api/saveTransferFund', data).then(res => {\n                console.log(\"saveTransferFund-response\", res.data);\n                if (res.success && res.data.success) {\n                    this.hideTransferFundPopup();\n                    toast.success(res.data.message);\n                    setTimeout(function () {\n                        window.location.reload();\n                    }, 1000);\n                }\n            }).catch(err => {\n                toast.error(\"Not able to add entry in database.\");\n                console.log(\"saveTransferFund-err\", err);\n            });\n        } catch (error) {\n            toast.error(\"Not able to add entry in database.\");\n            console.log(\"saveTransferFund-err\", error);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"table-custom\">\n\n                <Row>\n\n                    <Col md=\"2\" style={{ alignSelf: 'center' }}>\n                        <span> Policy Number: {this.state.policyNumber}</span>\n                    </Col>\n\n                    <Col md=\"10\" className=\"p-0\">\n                        <BTN type=\"button\" icon=\"fa fa-bank\" className=\"p-button-primary\" tooltip=\"Bank Details\" tooltipOptions={{ position: 'bottom' }} onClick={() => this.showBankDetailsPopup()}>\n                        </BTN>\n\n                        <div style={{ display: \"inline-block\", margin: \"10px 20px\" }}>\n                            <h5>\n                                Payment Due : <i className={this.props.CurrencySymbol} ></i>  {this.state.paymentDue ? this.state.paymentDue.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : 0}\n\n                            </h5>\n                        </div>\n\n                        {(this.state.IsLapsePolicy) ? (\n                            <div style={{ alignSelf: 'center', display: \"inline-block\", margin: \"10px\" }}>\n                                <small>\n                                    Renewal Date: {moment(this.state.RenewalDate).format(CommonConfig.dateFormat.dateOnly)}\n                                    ({(this.state.DaysOverdue < 0) ? this.state.DaysOverdue + ' Day(s) Overdue' : (Math.abs(this.state.DaysOverdue) + ' Day(s) to Renewal')})\n                                </small>\n                                <Button style={{ margin: \"10px\" }} color=\"danger\" onClick={() => this.showLapsePolicyPopup()}>Lapse Policy</Button>\n                            </div>\n                        ) : (null)}\n\n                        {/* \n                            <Button style={{ margin: \"5px\" }} color=\"primary\" onClick={() => this.showJournalEntryPopup()}>Journal Entry</Button> \n                            <Col md=\"3\" style={{ alignSelf: \"center\" }}> \n                            {(this.state.isPolicyRenewal == 1) ? (null) : (\n                                <Button style={{ margin: \"5px\" }} color=\"primary\" onClick={() => this.showMakePaymentPopup()}>Make Payment</Button>\n                            )}\n                            <Button style={{ margin: \"5px\" }} color=\"primary\" onClick={() => this.showReturnPaymentPopup()}>Return Payment</Button> \n                            </Col>\n                        */}\n                    </Col>\n\n                </Row>\n\n                <BootstrapTable\n                    keyField='SequenceNumber'\n                    data={this.state.arr}\n                    columns={this.state.cols}\n                    expandRow={this.expandRow}\n                />\n\n                <Modal isOpen={this.state.toggleNewEntryModal} className={'modal-lg'} style={{ maxWidth: '70%' }}>\n                    <ModalHeader toggle={() => this.hideEntryPopup()}>\n                        {(this.state.transactionType == 'Payment' || this.state.transactionType == 'ReturnPayment') ? 'Payment Entry' : 'Journal Entry'}\n                    </ModalHeader>\n\n                    <Col style={{ margin: \"20px\" }}>\n\n                        <Row>\n                            <Col md=\"3\"> Policy </Col>\n                            <Col md=\"3\"> <label>{this.state.policyNumber}</label> </Col>\n                            <Col md=\"3\"> Policy Type </Col>\n                            <Col md=\"3\"> <label>{this.state.policyType}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\"> Policy Holder </Col>\n                            <Col md=\"4\"> <label>{this.state.policyHolder}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\">Transaction Date*</Col>\n                            <Col md=\"4\">\n                                <InputGroup>\n                                    <Input disabled={this.state.isEdit} type=\"date\" name=\"newEntryDate\" id=\"newEntryDate\" placeholder=\"transaction date\" onBlur={(e) => this.handleChange(e)}\n                                        onChange={(e) => this.handleChange(e)} value={this.state.newEntryDate}\n                                        min={moment().subtract(100, 'years').format('DD-MM-YYYY')}\n                                        max={moment().format('DD-MM-YYYY')}\n                                    />\n                                    <em id=\"newEntryDateError\" className=\"error invalid-feedback\" ></em>\n                                </InputGroup>\n\n                                {/* <DatePicker name=\"newEntryDate\" onChange={e => this.handleDateChange(e, 'newEntryDate')}\n                                value={this.state.newEntryDate} maxDate={moment().toDate()}\n                                /> */}\n                            </Col>\n                        </Row>\n\n                        <div>\n                            {/* {\n                                (this.state.transactionType === 'Debit' || this.state.transactionType === 'Credit') ?\n                                    (\n                                        <Row style={{ marginTop: 10 }}>\n                                            <Col md=\"3\"> Type* </Col>\n                                            <Col md=\"4\">\n                                                {\n                                                    (this.state.transactionType === 'Debit') ? (\n                                                        <Input type=\"select\" name=\"entryType\" id=\"entryType\" onChange={(e) => this.selectType(e.target.value, 'entryType')} value={this.state.entryType} disabled={this.state.isEdit}>\n                                                            <option value=''>Select Type</option>\n                                                            {this.state.journalDebitData.map((type, i) => {\n                                                                return (<option value={type.label} key={i}>{type.value}</option>)\n                                                            })\n                                                            }\n                                                        </Input>\n                                                    ) : (\n                                                            <Input type=\"select\" name=\"entryType\" id=\"entryType\" onChange={(e) => this.selectType(e.target.value, 'entryType')} value={this.state.entryType} disabled={this.state.isEdit}>\n                                                                <option value=''>Select Type</option>\n                                                                {this.state.journalCreditData.map((type, i) => {\n                                                                    return (<option value={type.label} key={i}>{type.value}</option>)\n                                                                })\n                                                                }\n                                                            </Input>\n                                                        )\n                                                }\n                                                <em id=\"entryTypeError\" className=\"error invalid-feedback\" ></em>\n                                            </Col>\n                                        </Row>\n                                    ) : (\n                                        null\n                                    )\n                            } */}\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Description* </Col>\n                                <Col md=\"4\">\n                                    <Input name=\"description\" type=\"text\" id=\"description\" className=\"\"\n                                        onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.description} disabled={this.state.isEdit} />\n                                    <em id=\"descriptionError\" className=\"error invalid-feedback\" ></em>\n                                </Col>\n                            </Row>\n\n                            {\n                                (this.state.transactionType === 'Debit') ?\n                                    (\n                                        <div>\n                                            <Row style={{ marginTop: 10 }}>\n                                                <Col md=\"3\"> Charge Amount* </Col>\n                                                <Col md=\"4\">\n                                                    <Input name=\"chargeAmount\" type=\"text\" id=\"chargeAmount\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.chargeAmount} disabled={this.state.isEdit} />\n                                                    <em id=\"chargeAmountError\" className=\"error invalid-feedback\" ></em>\n                                                </Col>\n                                            </Row>\n\n                                        </div>\n                                    ) : (\n                                        null\n                                    )\n                            }\n\n                            {\n                                (this.state.transactionType === 'Credit') ?\n                                    (\n                                        <Row style={{ marginTop: 10 }}>\n                                            <Col md=\"3\"> Adj Amount* </Col>\n                                            <Col md=\"4\">\n                                                <Input name=\"paymentAmount\" type=\"number\" id=\"paymentAmount\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.paymentAmount} disabled={this.state.isEdit} />\n                                                <em id=\"paymentAmountError\" className=\"error invalid-feedback\" ></em>\n                                            </Col>\n                                        </Row>\n                                    ) : (\n                                        null\n                                    )\n                            }\n\n                            {\n                                (this.state.transactionType === 'ReturnPayment') ?\n                                    (\n                                        <div>\n                                            <Row style={{ marginTop: 10 }}>\n                                                <Col md=\"3\"> Payment Amount* </Col>\n                                                <Col md=\"4\">\n                                                    <Input name=\"paymentAmount\" type=\"number\" id=\"paymentAmount\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.paymentAmount} disabled={this.state.isEdit} />\n                                                </Col>\n                                            </Row>\n\n                                            <Row style={{ marginTop: 10 }}>\n                                                <Col md=\"3\"> Return Payment Mode* </Col>\n                                                <Col md=\"4\">\n                                                    <Input type=\"select\" name=\"paymentMode\" id=\"paymentMode\" disabled={this.state.isEdit}\n                                                        onChange={(e) => this.selectType(e.target.value, 'paymentMode')} value={this.state.paymentMode}\n                                                    >\n                                                        <option value=''>Select payment mode</option>\n                                                        {this.state.returnPaymentModearr.map((type, i) => {\n                                                            return (<option value={type.label} key={i}>{type.value}</option>)\n                                                        })\n                                                        }\n                                                    </Input>\n                                                    <em id=\"paymentModeError\" className=\"error invalid-feedback\" ></em>\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    ) : (\n                                        null\n                                    )\n                            }\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Note </Col>\n                                <Col md=\"4\">\n                                    <Input name=\"note\" type=\"textarea\" id=\"note\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.note} disabled={this.state.isEdit} />\n                                </Col>\n                            </Row>\n\n                        </div>\n                    </Col>\n\n                    {CommonConfig.isEmpty(this.state.PolicyAccountId) ? (\n                        <div style={{ margin: 20 }}>\n                            <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                                <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.addUpdateAccountEntry()}>\n                                    < i style={{ marginRight: \"10px\" }} className=\"fa fa-check\" ></i >\n                                    Save\n                                </Button>\n                                <Button style={{ marginLeft: \"10px\" }} color=\"danger\" onClick={() => this.hideEntryPopup()}>\n                                    <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i>\n                                    Cancel\n                                </Button>\n                            </Row>\n                        </div>\n                    ) : (null)}\n                </Modal>\n\n                <Modal isOpen={this.state.isPaymentPopup} className={'modal-lg'} style={{ maxWidth: '70%' }}>\n                    <ModalHeader toggle={() => this.hideMakePaymentPopup()}>Payment Entry</ModalHeader>\n\n                    <div style={{ padding: 20 }}>\n\n                        <Row>\n                            <Col md=\"3\"> Policy </Col>\n                            <Col md=\"3\"> <label>{this.state.policyNumber}</label> </Col>\n                            <Col md=\"3\"> Policy Type </Col>\n                            <Col md=\"3\"> <label>{this.state.policyType}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\"> Policy Holder </Col>\n                            <Col md=\"4\"> <label>{this.state.policyHolder}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\">Transaction Date*</Col>\n                            <Col md=\"4\">\n                                <InputGroup>\n                                    <Input disabled={this.state.isEdit} type=\"date\" name=\"newEntryDate\" id=\"newEntryDate\" placeholder=\"transaction date\" onBlur={(e) => this.handleChange(e)}\n                                        onChange={(e) => this.handleChange(e)} value={this.state.newEntryDate}\n                                        min={moment().subtract(100, 'years').format('DD-MM-YYYY')}\n                                        max={moment().format('DD-MM-YYYY')}\n                                    />\n                                    <em id=\"newEntryDateError\" className=\"error invalid-feedback\" ></em>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n\n                        <div>\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Description* </Col>\n                                <Col md=\"4\">\n                                    <Input disabled={this.state.isEdit} name=\"description\" type=\"text\" id=\"description\" className=\"\"\n                                        onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.description} />\n                                    <em id=\"descriptionError\" className=\"error invalid-feedback\" ></em>\n                                </Col>\n                            </Row>\n\n                            <div>\n                                <Row style={{ marginTop: 10 }}>\n                                    <Col md=\"3\"> Payment Amount* </Col>\n                                    <Col md=\"4\">\n                                        <Input disabled={this.state.isEdit} name=\"paymentAmount\" type=\"number\" id=\"paymentAmount\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.paymentAmount} />\n                                    </Col>\n                                </Row>\n\n                                <Row style={{ marginTop: 10 }}>\n                                    <Col md=\"3\"> Payment Mode* </Col>\n                                    <Col md=\"4\">\n                                        <Input disabled={this.state.isEdit} type=\"select\" name=\"paymentMode\" id=\"paymentMode\"\n                                            onChange={(e) => this.selectType(e.target.value, 'paymentMode')} value={this.state.paymentMode}\n                                        >\n                                            <option value=''>Select payment mode</option>\n                                            {this.state.paymentModearr.map((type, i) => {\n                                                return (<option value={type.label} key={i}>{type.value}</option>)\n                                            })\n                                            }\n                                        </Input>\n                                        <em id=\"paymentModeError\" className=\"error invalid-feedback\" ></em>\n                                    </Col>\n\n                                    {/* {(this.state.PolicyAccountId == '') ?\n                                        <Col md=\"5\">\n                                            <Row>\n                                                <Col md=\"8\"> Payment Due: </Col>\n                                                <Col md=\"4\">\n                                                    <i className={this.props.CurrencySymbol} ></i> {this.state.paymentDue}\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"8\"> Balance after payment: </Col>\n                                                <Col md=\"4\">\n                                                    <i className={this.props.CurrencySymbol} ></i> {this.state.calculateBalanceAFTPay.toFixed(2)}\n                                                </Col>\n                                            </Row>\n                                        </Col>\n                                        : (null)} */}\n                                </Row>\n                            </div>\n\n                            {(this.state.OutstandingTransactions.length) ? (\n                                <div>\n\n                                    <table border='1' style={{ width: '100%', marginTop: 15, marginBottom: 15 }}>\n                                        <thead>\n                                            <th style={{ width: '20%' }}>Transaction Type</th>\n                                            <th style={{ width: '10%' }}>Reference Id</th>\n                                            {\n                                                (this.state.isEdit) ? (null) : <th style={{ width: '10%' }}>Outstanding</th>\n                                            }\n                                            <th style={{ width: '10%' }}>Amount Applied</th>\n                                            {\n                                                (this.state.isEdit) ? (null) : <th style={{ width: '10%' }}>Outstanding After Payment</th>\n                                            }\n                                            <th style={{ width: '10%' }}>Net Premium</th>\n                                            <th style={{ width: '10%' }}>Levy</th>\n                                            <th style={{ width: '10%' }}>Admin</th>\n                                        </thead>\n                                        <tbody>\n                                            {this.state.OutstandingTransactions.map((transaction, i) => {\n                                                return (\n                                                    <tr>\n                                                        <td>{transaction.Narration}</td>\n                                                        <td>{transaction.UniqueReferenceId}</td>\n                                                        {\n                                                            (this.state.isEdit) ? (null) : <td>{transaction.Outstanding}</td>\n                                                        }\n                                                        <td>\n                                                            <Input disabled={this.state.isEdit} name=\"AmountApplied\" id=\"AmountApplied\" type=\"number\" value={transaction.AmountApplied} onChange={e => this.handleChangeAmount(e, i)} onBlur={e => this.handleChangeAmount(e, i)} />\n                                                        </td>\n                                                        {\n                                                            (this.state.isEdit) ? (null) : <td>{transaction.OutstandingAfterPayment}</td>\n                                                        }\n                                                        <td>{transaction.UpdatedNetPremium}</td>\n                                                        <td>{transaction.UpdatedLevy}</td>\n                                                        <td>{transaction.UpdatedAdminFee}</td>\n                                                    </tr>\n                                                )\n                                            })}\n                                        </tbody>\n                                    </table>\n\n                                    <em id=\"AmountAppliedError\" style={{ color: 'red', }} className=\"error\" ></em>\n                                </div>\n                            ) : (null)}\n\n                            {(this.state.paymentMode == 'Debit/Credit Card') ? (\n                                <div>\n\n                                    <Row style={{ marginTop: 10 }}>\n                                        <Col md=\"3\"> Card Type (*) </Col>\n                                        <Col md=\"4\">\n                                            <Input name=\"CardType\" type=\"select\" id=\"CardType\" onChange={(e) => this.selectType(e.target.value, 'CardType')} value={this.state.CardType} >\n                                                <option value=\"VISA\">Visa</option>\n                                                <option value=\"MC\">Master Card</option>\n                                                <option value=\"laser\">Laser</option>\n                                            </Input>\n\n                                            <em id=\"CardTypeError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                    </Row>\n\n                                    <Row style={{ marginTop: 10 }}>\n                                        <Col md=\"3\"> Cardholder Name (*) </Col>\n                                        <Col md=\"4\">\n                                            <Input name=\"CardholderName\" type=\"text\" id=\"CardholderName\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.CardholderName} />\n                                            <em id=\"CardholderNameError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                    </Row>\n\n                                    <Row style={{ marginTop: 10 }}>\n                                        <Col md=\"3\"> Card Number (*) </Col>\n                                        <Col md=\"4\">\n                                            <Input name=\"CardNumber\" type=\"text\" id=\"CardNumber\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.CardNumber} />\n                                            <em id=\"CardNumberError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                    </Row>\n\n                                    <Row style={{ marginTop: 10 }}>\n                                        <Col md=\"3\"> Expiry (*) </Col>\n                                        <Col md=\"2\">\n                                            <Input name=\"ExpiryMonth\" type=\"select\" id=\"ExpiryMonth\" onChange={(e) => this.selectType(e.target.value, 'ExpiryMonth')} value={this.state.ExpiryMonth} >\n                                                <option value=\"1\">1</option>\n                                                <option value=\"2\">2</option>\n                                                <option value=\"3\">3</option>\n                                                <option value=\"4\">4</option>\n                                                <option value=\"5\">5</option>\n                                                <option value=\"6\">6</option>\n                                                <option value=\"7\">7</option>\n                                                <option value=\"8\">8</option>\n                                                <option value=\"9\">9</option>\n                                                <option value=\"10\">10</option>\n                                                <option value=\"11\">11</option>\n                                                <option value=\"12\">12</option>\n                                            </Input>\n                                            <em id=\"ExpiryMonthError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                        <Col md=\"2\">\n                                            <Input name=\"ExpiryYear\" type=\"select\" id=\"ExpiryYear\" onChange={(e) => this.selectType(e.target.value, 'ExpiryYear')} value={this.state.ExpiryYear} >\n                                                <option value=\"2020\">2020</option>\n                                                <option value=\"2021\">2021</option>\n                                                <option value=\"2022\">2022</option>\n                                                <option value=\"2023\">2023</option>\n                                                <option value=\"2024\">2024</option>\n                                                <option value=\"2025\">2025</option>\n                                                <option value=\"2026\">2026</option>\n                                                <option value=\"2027\">2027</option>\n                                                <option value=\"2028\">2028</option>\n                                                <option value=\"2029\">2029</option>\n                                                <option value=\"2030\">2030</option>\n                                            </Input>\n                                            <em id=\"ExpiryYearError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                    </Row>\n\n                                    <Row style={{ marginTop: 10 }}>\n                                        <Col md=\"3\"> CVV (*) </Col>\n                                        <Col md=\"4\">\n                                            <Input name=\"CVV\" type=\"password\" id=\"CVV\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.CVV} />\n                                            <em id=\"CVVError\" className=\"error invalid-feedback\" ></em>\n                                        </Col>\n                                    </Row>\n\n                                </div>\n                            ) : (null)}\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Note </Col>\n                                <Col md=\"4\">\n                                    <Input disabled={this.state.isEdit} name=\"note\" type=\"textarea\" id=\"note\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.note} />\n                                </Col>\n                            </Row>\n\n                        </div>\n\n                    </div>\n\n                    {CommonConfig.isEmpty(this.state.PolicyAccountId) ? (\n                        <div style={{ margin: 20 }}>\n                            <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                                <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.saveMakePaymentEntry()}>\n                                    <i style={{ marginRight: \"10px\" }} className=\"fa fa-check\" ></i > Save\n                                </Button>\n                                <Button style={{ marginLeft: \"10px\" }} color=\"danger\" onClick={() => this.hideMakePaymentPopup()}>\n                                    <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i> Cancel\n                                </Button>\n                            </Row>\n                        </div>\n                    ) : (null)}\n\n                </Modal>\n\n                <Modal isOpen={this.state.isTransferFundPopup} className={'modal-lg'} style={{ maxWidth: '70%' }}>\n                    <ModalHeader toggle={() => this.hideTransferFundPopup()}>Transfer a Fund</ModalHeader>\n\n                    <div style={{ padding: 20 }}>\n\n                        <Row>\n                            <Col md=\"3\"> Policy </Col>\n                            <Col md=\"3\"> <label>{this.state.policyNumber}</label> </Col>\n                            <Col md=\"3\"> Policy Type </Col>\n                            <Col md=\"3\"> <label>{this.state.policyType}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\"> Policy Holder </Col>\n                            <Col md=\"4\"> <label>{this.state.policyHolder}</label> </Col>\n                        </Row>\n\n                        <Row style={{ marginTop: 10 }}>\n                            <Col md=\"3\">Transaction Date*</Col>\n                            <Col md=\"4\">\n                                <InputGroup>\n                                    <Input disabled={this.state.isEdit} type=\"date\" name=\"newEntryDate\" id=\"newEntryDate\" placeholder=\"transaction date\" onBlur={(e) => this.handleChange(e)}\n                                        onChange={(e) => this.handleChange(e)} value={this.state.newEntryDate}\n                                        min={moment().subtract(100, 'years').format('DD-MM-YYYY')}\n                                        max={moment().format('DD-MM-YYYY')}\n                                    />\n                                    <em id=\"newEntryDateError\" className=\"error invalid-feedback\" ></em>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n\n                        <div>\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Description* </Col>\n                                <Col md=\"4\">\n                                    <Input disabled={this.state.isEdit} name=\"description\" type=\"text\" id=\"description\" className=\"\"\n                                        onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.description} />\n                                    <em id=\"descriptionError\" className=\"error invalid-feedback\" ></em>\n                                </Col>\n                            </Row>\n\n                            <div>\n                                <Row style={{ marginTop: 10 }}>\n                                    <Col md=\"3\"> Payment Amount* </Col>\n                                    <Col md=\"4\">\n                                        <Input disabled={true} name=\"paymentAmount\" type=\"number\" id=\"paymentAmount\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.paymentAmount} />\n                                    </Col>\n                                    <Col md=\"3\">\n                                        {this.state.paymentAmountRemains < 0 ?\n                                            (<span style={{ color: 'red' }}> Balance: {this.state.paymentAmountRemains} </span>)\n                                            :\n                                            (<span> Balance: {this.state.paymentAmountRemains} </span>)\n                                        }\n                                    </Col>\n                                </Row>\n\n                                <Row style={{ marginTop: 10 }}>\n                                    <Col md=\"3\"> Payment Mode* </Col>\n                                    <Col md=\"4\">\n                                        <Input disabled={this.state.isEdit} type=\"select\" name=\"paymentMode\" id=\"paymentMode\"\n                                            onChange={(e) => this.selectType(e.target.value, 'paymentMode')} value={this.state.paymentMode}\n                                        >\n                                            <option value=''>Select payment mode</option>\n                                            {this.state.paymentModearr.map((type, i) => {\n                                                return (\n                                                    (type.label == 'Fund Transfer') ?\n                                                        <option value={type.label} key={i}>{type.value}</option>\n                                                        : (null)\n                                                )\n                                            })\n                                            }\n                                        </Input>\n                                        <em id=\"paymentModeError\" className=\"error invalid-feedback\" ></em>\n                                    </Col>\n                                </Row>\n                            </div>\n\n                            {(this.state.PolicyOutstandingTransactions.length) ? (\n                                <div>\n                                    <table border='1' style={{ width: '100%', marginTop: 15, marginBottom: 15 }}>\n                                        <thead>\n                                            <th style={{ width: '20%' }}>Policy Number</th>\n                                            <th style={{ width: '20%' }}>Transaction Type</th>\n                                            <th style={{ width: '10%' }}>Reference Id</th>\n                                            <th style={{ width: '10%' }}>Outstanding</th>\n                                            <th style={{ width: '10%' }}>Amount Applied</th>\n                                            <th style={{ width: '10%' }}>Outstanding After Payment</th>\n                                            <th style={{ width: '10%' }}>Net Premium</th>\n                                            <th style={{ width: '10%' }}>Levy</th>\n                                            <th style={{ width: '10%' }}>Admin</th>\n                                        </thead>\n                                        <tbody>\n                                            {this.state.PolicyOutstandingTransactions.map((transaction, i) => {\n                                                return (\n                                                    <tr>\n                                                        <td>{transaction.PolicyNumber}</td>\n                                                        <td>{transaction.Narration}</td>\n                                                        <td>{transaction.UniqueReferenceId}</td>\n                                                        <td>{transaction.Outstanding}</td>\n                                                        <td>\n                                                            <Input disabled={this.state.isEdit} name=\"AmountApplied\" id={\"AmountApplied\" + i} type=\"number\" value={transaction.AmountApplied} onChange={e => this.handleTransferFundChangeAmount(e, i)} onBlur={e => this.handleTransferFundChangeAmount(e, i)} />\n                                                        </td>\n                                                        <td>{transaction.OutstandingAfterPayment}</td>\n                                                        <td>{transaction.UpdatedNetPremium}</td>\n                                                        <td>{transaction.UpdatedLevy}</td>\n                                                        <td>{transaction.UpdatedAdminFee}</td>\n                                                    </tr>\n                                                )\n                                            })}\n                                        </tbody>\n                                    </table>\n\n                                    <em id=\"AmountAppliedError\" style={{ color: 'red', }} className=\"error\" ></em>\n                                </div>\n                            ) : (null)}\n\n                            <Row style={{ marginTop: 10 }}>\n                                <Col md=\"3\"> Note </Col>\n                                <Col md=\"4\">\n                                    <Input disabled={this.state.isEdit} name=\"note\" type=\"textarea\" id=\"note\" onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.note} />\n                                </Col>\n                            </Row>\n\n                        </div>\n\n                    </div>\n\n                    <div style={{ margin: 20 }}>\n                        <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.saveTransferFund()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-check\" ></i > Save\n                                </Button>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"danger\" onClick={() => this.hideTransferFundPopup()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i> Cancel\n                                </Button>\n                        </Row>\n                    </div>\n\n                </Modal>\n\n                <Modal isOpen={this.state.toggleBnkDetailsModal} className={'modal-lg'}>\n                    <ModalHeader toggle={() => this.hideBankDetailsPopup()}> Enter Bank Details </ModalHeader>\n                    <Col style={{ margin: \"20px\" }}>\n                        <Row>\n                            <Col md=\"12\">\n                                {/* <Card> <CardBody style={{ backgroundColor: \"#f2f2f2\" }}> */}\n                                <div className=\"input-box\">\n                                    <Row>\n                                        <Col md=\"3\">\n                                            <label>Account Name*</label>\n                                        </Col>\n                                        <Col md=\"6\">\n                                            <Input type=\"text\" name=\"accountName\" id=\"accountName\" onChange={(e) => this.handleChange(e)} value={this.state.accountName} />\n                                            <em id=\"accountNameError\" className=\"error invalid-feedback\"></em>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"input-box\">\n                                    <Row>\n                                        <Col md=\"3\">\n                                            <label>Bank Name*</label>\n                                        </Col>\n                                        <Col md=\"6\">\n                                            <Input type=\"text\" name=\"bankName\" id=\"bankName\" onChange={(e) => this.handleChange(e)} value={this.state.bankName} />\n                                            <em id=\"bankNameError\" className=\"error invalid-feedback\"></em>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"input-box\">\n                                    <Row>\n                                        <Col md=\"3\">\n                                            <label>Country*</label>\n                                        </Col>\n                                        <Col md=\"3\">\n                                            <Input type=\"select\" name=\"bankCountry\" id=\"bankCountry\" onChange={(e) => this.selectType(e.target.value, 'bankCountry')} value={this.state.bankCountry}>\n                                                <option value=''>Select country</option>\n                                                {this.state.countryList.map((type, i) => {\n                                                    return (<option value={type.StringMapKey}>{type.StringMapName}</option>)\n                                                })\n                                                }\n                                            </Input>\n                                            <em id=\"bankCountryError\" className=\"error invalid-feedback\"></em>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"input-box\">\n                                    <Row>\n                                        <Col md=\"3\">\n                                            <label>IBAN*</label>\n                                        </Col>\n                                        <Col md=\"6\">\n                                            <Input type=\"text\" name=\"IBAN\" id=\"IBAN\" onChange={(e) => this.handleChange(e)} value={this.state.IBAN} />\n                                            <em id=\"IBANError\" className=\"error invalid-feedback\"></em>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                <div className=\"input-box\">\n                                    <Row>\n                                        <Col md=\"3\">\n                                            <label>BIC</label>\n                                        </Col>\n                                        <Col md=\"3\">\n                                            <Input type=\"text\" name=\"BIC\" id=\"BIC\" onChange={(e) => this.handleChange(e)} value={this.state.BIC} />\n                                            <em id=\"BICError\" className=\"error invalid-feedback\"></em>\n                                        </Col>\n                                    </Row>\n                                </div>\n                                {/* </CardBody> </Card> */}\n                            </Col>\n                        </Row>\n\n                        <div style={{ margin: 20 }}>\n                            <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n\n                                {(CommonConfig.isEmpty(this.state.EntityBankDetailId)) ? (null) : (\n                                    <Button style={{ marginLeft: \"10px\" }} color=\"danger\" onClick={() => this.clearBankDetails()}>\n                                        <i style={{ marginRight: \"10px\" }} className=\"fa fa-trash\"></i> Clear Bank Details\n                                    </Button>\n                                )}\n                                <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.addUpdateBankDetails()}>\n                                    <i style={{ marginRight: \"10px\" }} className=\"fa fa-check\" ></i> Save\n                                </Button>\n                                <Button style={{ marginLeft: \"10px\" }} color=\"primary\" onClick={() => this.hideBankDetailsPopup()}>\n                                    <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i> Cancel\n                                </Button>\n                            </Row>\n                        </div>\n                    </Col>\n                </Modal>\n\n                <Modal isOpen={this.state.toggleModalDel} className={'modal-lg'}>\n                    <ModalHeader toggle={() => this.hidedeletePopup()}>\n                        Delete Payment\n          </ModalHeader>\n                    <Col style={{ margin: \"20px\" }}>\n                        <Row>\n                            <Col md=\"12\">\n                                Are you sure want to delete this payment of {<i className={this.props.CurrencySymbol} ></i>} {(this.state.delPolicyId.TransactionType === 'Credit' || this.state.delPolicyId.TransactionType === 'Payment' || this.state.delPolicyId.TransactionType === 'ReturnPayment') ? this.state.delPolicyId.PaymentAmount : this.state.delPolicyId.AmountCharge} {this.state.delPolicyId.PaymentModeName} on {this.state.delPolicyId.TransactionDate}\n                            </Col>\n                        </Row>\n                    </Col>\n\n                    <div style={{ margin: 20 }}>\n                        <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"danger\" onClick={() => this.deleteAccount()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-trash\"></i>\n                Delete\n              </Button>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"primary\" onClick={() => this.hidedeletePopup()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i>\n                Cancel\n              </Button>\n                        </Row>\n                    </div>\n                </Modal>\n\n                <Modal isOpen={this.state.toggleModal} className={'modal-lg'} toggle={() => this.hidePopup()}>\n                    <ModalHeader toggle={() => this.hidePopup()}>\n                        Regenerate Receipt of Payment\n          </ModalHeader>\n                    <Col style={{ margin: \"20px\" }}>\n                        <Row>\n                            <Col md=\"12\">\n                                Are you sure want to re-generate this receipt of payment ?\n              </Col>\n                        </Row>\n                    </Col>\n\n                    <div style={{ margin: 20 }}>\n                        <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.againGenerateReceipt()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-check\"></i>\n                Yes\n              </Button>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"primary\" onClick={() => this.hidePopup()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i>\n                No\n              </Button>\n                        </Row>\n                    </div>\n                </Modal>\n\n                <Modal isOpen={this.state.IsLapsePolicyPopup} className={'modal-lg'} toggle={() => this.hideLapsePolicyPopup()}>\n                    <ModalHeader toggle={() => this.hideLapsePolicyPopup()}> Are you sure you want to Lapse this policy ? </ModalHeader>\n\n                    <Col md='12' style={{ marginTop: 15 }}>\n\n                        <Row style={{ marginTop: 15 }}>\n                            <Col md=\"2\">Policy Number</Col>\n                            <Col md=\"2\">{this.state.policyNumber}</Col>\n                        </Row>\n\n                        {/* <Row style={{ marginTop: 15 }}>\n              <Col md=\"2\">Payment Due</Col>\n              <Col md=\"2\">{this.state.paymentDue}</Col>\n            </Row> */}\n\n                        <Row style={{ marginTop: 15 }}>\n                            <Col md=\"2\"> Note </Col>\n                            <Col md=\"6\">\n                                <Input type=\"textarea\" name=\"lapsePolicyNote\" id=\"lapsePolicyNote\" rows='3' onChange={e => this.handleChange(e)} onBlur={e => this.handleChange(e)} value={this.state.lapsePolicyNote} />\n                            </Col>\n                        </Row>\n\n                    </Col>\n\n                    <div style={{ margin: 20 }}>\n                        <Row className=\"pull-right\" style={{ backgroundColor: \"#fff\", marginRight: 10 }}>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"success\" onClick={() => this.lapsePolicy()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-check\"></i>Yes\n              </Button>\n                            <Button style={{ marginLeft: \"10px\" }} color=\"primary\" onClick={() => this.hideLapsePolicyPopup()}>\n                                <i style={{ marginRight: \"10px\" }} className=\"fa fa-times\"></i>Cancel\n              </Button>\n                        </Row>\n                    </div>\n                </Modal>\n\n            </div >\n        )\n    }\n}\n\nexport default withTranslation()(Account);\n"]},"metadata":{},"sourceType":"module"}