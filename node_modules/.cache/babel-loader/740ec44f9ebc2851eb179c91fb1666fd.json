{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/utils/authenticate.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie'; // export const getAccessToken = () => Cookies.get('access_token')\n// export const getRefreshToken = () => Cookies.get('refresh_token')\n\nexport const getAccessToken = () => localStorage.getItem('access_token');\nexport const getRefreshToken = () => localStorage.getItem('refresh_token');\nexport const isAuthenticated = () => !!getAccessToken(); // Authetication.js Refrence Urls \n// https://github.com/coreui/coreui-free-react-admin-template/issues/113\n// https://stackoverflow.com/questions/49819183/react-what-is-the-best-way-to-handle-login-and-authentication //Check GG.'s answer for refrence\n\nexport const UnauthenticatedRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n  render: props => !isAuthenticated() ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }\n}));\nexport const AuthenticatedRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n  render: props => isAuthenticated() ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 15\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }\n})); // export const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n//     <Route {...rest} render={(props) => {\n//         let path = props.location.pathname.split('/');\n//         if(isAuthenticated()){\n//             if(path[1] === 'editContactDetails' && props.location.state === undefined){\n//                 return props.history.goBack();\n//             }else{\n//                 return <Component {...props} />\n//             }\n//         }else{\n//             return <Redirect to='/login' />\n//         }\n//     }} />\n// );","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/utils/authenticate.js"],"names":["React","Route","Redirect","Cookies","getAccessToken","localStorage","getItem","getRefreshToken","isAuthenticated","UnauthenticatedRoute","component","Component","rest","props","AuthenticatedRoute"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAeC,QAAf,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAA7B;AACP,OAAO,MAAMC,eAAe,GAAG,MAAOF,YAAY,CAACC,OAAb,CAAqB,eAArB,CAA/B;AACP,OAAO,MAAME,eAAe,GAAG,MAAM,CAAC,CAACJ,cAAc,EAA9C,C,CAEP;AACA;AACA;;AAEA,OAAO,MAAMK,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBAChC,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAGC,KAAD,IACrB,CAACL,eAAe,EAAhB,gBACM,oBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADN,gBAEM,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADG;AAQP,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEJ,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBAC9B,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,EAAA,MAAM,EAAGC,KAAD,IACrBL,eAAe,kBACT,oBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADS,gBAET,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADG,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Route,Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n// export const getAccessToken = () => Cookies.get('access_token')\n// export const getRefreshToken = () => Cookies.get('refresh_token')\nexport const getAccessToken = () => localStorage.getItem('access_token');\nexport const getRefreshToken = () =>  localStorage.getItem('refresh_token');\nexport const isAuthenticated = () => !!getAccessToken()\n\n// Authetication.js Refrence Urls \n// https://github.com/coreui/coreui-free-react-admin-template/issues/113\n// https://stackoverflow.com/questions/49819183/react-what-is-the-best-way-to-handle-login-and-authentication //Check GG.'s answer for refrence\n\nexport const UnauthenticatedRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        !isAuthenticated()\n            ? <Component {...props} />\n            : <Redirect to='/' />\n    )} />\n);\n\nexport const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={(props) => (\n        isAuthenticated()\n            ? <Component {...props} />\n            : <Redirect to='/login' />\n    )} />\n);\n\n// export const AuthenticatedRoute = ({ component: Component, ...rest }) => (\n//     <Route {...rest} render={(props) => {\n//         let path = props.location.pathname.split('/');\n//         if(isAuthenticated()){\n//             if(path[1] === 'editContactDetails' && props.location.state === undefined){\n//                 return props.history.goBack();\n//             }else{\n//                 return <Component {...props} />\n//             }\n//         }else{\n//             return <Redirect to='/login' />\n//         }\n//     }} />\n// );"]},"metadata":{},"sourceType":"module"}