{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/Assumption/Assumption.js\";\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport APIConstant from '../../../utils/constants';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, InputGroup, Button as BTN } from 'reactstrap';\nimport api from '../../../utils/apiClient';\nimport { CommonConfig } from '../../../utils/constants';\nimport { toast } from 'react-toastify';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\n\nclass Assumption extends Component {\n  constructor(props) {\n    super(props);\n\n    this.export = () => {\n      this.dt.exportCSV();\n    };\n\n    this.reset = () => {\n      this.setState({\n        heading: 'Add',\n        toastName: 'Saved',\n        buttonName: 'Save',\n        primary: false,\n        country: '',\n        countryError: true,\n        category: '',\n        categoryError: true,\n        AssumptionId: '',\n        assumptionCode: '',\n        assumptionCodeError: true,\n        assumption: '',\n        assumptionError: true\n      });\n    };\n\n    this.edit = rowData => {\n      console.log(\"rowData\", rowData);\n      this.setState({\n        primary: true,\n        heading: 'Update',\n        buttonName: 'Update',\n        toastName: 'Updated',\n        country: rowData.country,\n        countryError: false,\n        category: rowData.category,\n        categoryError: false,\n        AssumptionId: rowData.AssumptionId,\n        assumptionCode: rowData.assumptionCode,\n        assumptionCodeError: false,\n        assumption: rowData.assumption,\n        assumptionError: false\n      });\n    };\n\n    this.openDeleteModal = rowData => {\n      this.setState({\n        toggleModal: !this.state.toggleModal,\n        AssumptionId: rowData.AssumptionId,\n        assumptionCode: rowData.assumptionCode\n      });\n    };\n\n    this.toggleLarge = () => {\n      this.setState({\n        toggleModal: !this.state.toggleModal\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'assumptionCode') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            assumptionCodeError: true\n          });\n          this.show(\"assumptionCode\", true);\n        } else {\n          let RegEx = \"\";\n          let name = e.target.value;\n\n          if (!RegEx.test(name)) {\n            this.setState({\n              assumptionCodeError: true\n            });\n            this.show(\"assumptionCode\", true); // } else if (e.target.value.length > 100) {\n            //     this.setState({ assumptionCodeError: true });\n            //     this.show(\"assumptionCode\", true);\n          } else {\n            this.setState({\n              assumptionCodeError: false,\n              assumptionCode: e.target.value\n            });\n            this.show(\"assumptionCode\", false);\n          }\n        }\n      }\n\n      if (e.target.name === 'assumption') {\n        if (CommonConfig.isEmpty(e.target.value)) {\n          this.setState({\n            assumptionError: true\n          });\n          this.show(\"assumption\", true);\n        } else {\n          let RegEx = \"\";\n          let name = e.target.value;\n\n          if (!RegEx.test(name)) {\n            this.setState({\n              assumptionError: true\n            });\n            this.show(\"assumption\", true); // } else if (e.target.value.length > 100) {\n            //     this.setState({ assumptionError: true });\n            //     this.show(\"assumption\", true);\n          } else {\n            this.setState({\n              assumptionError: false,\n              assumption: e.target.value\n            });\n            this.show(\"assumptions\", false);\n          }\n        }\n      }\n    };\n\n    this.selectType = (value, type) => {\n      if (type === 'vesselClass') {\n        if (value === '') {\n          this.setState({\n            vesselClassError: true,\n            vesselClass: value\n          });\n          this.show(\"vesselClass\", true);\n        } else {\n          this.setState({\n            vesselClass: value,\n            vesselClassError: false\n          });\n          this.show(\"vesselClass\", false);\n        }\n      }\n\n      if (type === 'vesselType') {\n        if (value === '') {\n          this.setState({\n            vesselTypeError: true,\n            vesselType: value\n          });\n          this.show(\"vesselType\", true);\n        } else {\n          this.setState({\n            vesselType: value,\n            vesselTypeError: false\n          });\n          this.show(\"vesselType\", false);\n        }\n      }\n\n      if (type === 'country') {\n        if (value === '') {\n          this.setState({\n            countryError: true,\n            country: value\n          });\n          this.show(\"country\", true);\n        } else {\n          this.setState({\n            country: value,\n            countryError: false\n          });\n          this.show(\"country\", false);\n        }\n      }\n\n      if (type === 'category') {\n        if (value === '') {\n          this.setState({\n            categoryError: true,\n            category: value\n          });\n          this.show(\"category\", true);\n        } else {\n          this.setState({\n            categoryError: false,\n            category: value\n          });\n          this.show(\"category\", false);\n        }\n      }\n    };\n\n    let columns = [{\n      field: \"vesselClass\",\n      header: \"Class\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 0\n    }, {\n      field: \"vesselType\",\n      header: \"Type\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 1\n    }, {\n      field: \"country\",\n      header: \"Country\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 2\n    }, {\n      field: \"category\",\n      header: \"Category\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 3\n    }, {\n      field: \"assumptionCode\",\n      header: \"Assumption Code\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 4\n    }, {\n      field: \"assumption\",\n      header: \"assumption\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 5\n    }, {\n      body: this.actionTemplate.bind(this),\n      header: \"Action\",\n      sortable: false,\n      filter: false,\n      filterMatchMode: 'contains',\n      id: 6\n    }];\n    this.state = {\n      cols: columns,\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      selectedPage: 0,\n      str: '',\n      globalFilter: null,\n      heading: 'Add',\n      buttonName: 'Save',\n      toastName: 'Saved',\n      primary: false,\n      LanguageId: props.i18n.language === 'en' ? 'en-GB' : props.i18n.language === 'es' ? 'es-ES' : props.i18n.language === 'ie' ? 'en-IE' : props.i18n.language,\n      VesselClassList: [],\n      vesselClassError: true,\n      vesselClass: '',\n      VesselTypeList: [],\n      vesselTypeError: true,\n      vesselType: '',\n      AssumptionId: '',\n      assumptionList: [],\n      country: '',\n      countryError: true,\n      countryList: [],\n      category: '',\n      categoryError: true,\n      categoryList: [],\n      assumptionCode: '',\n      assumptionCodeError: '',\n      assumption: '',\n      assumptionError: ''\n    };\n    this.colOptions = [];\n\n    for (let col of columns) {\n      this.colOptions.push({\n        label: \"\" + col.header + \"\",\n        value: col\n      });\n    }\n\n    this.onColumnToggle = this.onColumnToggle.bind(this);\n    this.actionTemplate = this.actionTemplate.bind(this);\n    this.openModal = this.openModal.bind(this);\n  }\n\n  onColumnToggle(event) {\n    let valueInOrder = event.value.sort((x, y) => {\n      return x.id - y.id;\n    });\n    this.setState({\n      cols: valueInOrder\n    });\n  }\n\n  componentDidMount() {\n    this.getAssumptionList();\n    this.getVesselClass(); // this.getVesselType();\n\n    this.getCountry();\n    this.getCategory();\n  }\n\n  getAssumptionList() {\n    // let data = {}\n    api.post('api/getAssumptionList').then(res => {\n      console.log(\"data\", res);\n\n      if (res.success) {\n        var formattedData = [];\n\n        for (var i = 0; i < res.data.length; i++) {\n          formattedData.push({\n            country: res.data[i].Country,\n            category: res.data[i].Category,\n            assumptionCode: res.data[i].AssumptionCode,\n            assumption: res.data[i].AssumptionDescription\n          });\n          let lastPage = this.state.rowsPerPage < formattedData.length ? this.state.rowsPerPage : formattedData.length;\n          let str = '1 to ' + lastPage + ' out of ' + formattedData.length + ' records';\n          this.setState({\n            assumptionList: formattedData,\n            str: str\n          });\n        }\n      } else {\n        console.log(\"Else\");\n      }\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  getVesselClass() {\n    // let data = {}\n    api.post('api/getVesselClassData').then(res => {\n      if (res.success) {\n        console.log(\"Class\", res.data);\n        var VesselClass = [];\n\n        for (var i = 0; i < res.data.length; i++) {\n          VesselClass.push({\n            vesselClassId: res.data[i].VesselClassId,\n            vesselClassName: res.data[i].VesselClassName\n          });\n        }\n\n        this.setState({\n          VesselClassList: VesselClass\n        }); // this.getVesselType();\n      } else {\n        console.log(\"Else\");\n      }\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  getVesselType() {\n    debugger;\n    let data = {\n      // VesselClassId: 'a93c7bd9-3b91-11ea-bd8d-fa163eb9754c'\n      VesselClassId: this.state.vesselClass\n    };\n    api.post('api/getVesselType', data).then(res => {\n      console.log(res);\n\n      if (res.success) {\n        this.setState({\n          VesselTypeList: res.data\n        });\n      } else {}\n    }).catch(err => {\n      console.log(\"errr\", err);\n    });\n  }\n\n  getCountry() {\n    try {\n      const data = {\n        stringmaptype: 'COUNTRY'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          console.log(\"COUNTRY\", res.data);\n          var country = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            country.push({\n              label: res.data[i].StringMapName,\n              value: res.data[i].Description\n            });\n          }\n\n          this.setState({\n            countryList: country\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  getCategory() {\n    try {\n      const data = {\n        stringmaptype: 'CATEGORY'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          console.log(\"Category\", res.data);\n          var category = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            category.push({\n              label: res.data[i].StringMapId,\n              value: res.data[i].StringMapName\n            });\n          }\n\n          this.setState({\n            categoryList: category\n          });\n        } else {}\n      }).catch(err => {\n        console.log(\"error\", err);\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  openModal() {\n    this.setState({\n      primary: true\n    });\n  }\n\n  show(field, condition) {\n    if (condition) {\n      document.getElementById(field).className = \"form-control is-invalid\";\n    } else {\n      document.getElementById(field).className = \"form-control\";\n    }\n  }\n\n  Delete() {\n    try {\n      let data = {\n        AssumptionId: this.state.AssumptionId,\n        CreatedBy: CommonConfig.loggedInUserId()\n      };\n      api.post('api/deleteAssumption', data).then(res => {\n        if (res.success) {\n          this.setState({\n            toggleModal: !this.state.toggleModal\n          });\n          this.reset();\n          toast.success(\"Assumption deleted successfully\");\n          this.getAssumptionList();\n        }\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  actionTemplate(rowData, column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-pencil\",\n      className: \"p-button-warning\",\n      tooltip: \"Edit\",\n      style: {\n        padding: 2\n      },\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: () => this.edit(rowData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-trash\",\n      className: \"p-button-danger\",\n      tooltip: \"Delete\",\n      style: {\n        padding: 2\n      },\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: () => this.openDeleteModal(rowData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  render() {\n    let columns = this.state.cols.map((col, i) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        field: col.field,\n        header: col.header,\n        body: col.body,\n        sortable: col.sortable,\n        filter: col.filter,\n        filterMatchMode: \"contains\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }\n    }, \"Assumption List\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box rc-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rc-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 37\n      }\n    }, \"Class Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"vesselClass\",\n      id: \"vesselClass\",\n      onChange: e => this.selectType(e.target.value, 'vesselClass'),\n      value: this.state.vesselClassName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 41\n      }\n    }, \"Select Class Name\"), this.state.VesselClassList.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.vesselClassId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 53\n        }\n      }, ct.vesselClassName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 37\n      }\n    }, \"Please select class name\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 33\n      }\n    }, \"Vessel Type\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"vesselType\",\n      id: \"vesselType\",\n      onChange: e => this.selectType(e.target.value, 'vesselType'),\n      value: this.state.vesselType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 37\n      }\n    }, \"Select Vessel Type\"), this.state.VesselTypeList.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.VesselTypeId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 49\n        }\n      }, ct.VesselTypeName);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 33\n      }\n    }, \"Please select vessel type\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 33\n      }\n    }, \"Country\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"country\",\n      id: \"country\",\n      onChange: e => this.selectType(e.target.value, 'vesselType'),\n      value: this.state.vesselType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 37\n      }\n    }, \"Select Country\"), this.state.countryList.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 49\n        }\n      }, type.label);\n    })), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 33\n      }\n    }, \"Please select country\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      style: {\n        marginTop: \"20px\",\n        marginRight: '.5em',\n        borderRadius: \"20px\"\n      },\n      tooltip: \"Go\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: () => this.getRiskQuestion(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 33\n      }\n    }, \"Go\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right-option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pi pi-search\",\n      style: {\n        margin: '4px 4px 0 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(InputText, {\n      type: \"search\",\n      onInput: e => this.setState({\n        globalFilter: e.target.value\n      }),\n      placeholder: \"Global Search\",\n      size: \"30\",\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.cols,\n      options: this.colOptions,\n      fixedPlaceholder: true,\n      placeholder: CommonConfig.dataTableConfig.columnToggleIcon,\n      tooltip: \"Show/Hide Column\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onChange: this.onColumnToggle,\n      style: {\n        width: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-plus\",\n      tooltip: \"Add Assumption\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: this.openModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-external-link\",\n      tooltip: \"Export As CSV\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: this.export,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.assumptionList,\n      first: this.state.selectedPage,\n      onPage: e => this.getPageString(e),\n      paginator: true,\n      rows: this.state.rowsPerPage,\n      totalRecords: this.state.assumptionList.length,\n      exportFilename: \"Assumption List\",\n      currentPageReportTemplate: this.state.str,\n      paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n      rowsPerPageOptions: this.state.rowsPerPageOptions,\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      responsive: true,\n      resizableColumns: true,\n      columnResizeMode: \"fit\",\n      scrollHeight: \"340px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 21\n      }\n    }, columns)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.primary,\n      toggle: this.reset,\n      className: 'modal-primary ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 33\n      }\n    }, this.state.heading, \" Assumption\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"text-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 45\n      }\n    }, \"* Marked fields are mandatory\"))), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form\",\n      action: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 49\n      }\n    }, \"Class Id:\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 45\n      }\n    }, this.state.vesselClassCode), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 49\n      }\n    }, \"Class Name:\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 49\n      }\n    }, \"Vessel Type:\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 53\n      }\n    }, \"Country*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"country\",\n      id: \"country\",\n      onChange: e => this.selectType(e.target.value, 'country'),\n      value: this.state.country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 57\n      }\n    }, \"Select country\"), this.state.countryList.map((type, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: type.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 69\n        }\n      }, type.label);\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 57\n      }\n    }, \"Please select country\"))))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 53\n      }\n    }, \"Category*\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"category\",\n      id: \"category\",\n      onChange: e => this.selectType(e.target.value, 'category'),\n      value: this.state.category,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 57\n      }\n    }, \"Select category\"), this.state.categoryList.map((ct, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: ct.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 69\n        }\n      }, ct.value);\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 57\n      }\n    }, \"Please select category\"))))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 53\n      }\n    }, \"Assumption Code*\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"assumptionCode\",\n      id: \"assumptionCode\",\n      onChange: e => this.handleChange(e),\n      placeholder: \"Asssumption Code\",\n      value: this.state.assumptionCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 57\n      }\n    }, \"Please enter valid assumption code\"))))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 53\n      }\n    }, \"Assumption*\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"assumption\",\n      id: \"assumption\",\n      onChange: e => this.handleChange(e),\n      placeholder: \"Asssumption\",\n      value: this.state.assumption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 57\n      }\n    }, \"Please enter assumption\"))))))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.Save(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 86\n      }\n    }), \" \", this.state.buttonName), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 87\n      }\n    }), \" Cancel\"))))), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.toggleModal,\n      toggle: this.toggleLarge,\n      className: 'modal-lg ' + this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggleLarge,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 21\n      }\n    }, \"Delete Assumption\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 21\n      }\n    }, \"Are you sure, You want to delete assumption?\"), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.Delete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 76\n      }\n    }), \" Yes\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: this.toggleLarge,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 73\n      }\n    }), \" Cancel\"))));\n  }\n\n}\n\nexport default withTranslation()(Assumption);","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Master/Assumption/Assumption.js"],"names":["React","Component","DataTable","Column","MultiSelect","InputText","APIConstant","Button","Modal","ModalBody","ModalFooter","ModalHeader","Col","Row","Input","InputGroup","BTN","api","CommonConfig","toast","useTranslation","withTranslation","Trans","Assumption","constructor","props","export","dt","exportCSV","reset","setState","heading","toastName","buttonName","primary","country","countryError","category","categoryError","AssumptionId","assumptionCode","assumptionCodeError","assumption","assumptionError","edit","rowData","console","log","openDeleteModal","toggleModal","state","toggleLarge","handleChange","e","target","name","value","isEmpty","show","RegEx","test","selectType","type","vesselClassError","vesselClass","vesselTypeError","vesselType","columns","field","header","sortable","filter","filterMatchMode","id","body","actionTemplate","bind","cols","rowsPerPage","dataTableConfig","rowsPerPageOptions","selectedPage","str","globalFilter","LanguageId","i18n","language","VesselClassList","VesselTypeList","assumptionList","countryList","categoryList","colOptions","col","push","label","onColumnToggle","openModal","event","valueInOrder","sort","x","y","componentDidMount","getAssumptionList","getVesselClass","getCountry","getCategory","post","then","res","success","formattedData","i","data","length","Country","Category","AssumptionCode","AssumptionDescription","lastPage","catch","err","VesselClass","vesselClassId","VesselClassId","vesselClassName","VesselClassName","getVesselType","stringmaptype","path","dropdownbycode","StringMapName","Description","error","StringMapId","condition","document","getElementById","className","Delete","CreatedBy","loggedInUserId","column","padding","position","render","map","ct","VesselTypeId","VesselTypeName","key","marginTop","marginRight","borderRadius","getRiskQuestion","textAlign","margin","columnToggleIcon","width","el","getPageString","color","vesselClassCode","Save"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport APIConstant from '../../../utils/constants';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport { Button } from 'primereact/button';\nimport { Modal, ModalBody, ModalFooter, ModalHeader, Col, Row, Input, InputGroup, Button as BTN } from 'reactstrap';\nimport api from '../../../utils/apiClient';\nimport { CommonConfig } from '../../../utils/constants';\nimport { toast } from 'react-toastify';\nimport { useTranslation, withTranslation, Trans } from 'react-i18next';\n\nclass Assumption extends Component {\n    constructor(props) {\n        super(props);\n\n        let columns = [\n            { field: \"vesselClass\", header: \"Class\", sortable: true, filter: true, filterMatchMode: 'contains', id: 0 },\n            { field: \"vesselType\", header: \"Type\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1 },\n            { field: \"country\", header: \"Country\", sortable: true, filter: true, filterMatchMode: 'contains', id: 2 },\n            { field: \"category\", header: \"Category\", sortable: true, filter: true, filterMatchMode: 'contains', id: 3 },\n            { field: \"assumptionCode\", header: \"Assumption Code\", sortable: true, filter: true, filterMatchMode: 'contains', id: 4 },\n            { field: \"assumption\", header: \"assumption\", sortable: true, filter: true, filterMatchMode: 'contains', id: 5 },\n            { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, filterMatchMode: 'contains', id: 6 }\n        ];\n\n        this.state = {\n            cols: columns,\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n            selectedPage: 0,\n            str: '',\n            globalFilter: null,\n\n            heading: 'Add',\n            buttonName: 'Save',\n            toastName: 'Saved',\n            primary: false,\n\n            LanguageId: (props.i18n.language === 'en') ? 'en-GB' : (props.i18n.language === 'es') ? 'es-ES' : (props.i18n.language === 'ie') ? 'en-IE' : props.i18n.language,\n\n            VesselClassList: [],\n            vesselClassError: true,\n            vesselClass: '',\n\n            VesselTypeList: [],\n            vesselTypeError: true,\n            vesselType: '',\n\n            AssumptionId: '',\n            assumptionList: [],\n\n            country: '',\n            countryError: true,\n            countryList: [],\n\n            category: '',\n            categoryError: true,\n            categoryList: [],\n\n            assumptionCode: '',\n            assumptionCodeError: '',\n\n            assumption: '',\n            assumptionError: '',\n        }\n\n\n        this.colOptions = [];\n        for (let col of columns) {\n            this.colOptions.push({ label: (\"\" + col.header + \"\"), value: col });\n        }\n        this.onColumnToggle = this.onColumnToggle.bind(this);\n        this.actionTemplate = this.actionTemplate.bind(this);\n        this.openModal = this.openModal.bind(this);\n\n    }\n\n    onColumnToggle(event) {\n        let valueInOrder = event.value.sort((x, y) => { return x.id - y.id });\n        this.setState({ cols: valueInOrder });\n    }\n\n    componentDidMount() {\n        this.getAssumptionList();\n        this.getVesselClass();\n        // this.getVesselType();\n        this.getCountry();\n        this.getCategory();\n    }\n\n    getAssumptionList() {\n        // let data = {}\n        api.post('api/getAssumptionList').then(res => {\n            console.log(\"data\", res)\n            if (res.success) {\n                var formattedData = [];\n                for (var i = 0; i < res.data.length; i++) {\n                    formattedData.push({\n\n                        country: res.data[i].Country,\n                        category: res.data[i].Category,\n                        assumptionCode: res.data[i].AssumptionCode,\n                        assumption: res.data[i].AssumptionDescription,\n                    })\n                    let lastPage = (this.state.rowsPerPage < formattedData.length) ? this.state.rowsPerPage : formattedData.length;\n                    let str = '1 to ' + lastPage + ' out of ' + formattedData.length + ' records';\n\n                    this.setState({ assumptionList: formattedData, str: str });\n                }\n            } else {\n                console.log(\"Else\");\n            }\n        }).catch(err => {\n            console.log(\"errr\", err)\n        })\n    }\n\n    getVesselClass() {\n        // let data = {}\n        api.post('api/getVesselClassData').then(res => {\n            \n            if (res.success) {\n                console.log(\"Class\", res.data);\n                var VesselClass = [];\n                for (var i = 0; i < res.data.length; i++) {\n                    VesselClass.push({\n                        vesselClassId: res.data[i].VesselClassId,\n                        vesselClassName: res.data[i].VesselClassName,\n                    })\n                }\n                this.setState({ VesselClassList: VesselClass });\n                // this.getVesselType();\n            } else {\n                console.log(\"Else\");\n            }\n        }).catch(err => {\n            console.log(\"errr\", err)\n        })\n    }\n\n    getVesselType() {\n        debugger\n            let data = {\n                // VesselClassId: 'a93c7bd9-3b91-11ea-bd8d-fa163eb9754c'\n                VesselClassId: this.state.vesselClass\n            } \n            api.post('api/getVesselType', data).then(res => {\n                console.log(res);\n    \n                if (res.success) {\n                    this.setState({ VesselTypeList: res.data });\n                } else {\n                }\n            }).catch(err => {\n                console.log(\"errr\", err);\n            });\n        }\n\n    getCountry() {\n        try {\n            const data = {\n                stringmaptype: 'COUNTRY',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    console.log(\"COUNTRY\", res.data);\n                    var country = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        country.push({\n                            label: res.data[i].StringMapName,\n                            value: res.data[i].Description\n                        })\n                    }\n                    this.setState({ countryList: country });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n\n    getCategory() {\n        try {\n            const data = {\n                stringmaptype: 'CATEGORY',\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    console.log(\"Category\", res.data);\n                    var category = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        category.push({\n                            label: res.data[i].StringMapId,\n                            value: res.data[i].StringMapName\n                        })\n                    }\n                    this.setState({ categoryList: category });\n                } else {\n\n                }\n            }).catch(err => {\n                console.log(\"error\", err);\n            });\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n    }\n\n\n    openModal() {\n        this.setState({\n            primary: true\n        })\n    }\n\n    export = () => {\n        this.dt.exportCSV();\n    }\n\n    reset = () => {\n        this.setState({\n            heading: 'Add',\n            toastName: 'Saved',\n            buttonName: 'Save',\n            primary: false,\n            country: '',\n            countryError: true,\n            category: '',\n            categoryError: true,\n            AssumptionId: '',\n            assumptionCode: '',\n            assumptionCodeError: true,\n            assumption: '',\n            assumptionError: true,\n            \n        })\n    }\n\n    edit = (rowData) => {\n        console.log(\"rowData\", rowData)\n\n        this.setState({\n            primary: true,\n            heading: 'Update',\n            buttonName: 'Update',\n            toastName: 'Updated',\n            country:rowData.country,\n            countryError:false,\n            category:rowData.category,\n            categoryError: false,\n            AssumptionId: rowData.AssumptionId,\n            assumptionCode: rowData.assumptionCode,\n            assumptionCodeError: false,\n            assumption: rowData.assumption,\n            assumptionError: false\n        })\n\n    }\n\n    show(field, condition) {\n        if (condition) {\n            document.getElementById(field).className = \"form-control is-invalid\";\n        } else {\n            document.getElementById(field).className = \"form-control\";\n        }\n    }\n\n    openDeleteModal = (rowData) => {\n        this.setState({\n            toggleModal: !this.state.toggleModal,\n            AssumptionId: rowData.AssumptionId,\n            assumptionCode: rowData.assumptionCode\n        });\n    }\n\n    Delete() {\n\n        try {\n            let data = {\n                AssumptionId: this.state.AssumptionId,\n                CreatedBy: CommonConfig.loggedInUserId()\n            }\n            api.post('api/deleteAssumption', data).then(res => {\n                if (res.success) {\n                    this.setState({ toggleModal: !this.state.toggleModal });\n                    this.reset();\n                    toast.success(\"Assumption deleted successfully\");\n                    this.getAssumptionList();\n                }\n            })\n        } catch (error) {\n            console.log(\"error\", error);\n        }\n\n    }\n\n\n    toggleLarge = () => {\n        this.setState({ toggleModal: !this.state.toggleModal });\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n\n        if (e.target.name === 'assumptionCode') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ assumptionCodeError: true });\n                this.show(\"assumptionCode\", true);\n            }\n            else {\n                let RegEx = \"\"\n                let name = e.target.value;\n                if (!RegEx.test(name)) {\n                    this.setState({ assumptionCodeError: true });\n                    this.show(\"assumptionCode\", true);\n                    // } else if (e.target.value.length > 100) {\n                    //     this.setState({ assumptionCodeError: true });\n                    //     this.show(\"assumptionCode\", true);\n                } else {\n                    this.setState({ assumptionCodeError: false, assumptionCode: e.target.value });\n                    this.show(\"assumptionCode\", false);\n                }\n            }\n        }\n\n        if (e.target.name === 'assumption') {\n            if (CommonConfig.isEmpty(e.target.value)) {\n                this.setState({ assumptionError: true });\n                this.show(\"assumption\", true);\n            }\n            else {\n                let RegEx = \"\"\n                let name = e.target.value;\n                if (!RegEx.test(name)) {\n                    this.setState({ assumptionError: true });\n                    this.show(\"assumption\", true);\n                    // } else if (e.target.value.length > 100) {\n                    //     this.setState({ assumptionError: true });\n                    //     this.show(\"assumption\", true);\n                } else {\n                    this.setState({ assumptionError: false, assumption: e.target.value });\n                    this.show(\"assumptions\", false);\n                }\n            }\n        }\n    }\n\n    selectType = (value, type) => {\n\n\n        if (type === 'vesselClass') {\n\n            if (value === '') {\n                this.setState({ vesselClassError: true, vesselClass: value });\n                this.show(\"vesselClass\", true);\n            } else {\n                this.setState({ vesselClass: value, vesselClassError: false });\n                this.show(\"vesselClass\", false);\n            }\n        }\n\n        if (type === 'vesselType') {\n\n            if (value === '') {\n                this.setState({ vesselTypeError: true, vesselType: value });\n                this.show(\"vesselType\", true);\n            } else {\n                this.setState({ vesselType: value, vesselTypeError: false });\n                this.show(\"vesselType\", false);\n            }\n        }\n\n        if (type === 'country') {\n\n            if (value === '') {\n                this.setState({ countryError: true, country: value });\n                this.show(\"country\", true);\n            } else {\n                this.setState({ country: value, countryError: false });\n                this.show(\"country\", false);\n            }\n        }\n\n        if (type === 'category') {\n\n            if (value === '') {\n                this.setState({ categoryError: true, category: value });\n                this.show(\"category\", true);\n            } else {\n                this.setState({ categoryError: false, category: value });\n                this.show(\"category\", false);\n            }\n        }\n    }\n\n\n    actionTemplate(rowData, column) {\n\n        return <div className=\"text-center\">\n            <Button type=\"button\" icon=\"pi pi-pencil\" className=\"p-button-warning\" tooltip=\"Edit\" style={{ padding: 2 }} tooltipOptions={{ position: 'bottom' }} onClick={() => this.edit(rowData)}></Button>\n            <Button type=\"button\" icon=\"pi pi-trash\" className=\"p-button-danger\"  tooltip=\"Delete\" style={{ padding: 2 }}  tooltipOptions={{ position: 'bottom' }} onClick={() => this.openDeleteModal(rowData)}></Button>\n        </div>;\n    }\n\n    render() {\n        let columns = this.state.cols.map((col, i) => {\n            return <Column field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode=\"contains\" />;\n        });\n\n        return (\n            <div>\n\n\n                <div className=\"basic-header\">\n                    <h1>Assumption List</h1>\n                </div>\n\n                <div className=\"input-box rc-box\">\n                    <div className=\"rc-inline\">\n                        <Row>\n                            <Col md=\"3\">\n                                <div className=\"input-box\">\n                                    <label>Class Name</label>\n                                    <Input type=\"select\" name=\"vesselClass\" id=\"vesselClass\" onChange={(e) => this.selectType(e.target.value, 'vesselClass')} value={this.state.vesselClassName}>\n                                        <option>Select Class Name</option>\n                                        {this.state.VesselClassList.map((ct, i) => {\n                                            return (<option value={ct.vesselClassId}>{ct.vesselClassName}</option>)\n                                        })\n                                        } \n                                    </Input>\n                                    <em className=\"error invalid-feedback\">Please select class name</em>\n                                </div>\n                            </Col>\n\n                            <Col md=\"3\">\n                                <label>Vessel Type</label>\n                                <Input type=\"select\" name=\"vesselType\" id=\"vesselType\" onChange={(e) => this.selectType(e.target.value, 'vesselType')} value={this.state.vesselType}>\n                                    <option>Select Vessel Type</option>\n                                    {this.state.VesselTypeList.map((ct, i) => {\n                                        return (<option value={ct.VesselTypeId}>{ct.VesselTypeName}</option>)\n                                    })\n                                    } \n                                </Input>\n                                <em className=\"error invalid-feedback\">Please select vessel type</em>\n                            </Col>\n\n                            <Col md=\"3\">\n                                <label>Country</label>\n                                <Input type=\"select\" name=\"country\" id=\"country\" onChange={(e) => this.selectType(e.target.value, 'vesselType')} value={this.state.vesselType}>\n                                    <option>Select Country</option>\n                                    {this.state.countryList.map((type, i) => {\n                                        return (<option value={type.key}>{type.label}</option>)\n                                    })\n                                    }\n                                </Input>\n                                <em className=\"error invalid-feedback\">Please select country</em>\n                            </Col>\n                            <Col md=\"1\">\n                                <BTN color=\"success\" style={{ marginTop: \"20px\", marginRight: '.5em', borderRadius: \"20px\" }}\n                                    tooltip=\"Go\" tooltipOptions={{ position: 'bottom' }} onClick={() => this.getRiskQuestion()}\n                                >\n                                    Go\n                                </BTN>\n                            </Col>\n                        </Row>\n                    </div>\n                </div>\n\n                <div className=\"basic-header\">\n                    <div></div>\n                    <div className=\"header-right-option\">\n                        <div style={{ textAlign: 'right' }}>\n                            <i className=\"pi pi-search\" style={{ margin: '4px 4px 0 0' }}></i>\n                            <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" size=\"30\" style={{ marginRight: 10 }} />\n                        </div>\n\n                        <MultiSelect value={this.state.cols} options={this.colOptions}\n                            fixedPlaceholder={true} placeholder={CommonConfig.dataTableConfig.columnToggleIcon} tooltip=\"Show/Hide Column\"\n                            tooltipOptions={{ position: 'bottom' }} onChange={this.onColumnToggle} style={{ width: '50px' }}\n                        />\n\n                        <Button type=\"button\" icon=\"pi pi-plus\" tooltip=\"Add Assumption\" tooltipOptions={{ position: 'bottom' }} onClick={this.openModal}></Button>\n                        <Button type=\"button\" icon=\"pi pi-external-link\" tooltip=\"Export As CSV\" tooltipOptions={{ position: 'bottom' }} onClick={this.export}></Button>\n                    </div>\n                </div>\n                <div className=\"table-custom\">\n                    <DataTable\n                        ref={(el) => this.dt = el}\n                        value={this.state.assumptionList}\n                        first={this.state.selectedPage}\n                        onPage={(e) => this.getPageString(e)}\n                        paginator={true}\n                        rows={this.state.rowsPerPage}\n                        totalRecords={this.state.assumptionList.length}\n                        exportFilename=\"Assumption List\"\n                        currentPageReportTemplate={this.state.str}\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                        rowsPerPageOptions={this.state.rowsPerPageOptions}\n                        globalFilter={this.state.globalFilter}\n                        emptyMessage=\"No records found\"\n                        responsive={true}\n                        resizableColumns={true}\n                        columnResizeMode=\"fit\"\n                        scrollHeight=\"340px\">\n                        {columns}\n                    </DataTable>\n                    </div>\n\n\n                    <Row>\n                        <Col>\n                            <Modal isOpen={this.state.primary} toggle={this.reset}\n                                className={'modal-primary ' + this.props.className}>\n                                <ModalHeader toggle={this.reset}>{this.state.heading} Assumption</ModalHeader>\n                                <ModalBody>\n\n                                    <Row>\n                                        <Col md=\"12\" className=\"text-right\">\n                                            <span style={{ color: \"red\" }}>* Marked fields are mandatory</span>\n                                        </Col>\n                                    </Row>\n                                    <form className=\"form\" action=\"#\">\n\n                                        {/* <Row style={{ marginTop: \"10px\" }}>\n                                            <Col className=\"text-right\">\n                                                <Button type=\"button\" icon=\"fa fa-shield\" onClick={() => this.VesselType()}></Button>\n                                            </Col>\n                                        </Row> */}\n\n                                        <Row style={{ marginTop: \"10px\" }}>\n                                            <Col md=\"3\" className=\"pull-right\">\n                                                <label>Class Id:</label>\n                                            </Col>\n                                            <Col md=\"\">\n                                                {this.state.vesselClassCode}\n                                            </Col>\n\n                                            <Col md=\"3\" className=\"pull-right\">\n                                                <label>Class Name:</label>\n                                            </Col>\n                                            <Col md=\"\">\n                                                {/* {this.state.vesselClassCode} */}\n                                            </Col>\n\n                                            <Col md=\"3\" className=\"pull-right\">\n                                                <label>Vessel Type:</label>\n                                            </Col>\n                                            <Col md=\"\">\n                                                {/* {this.state.vesselClassCode} */}\n                                            </Col>\n                                        </Row>\n\n                                        <Row style={{ marginTop: \"10px\" }}>\n                                            <Col md=\"6\" className=\"pull-right\">\n                                                <div className=\"input-box\">\n                                                    <label>Country*</label>\n                                                    <Input type=\"select\" name=\"country\" id=\"country\"\n                                                        onChange={(e) => this.selectType(e.target.value, 'country')}\n                                                        value={this.state.country}>\n                                                        <option value=''>Select country</option>\n                                                        {this.state.countryList.map((type, i) => {\n                                                            return (<option value={type.key}>{type.label}</option>)\n                                                        })\n                                                        }\n                                                        <em className=\"error invalid-feedback\">Please select country</em>\n                                                    </Input>\n                                                </div>\n                                            </Col>\n                                        </Row>\n\n                                        <Row style={{ marginTop: \"10px\" }}>\n                                            <Col md=\"6\" className=\"pull-right\">\n                                                <div className=\"input-box\">\n                                                    <label>Category*</label>\n                                                    <Input type=\"select\" name=\"category\" id=\"category\"\n                                                        onChange={(e) => this.selectType(e.target.value, 'category')}\n                                                        value={this.state.category}>\n                                                        <option value=''>Select category</option>\n                                                        {this.state.categoryList.map((ct, i) => {\n                                                            return (<option value={ct.label}>{ct.value}</option>)\n                                                        })\n                                                        }\n                                                        <em className=\"error invalid-feedback\">Please select category</em>\n                                                    </Input>\n                                                </div>\n                                            </Col>\n                                        </Row>\n\n                                        <Row style={{ marginTop: \"10px\" }}>\n                                            <Col md=\"6\" className=\"pull-right\">\n                                                <div className=\"input-box\">\n                                                    <label>Assumption Code*</label>\n                                                    <InputGroup>\n                                                        <Input type=\"text\" name=\"assumptionCode\" id=\"assumptionCode\" onChange={e => this.handleChange(e)} placeholder=\"Asssumption Code\" value={this.state.assumptionCode} />\n                                                        <em className=\"error invalid-feedback\">Please enter valid assumption code</em>\n                                                    </InputGroup>\n                                                </div>\n                                            </Col>\n                                        </Row>\n\n                                        <Row style={{ marginTop: \"10px\" }}>\n                                            <Col md=\"6\" className=\"pull-right\">\n                                                <div className=\"input-box\">\n                                                    <label>Assumption*</label>\n                                                    <InputGroup>\n                                                        <Input type=\"textarea\" name=\"assumption\" id=\"assumption\" onChange={e => this.handleChange(e)} placeholder=\"Asssumption\" value={this.state.assumption} />\n                                                        <em className=\"error invalid-feedback\">Please enter assumption</em>\n                                                    </InputGroup>\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                    </form>\n                                </ModalBody>\n                                <ModalFooter>\n                                    <BTN color=\"success\" onClick={() => this.Save()}><i class=\"fa fa-check\"></i> {this.state.buttonName}</BTN>{' '}\n                                    <BTN color=\"primary\" onClick={() => this.reset()}><i class=\"fa fa-close\"></i> Cancel</BTN>\n                                </ModalFooter>\n                            </Modal>\n                        </Col>\n                    </Row>\n                \n\n                <Modal isOpen={this.state.toggleModal} toggle={this.toggleLarge}\n                    className={'modal-lg ' + this.props.className}>\n                    <ModalHeader toggle={this.toggleLarge}>Delete Assumption</ModalHeader>\n                    <ModalBody>\n                        Are you sure, You want to delete assumption?\n                    </ModalBody>\n                    <ModalFooter>\n                        <BTN color=\"success\" onClick={() => this.Delete()}><i class=\"fa fa-check\"></i> Yes</BTN>{' '}\n                        <BTN color=\"primary\" onClick={this.toggleLarge}><i class=\"fa fa-close\"></i> Cancel</BTN>\n                    </ModalFooter>\n                </Modal>\n            </div >\n        );\n    }\n\n}\n\nexport default withTranslation()(Assumption);\n"]},"metadata":{},"sourceType":"module"}