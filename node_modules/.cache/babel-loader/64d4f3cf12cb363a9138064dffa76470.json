{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Policy/PolicyList.js\";\nimport React, { Component } from 'react';\nimport { Collapse, Button as BTN, Card, CardHeader, CardBody, Col, Row, Input } from 'reactstrap';\nimport { Button } from 'primereact/button';\nimport api from '../../utils/apiClient';\nimport { withTranslation } from 'react-i18next';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CommonConfig } from '../../utils/constants';\nimport DatePicker from 'react-date-picker';\nimport moment from 'moment';\nimport APIConstant from '../../utils/constants';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\nclass PolicyDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPageString = e => {\n      let firstPage = e.first + 1;\n      let l = e.rows * (e.page + 1);\n      let lastPage = l < this.state.arr.length ? l : this.state.arr.length;\n      var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arr.length + ' records';\n      this.setState({\n        selectedPage: e.first,\n        str: str,\n        rowsPerPage: e.rows\n      });\n    };\n\n    this.toggleLargeAdd = () => {\n      this.setState({\n        toggleModalAdd: false\n      });\n    };\n\n    this.toggleCustom = tab => {\n      const prevState = this.state.custom;\n      const state = prevState.map((x, index) => tab === index ? !x : false);\n      this.setState({\n        custom: state\n      });\n    };\n\n    this.redirectToNewPolicy = () => {\n      var splitData = this.props.location.pathname.split(\"/\");\n\n      if (splitData[2] !== undefined && splitData[3] !== undefined) {\n        this.props.history.push({\n          pathname: '/CreatePolicy/' + splitData[2],\n          state: {\n            id: splitData[2]\n          }\n        });\n      } else {\n        this.props.history.push({\n          pathname: '/NewPolicy/',\n          state: {}\n        });\n      }\n    };\n\n    let columns = [// { field: \"SrNo\", header: \"Sr No.\", sortable: true, filter: true, id: 0 },\n    // { field: \"Type\", header: \"Type.\", sortable: true, filter: true, id: 1 },\n    // { field: \"PolicyNo\", header: \"Policy No.\", sortable: true, filter: true, id: 2 },\n    // { field: \"BoatType\", header: \"Outstanding Amount\", sortable: true, filter: true, id: 3 },\n    // { field: \"Status\", header: \"Status\", sortable: true, filter: true, id: 4 },\n    // { field: \"Department\", header: \"Department\", sortable: true, filter: true, id: 4 },\n    // { field: \"Vessel\", header: \"Vessel\", sortable: true, filter: true, id: 5 },\n    // { field: \"Value\", header: \"Value.\", sortable: true, filter: true, id: 6 },\n    // { field: \"Premiun\", header: \"Premiun\", sortable: true, filter: true, id: 7 },\n    // { field: \"Created\", header: \"Created\", sortable: true, filter: true, id: 8 },\n    // { field: \"Renewal\", header: \"Renewal\", sortable: true, filter: true, id: 9 },\n    // { field: \"Updated\", header: \"Updated\", sortable: true, filter: true, id: 10 },\n    // { field: \"LastUpdatedBy\", header: \"Last Updated By\", sortable: true, filter: true, id: 11 },\n    // { field: \"CreatedBy\", header: \"Created by\", sortable: true, filter: true, id: 12 },\n    // { field: \"Currency\", header: \"Currency\", sortable: true, filter: true, id: 13 },\n    // { field: \"Client\", header: \"Client\", sortable: true, filter: true, id: 14 },\n    // { field: \"Country\", header: \"Country\", sortable: true, filter: true, id: 15 },\n    {\n      body: this.actionTemplate.bind(this),\n      header: \"Action\",\n      sortable: false,\n      filter: false,\n      id: 0\n    }, {\n      body: this.formatPolicyDetail.bind(this),\n      field: \"PolicyData\",\n      header: \"Policy No/Type\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 1\n    }, {\n      body: this.formatContactDetail.bind(this),\n      field: \"ClientDetails\",\n      header: \"Client/Contacts\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 2\n    }, {\n      body: this.formatVesselData.bind(this),\n      field: \"VesselDetails\",\n      header: \"Vessel Class/Type\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 3\n    }, {\n      field: \"InsuranceCompanyName\",\n      header: \"Insurer\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 4\n    }, {\n      body: this.formatPremiun.bind(this),\n      header: \"Sum Insured/Premium\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 5\n    }, {\n      body: this.formatDate.bind(this),\n      field: \"InceptionDate\",\n      header: \"Inception/Renewal\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 6\n    }, {\n      field: \"Department\",\n      header: \"Department\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 7\n    }, {\n      field: \"Status\",\n      header: \"Status\",\n      sortable: true,\n      filter: true,\n      filterMatchMode: 'contains',\n      id: 8\n    }];\n    this.state = {\n      toggleModalAdd: false,\n      contactShown: '',\n      cols: columns,\n      clientArray: [],\n      client: '',\n      phoneArray: [],\n      phone: '',\n      str: '',\n      emailArray: [],\n      email: '',\n      policyNumberArray: [],\n      policyNumber: '',\n      binderArray: [],\n      binder: '',\n      subBinderArray: [],\n      subBinder: '',\n      policyStartFromDate: '',\n      policyStartToDate: '',\n      policyRenewalFromDate: '',\n      policyRenewalToDate: '',\n      agentserviceCenter: '',\n      sumInsuredfrom: '',\n      sumInsuredTo: '',\n      arr: [],\n      selectedPage: 0,\n      filteredcontactsSingle: null,\n      contactArray: [],\n      rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      custom: false,\n      isExpand: false,\n      countryList: [],\n      country: '',\n      languageArray: [],\n      currencyArray: [],\n      policyStatusList: [],\n      policyStatus: '',\n      policyTypeArray: [],\n      policyType: '',\n      vesselClassArray: [],\n      vesselClassCopy: [],\n      vesselClass: '',\n      vesselType: '',\n      vesselTypeArray: []\n    };\n    this.colOptions = [];\n\n    for (let col of columns) {\n      this.colOptions.push({\n        label: col.header,\n        value: col\n      });\n    }\n\n    this.onColumnToggle = this.onColumnToggle.bind(this);\n    this.actionTemplate = this.actionTemplate.bind(this);\n    this.export = this.export.bind(this);\n  }\n\n  onColumnToggle(event) {\n    let valueInOrder = event.value.sort((x, y) => {\n      return x.id - y.id;\n    });\n    this.setState({\n      cols: valueInOrder\n    });\n  }\n\n  edit(rowData) {\n    this.props.history.push({\n      pathname: '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1',\n      state: {\n        PolicyId: rowData.PolicyId,\n        tab: 1\n      }\n    });\n  }\n\n  formatPolicyDetail(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, rowData.PolicyType), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, rowData.PolicyNumber));\n  }\n\n  formatContactDetail(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, rowData.Name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, CommonConfig.formatPhoneNumber(rowData.CountryCode + rowData.PhoneNumber)), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, rowData.Email));\n  }\n\n  formatVesselData(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, rowData.VesselClassName), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, rowData.VesselTypeName));\n  }\n\n  formatPremiun(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, rowData.SumInsured), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, rowData.CurrentPremium));\n  }\n\n  formatDate(rowData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, rowData.InceptionDate), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, rowData.RenewalDate));\n  }\n\n  actionTemplate(rowData, column) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"policy-list-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-eye\",\n      className: \"p-button-warning\",\n      onClick: () => this.edit(rowData),\n      style: {\n        marginRight: '.5em'\n      },\n      tooltip: \"View\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  export() {\n    this.dt.exportCSV();\n  }\n\n  componentDidMount() {\n    this.getDropDownValues('COUNTRY', 'countryList');\n    this.getDropDownValues('POLICYSTATUS', 'policyStatusList');\n    this.getDropDownValues('POLICYTYPE', 'policyTypeArray');\n    this.getLanguage();\n    this.getCurrency();\n    this.getVesselClass();\n    this.getPolicyList(0);\n    this.getPolicyClientName();\n    this.getAllEmailList();\n    this.getAllcontactList();\n    this.getAllpolicyNumber();\n    this.getAllBinder();\n  }\n\n  componentWillUpdate(nextProps) {\n    if (nextProps.match.isExact !== this.props.match.isExact) {\n      setTimeout(() => {\n        this.getPolicyList(0);\n      }, 100);\n    }\n  }\n\n  getPolicyClientName() {\n    try {\n      api.post(APIConstant.path.getPolicyClientName).then(res => {\n        if (res.success) {\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.data.length; i++) {\n            formattedData.push({\n              value: res.data.data[i].EntityId,\n              label: res.data.data[i].FullName\n            });\n          }\n\n          this.setState({\n            clientArray: formattedData\n          });\n        } else {}\n      }).catch(err => {\n        console.log('error', err);\n      });\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n\n  getAllEmailList() {\n    try {\n      api.post(APIConstant.path.getAllEmailList).then(res => {\n        if (res.success) {\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.data.length; i++) {\n            formattedData.push({\n              value: res.data.data[i].Email,\n              label: res.data.data[i].Email\n            });\n          }\n\n          console.log('formattedData', formattedData);\n          this.setState({\n            emailArray: formattedData\n          });\n        } else {}\n      }).catch(err => {\n        console.log('error', err);\n      });\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n\n  getAllcontactList() {\n    try {\n      api.post(APIConstant.path.getAllcontactList).then(res => {\n        if (res.success) {\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.data.length; i++) {\n            formattedData.push({\n              value: res.data.data[i].PhoneNumber,\n              label: res.data.data[i].PhoneNumber\n            });\n          }\n\n          console.log('formattedData', formattedData);\n          this.setState({\n            phoneArray: formattedData\n          });\n        } else {}\n      }).catch(err => {\n        console.log('error', err);\n      });\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n\n  getAllpolicyNumber() {\n    try {\n      api.post(APIConstant.path.getAllpolicyNumber).then(res => {\n        if (res.success) {\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.data.length; i++) {\n            formattedData.push({\n              value: res.data.data[i].PolicyNumber,\n              label: res.data.data[i].PolicyNumber\n            });\n          }\n\n          console.log('formattedData', formattedData);\n          this.setState({\n            policyNumberArray: formattedData\n          });\n        } else {}\n      }).catch(err => {\n        console.log('error', err);\n      });\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n\n  getAllBinder() {\n    try {\n      let data = {};\n      api.post(APIConstant.path.getAllBinder, data).then(res => {\n        if (res.success) {\n          console.log('res.datares.data', res.data.res);\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.res.length; i++) {\n            formattedData.push({\n              value: res.data.res[i].BinderId,\n              label: res.data.res[i].UMRN\n            });\n          }\n\n          this.setState({\n            binderArray: formattedData\n          });\n        } else {\n          console.log('getBinderData_error');\n        }\n      }).catch(err => {\n        console.log('getBinderData_error', err);\n      });\n    } catch (error) {\n      console.log('getBinderData_error', error);\n    }\n  }\n\n  getSubBinderByBinderId(id) {\n    debugger;\n\n    try {\n      let data = {\n        BinderId: id\n      };\n      api.post(APIConstant.path.getSubBinderByBinderId, data).then(res => {\n        if (res.success) {\n          console.log('res.datares.data', res.data.res);\n          let formattedData = [];\n          let i;\n\n          for (i = 0; i < res.data.res.length; i++) {\n            formattedData.push({\n              value: res.data.res[i].SubBinderId,\n              label: res.data.res[i].Title\n            });\n          }\n\n          this.setState({\n            subBinderArray: formattedData\n          });\n        } else {\n          console.log('getBinderData_error');\n        }\n      }).catch(err => {\n        console.log('getBinderData_error', err);\n      });\n    } catch (error) {\n      console.log('getBinderData_error', error);\n    }\n  }\n\n  getLanguage() {\n    try {\n      api.get(APIConstant.path.getLanguage).then(res => {\n        if (res.success) {\n          this.setState({\n            languageArray: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  getCurrency() {\n    try {\n      api.get(APIConstant.path.getCurrency).then(res => {\n        if (res.success) {\n          this.setState({\n            currencyArray: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  getVesselClass() {\n    try {\n      api.get(APIConstant.path.getVesselClass).then(res => {\n        if (res.success) {\n          let formattedArray = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            formattedArray.push({\n              label: res.data[i].VesselClassName,\n              value: res.data[i].VesselClassId\n            });\n          }\n\n          this.setState({\n            vesselClassArray: formattedArray,\n            vesselClassCopy: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  getVesselType(id) {\n    try {\n      const data = {\n        VesselClassId: id\n      };\n      api.post(APIConstant.path.getVesselType, data).then(res => {\n        if (res.success) {\n          console.log('-o-p-o-o-p-o-p-p-o', res.data);\n          var formattedData = [];\n\n          for (var i = 0; i < res.data.length; i++) {\n            formattedData.push({\n              label: res.data[i].VesselTypeName,\n              value: res.data[i].VesselTypeId\n            });\n          }\n\n          this.setState({\n            vesselTypeArray: formattedData\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {}\n  }\n\n  getPolicyList(IsAdvance) {\n    try {\n      let data = {};\n      var splitData = this.props.location.pathname.split(\"/\");\n\n      if (splitData[2] !== undefined && splitData[3] !== undefined) {\n        data = {\n          entityId: splitData[2] || '',\n          entityType: splitData[3] || '',\n          isAdvance: 0\n        };\n      } else {\n        data = {\n          isAdvance: IsAdvance\n        };\n      }\n\n      console.log('0o-0o-o-kl0k-0k-0k-0k-0k-0k-0kj', data);\n      api.post('api/getPolicyList', data).then(res => {\n        if (res.success) {\n          var formattedData = [];\n\n          for (var i = 0; i < res.data.length; i++) {\n            // console.log(\"getPolicyList > \", res.data[i]);\n            formattedData.push({\n              SrNo: i + 1,\n              Name: res.data[i].Name,\n              CountryCode: res.data[i].CountryCode,\n              PhoneNumber: res.data[i].PhoneNumber,\n              Email: res.data[i].Email,\n              PolicyId: res.data[i].PolicyId,\n              PolicyType: res.data[i].PolicyType,\n              PolicyNumber: res.data[i].PolicyNumber,\n              Status: res.data[i].Status,\n              Department: res.data[i].Department,\n              InsuranceCompanyName: res.data[i].InsuranceCompanyName,\n              Vessel: res.data[i].VesselName,\n              Value: res.data[i].SumInsured,\n              VesselClassName: res.data[i].VesselClassName,\n              VesselTypeName: res.data[i].VesselTypeName,\n              SumInsured: res.data[i].SumInsured,\n              CurrentPremium: res.data[i].CurrentPremium,\n              InceptionDate: moment(res.data[i].InceptionDate).format(CommonConfig.dateFormat.forDatePicker),\n              RenewalDate: CommonConfig.isEmpty(res.data[i].RenewalDate) ? '' : moment(res.data[i].RenewalDate).format(CommonConfig.dateFormat.forDatePicker),\n              Premium: \"\",\n              Created: moment(res.data[i].InceptionDate).format(CommonConfig.dateFormat.dateOnly),\n              Renewal: moment(res.data[i].RenewalDate).format(CommonConfig.dateFormat.dateOnly),\n              Updated: moment(res.data[i].UpdatedOn).format(CommonConfig.dateFormat.dateOnly),\n              LastUpdatedBy: \"\",\n              CreatedBy: res.data[i].CreatedBy,\n              LastUpdated: \"\",\n              Currency: res.data[i].Currency,\n              Client: res.data[i].EntityType === 'person' ? res.data[i].Forename + '' + res.data[i].SurName : \"\",\n              Country: res.data[i].Country,\n              ClientDetails: res.data[i].Name + \"\" + CommonConfig.formatPhoneNumber(res.data[i].CountryCode + res.data[i].PhoneNumber) + \"\" + res.data[i].Email,\n              PolicyData: res.data[i].PolicyType + \"\" + res.data[i].PolicyNumber,\n              VesselDetails: res.data[i].VesselClassName + \"\" + res.data[i].VesselTypeName\n            });\n          }\n\n          let firstPage = formattedData.length ? '1' : '0';\n          let lastPage = this.state.rowsPerPage < formattedData.length ? this.state.rowsPerPage : formattedData.length;\n          let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n          this.setState({\n            arr: formattedData,\n            str: str\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (err) {}\n  }\n\n  filterSingle(e) {\n    let results = this.state.contactArray.filter(contact => {\n      return contact.label.toLowerCase().startsWith(e.query.toLowerCase());\n    });\n    this.setState({\n      filteredcontactsSingle: results\n    });\n  }\n\n  getDropDownValues(stringMapType, setStateName) {\n    try {\n      const data = {\n        stringmaptype: stringMapType,\n        orderby: 'sortorder'\n      };\n      api.post(APIConstant.path.dropdownbycode, data).then(res => {\n        if (res.success) {\n          this.setState({\n            [setStateName]: res.data\n          });\n        } else {}\n      }).catch(err => {});\n    } catch (error) {\n      console.log(\"error...\", error);\n    }\n  }\n\n  gotoNextPage() {\n    this.props.history.push('/newPolicy1');\n  }\n\n  selectType(value, type) {\n    if (type === 'vesselclass') {\n      if (value === '' || value === null) {// this.setState({ VesselClassError: true, vesselClass: value.value });\n        // this.show('vesselclass', true);\n      } else {\n        this.setState({\n          VesselClassError: false,\n          vesselClass: value\n        }); // this.show('vesselclass', false);\n\n        this.getVesselType(value.value);\n      }\n    }\n\n    if (type === 'client') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          client: value\n        });\n      } else {\n        this.setState({\n          client: value.value\n        });\n      }\n    }\n\n    if (type === 'binder') {\n      if (value === '' || value === undefined || value === null) {\n        this.setState({\n          binder: value\n        });\n      } else {\n        this.getSubBinderByBinderId(value);\n        this.setState({\n          binder: value.value\n        });\n      }\n    }\n  }\n\n  filterData() {\n    let date = {};\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    var header = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.cols,\n      options: this.colOptions,\n      fixedPlaceholder: true,\n      placeholder: CommonConfig.dataTableConfig.columnToggleIcon,\n      tooltip: \"Show / Hide Column\",\n      onChange: this.onColumnToggle,\n      style: {\n        width: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"pi pi-search\",\n      style: {\n        margin: '4px 4px 0 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(InputText, {\n      type: \"search\",\n      onInput: e => this.setState({\n        globalFilter: e.target.value\n      }),\n      placeholder: \"Global Search\",\n      size: \"30\",\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-external-link\",\n      iconPos: \"left\",\n      tooltip: \"Export as CSV\",\n      tooltipOptions: {\n        position: 'left'\n      },\n      onClick: this.export,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 25\n      }\n    })))));\n    let columns = this.state.cols.map((col, i) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        key: i,\n        field: col.field,\n        header: col.header,\n        body: col.body,\n        sortable: col.sortable,\n        filter: col.filter,\n        filterMatchMode: col.filterMatchMode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"basic-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 21\n      }\n    }, t(\"policyList:PolicyList\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header-right-option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MultiSelect, {\n      value: this.state.cols,\n      options: this.colOptions,\n      fixedPlaceholder: true,\n      placeholder: CommonConfig.dataTableConfig.columnToggleIcon,\n      tooltip: \"Show / Hide Column\",\n      onChange: this.onColumnToggle,\n      style: {\n        width: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-plus\",\n      tooltip: \"New Policy Setup\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: () => this.redirectToNewPolicy(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"button\",\n      icon: \"pi pi-external-link\",\n      tooltip: \"Export as CSV\",\n      tooltipOptions: {\n        position: 'bottom'\n      },\n      onClick: this.export,\n      style: {\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.arr,\n      first: this.state.selectedPage,\n      onPage: e => this.getPageString(e),\n      paginator: true,\n      rows: this.state.rowsPerPage,\n      totalRecords: this.state.arr.length,\n      exportFilename: \"Policy List\",\n      currentPageReportTemplate: this.state.str,\n      scrollable: true,\n      scrollHeight: \"340px\",\n      paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n      rowsPerPageOptions: this.state.rowsPerPageOptions,\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      responsive: true,\n      resizableColumns: true,\n      columnResizeMode: \"fit\" //stateKey=\"contactList\" stateStorage=\"local\" header={header} \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 21\n      }\n    }, columns)));\n  }\n\n}\n\nexport default withTranslation()(PolicyDetails);","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Policy/PolicyList.js"],"names":["React","Component","Collapse","Button","BTN","Card","CardHeader","CardBody","Col","Row","Input","api","withTranslation","DataTable","Column","MultiSelect","InputText","toast","CommonConfig","DatePicker","moment","APIConstant","Select","PolicyDetails","constructor","props","getPageString","e","firstPage","first","l","rows","page","lastPage","state","arr","length","str","setState","selectedPage","rowsPerPage","toggleLargeAdd","toggleModalAdd","toggleCustom","tab","prevState","custom","map","x","index","redirectToNewPolicy","splitData","location","pathname","split","undefined","history","push","id","columns","body","actionTemplate","bind","header","sortable","filter","formatPolicyDetail","field","filterMatchMode","formatContactDetail","formatVesselData","formatPremiun","formatDate","contactShown","cols","clientArray","client","phoneArray","phone","emailArray","email","policyNumberArray","policyNumber","binderArray","binder","subBinderArray","subBinder","policyStartFromDate","policyStartToDate","policyRenewalFromDate","policyRenewalToDate","agentserviceCenter","sumInsuredfrom","sumInsuredTo","filteredcontactsSingle","contactArray","rowsPerPageOptions","dataTableConfig","isExpand","countryList","country","languageArray","currencyArray","policyStatusList","policyStatus","policyTypeArray","policyType","vesselClassArray","vesselClassCopy","vesselClass","vesselType","vesselTypeArray","colOptions","col","label","value","onColumnToggle","export","event","valueInOrder","sort","y","edit","rowData","PolicyId","PolicyType","PolicyNumber","Name","formatPhoneNumber","CountryCode","PhoneNumber","Email","VesselClassName","VesselTypeName","SumInsured","CurrentPremium","InceptionDate","RenewalDate","column","marginRight","position","dt","exportCSV","componentDidMount","getDropDownValues","getLanguage","getCurrency","getVesselClass","getPolicyList","getPolicyClientName","getAllEmailList","getAllcontactList","getAllpolicyNumber","getAllBinder","componentWillUpdate","nextProps","match","isExact","setTimeout","post","path","then","res","success","formattedData","i","data","EntityId","FullName","catch","err","console","log","error","BinderId","UMRN","getSubBinderByBinderId","SubBinderId","Title","get","formattedArray","VesselClassId","getVesselType","VesselTypeId","IsAdvance","entityId","entityType","isAdvance","SrNo","Status","Department","InsuranceCompanyName","Vessel","VesselName","Value","format","dateFormat","forDatePicker","isEmpty","Premium","Created","dateOnly","Renewal","Updated","UpdatedOn","LastUpdatedBy","CreatedBy","LastUpdated","Currency","Client","EntityType","Forename","SurName","Country","ClientDetails","PolicyData","VesselDetails","filterSingle","results","contact","toLowerCase","startsWith","query","stringMapType","setStateName","stringmaptype","orderby","dropdownbycode","gotoNextPage","selectType","type","VesselClassError","filterData","date","render","t","columnToggleIcon","width","textAlign","margin","globalFilter","target","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Button as BTN, Card, CardHeader, CardBody, Col, Row, Input } from 'reactstrap';\nimport { Button } from 'primereact/button';\nimport api from '../../utils/apiClient';\nimport { withTranslation } from 'react-i18next';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { MultiSelect } from 'primereact/multiselect';\nimport { InputText } from 'primereact/inputtext';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CommonConfig } from '../../utils/constants';\nimport DatePicker from 'react-date-picker';\nimport moment from 'moment';\nimport APIConstant from '../../utils/constants';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\n\nclass PolicyDetails extends Component {\n    constructor(props) {\n        super(props);\n        let columns = [\n            // { field: \"SrNo\", header: \"Sr No.\", sortable: true, filter: true, id: 0 },\n            // { field: \"Type\", header: \"Type.\", sortable: true, filter: true, id: 1 },\n            // { field: \"PolicyNo\", header: \"Policy No.\", sortable: true, filter: true, id: 2 },\n            // { field: \"BoatType\", header: \"Outstanding Amount\", sortable: true, filter: true, id: 3 },\n            // { field: \"Status\", header: \"Status\", sortable: true, filter: true, id: 4 },\n            // { field: \"Department\", header: \"Department\", sortable: true, filter: true, id: 4 },\n            // { field: \"Vessel\", header: \"Vessel\", sortable: true, filter: true, id: 5 },\n            // { field: \"Value\", header: \"Value.\", sortable: true, filter: true, id: 6 },\n            // { field: \"Premiun\", header: \"Premiun\", sortable: true, filter: true, id: 7 },\n            // { field: \"Created\", header: \"Created\", sortable: true, filter: true, id: 8 },\n            // { field: \"Renewal\", header: \"Renewal\", sortable: true, filter: true, id: 9 },\n            // { field: \"Updated\", header: \"Updated\", sortable: true, filter: true, id: 10 },\n            // { field: \"LastUpdatedBy\", header: \"Last Updated By\", sortable: true, filter: true, id: 11 },\n            // { field: \"CreatedBy\", header: \"Created by\", sortable: true, filter: true, id: 12 },\n            // { field: \"Currency\", header: \"Currency\", sortable: true, filter: true, id: 13 },\n            // { field: \"Client\", header: \"Client\", sortable: true, filter: true, id: 14 },\n            // { field: \"Country\", header: \"Country\", sortable: true, filter: true, id: 15 },\n            { body: this.actionTemplate.bind(this), header: \"Action\", sortable: false, filter: false, id: 0 },\n            { body: this.formatPolicyDetail.bind(this), field: \"PolicyData\", header: \"Policy No/Type\", sortable: true, filter: true, filterMatchMode: 'contains', id: 1 },\n            { body: this.formatContactDetail.bind(this), field: \"ClientDetails\", header: \"Client/Contacts\", sortable: true, filter: true, filterMatchMode: 'contains', id: 2 },\n            { body: this.formatVesselData.bind(this), field: \"VesselDetails\", header: \"Vessel Class/Type\", sortable: true, filter: true, filterMatchMode: 'contains', id: 3 },\n            { field: \"InsuranceCompanyName\", header: \"Insurer\", sortable: true, filter: true, filterMatchMode: 'contains', id: 4 },\n            { body: this.formatPremiun.bind(this), header: \"Sum Insured/Premium\", sortable: true, filter: true, filterMatchMode: 'contains', id: 5 },\n            { body: this.formatDate.bind(this), field: \"InceptionDate\", header: \"Inception/Renewal\", sortable: true, filter: true, filterMatchMode: 'contains', id: 6 },\n            { field: \"Department\", header: \"Department\", sortable: true, filter: true, filterMatchMode: 'contains', id: 7 },\n            { field: \"Status\", header: \"Status\", sortable: true, filter: true, filterMatchMode: 'contains', id: 8 },\n        ];\n\n        this.state = {\n            toggleModalAdd: false,\n            contactShown: '',\n            cols: columns,\n            clientArray: [],\n            client: '',\n            phoneArray: [],\n            phone: '',\n            str: '',\n            emailArray: [],\n            email: '',\n            policyNumberArray: [],\n            policyNumber: '',\n            binderArray: [],\n            binder: '',\n            subBinderArray: [],\n            subBinder: '',\n            policyStartFromDate: '',\n            policyStartToDate: '',\n            policyRenewalFromDate: '',\n            policyRenewalToDate: '',\n            agentserviceCenter: '',\n            sumInsuredfrom: '',\n            sumInsuredTo: '',\n            arr: [],\n            selectedPage: 0,\n            filteredcontactsSingle: null,\n            contactArray: [],\n            rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            custom: false,\n            isExpand: false,\n            countryList: [],\n            country: '',\n            languageArray: [],\n            currencyArray: [],\n            policyStatusList: [],\n            policyStatus: '',\n            policyTypeArray: [],\n            policyType: '',\n            vesselClassArray: [],\n            vesselClassCopy: [],\n            vesselClass: '',\n            vesselType: '',\n            vesselTypeArray: []\n        };\n\n        this.colOptions = [];\n        for (let col of columns) {\n            this.colOptions.push({ label: col.header, value: col });\n        }\n        this.onColumnToggle = this.onColumnToggle.bind(this);\n        this.actionTemplate = this.actionTemplate.bind(this);\n        this.export = this.export.bind(this);\n    }\n\n    onColumnToggle(event) {\n        let valueInOrder = event.value.sort((x, y) => { return x.id - y.id });\n        this.setState({ cols: valueInOrder });\n    }\n\n    edit(rowData) {\n        this.props.history.push({\n            pathname: '/PolicyDetailsMerged/' + rowData.PolicyId + '/1/1',\n            state: {\n                PolicyId: rowData.PolicyId,\n                tab: 1\n            }\n        });\n    }\n\n    formatPolicyDetail(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.PolicyType}</p>\n                <p>{rowData.PolicyNumber}</p>\n            </div>\n        )\n    }\n\n    formatContactDetail(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.Name}</p>\n                <p>{CommonConfig.formatPhoneNumber(rowData.CountryCode + rowData.PhoneNumber)}</p>\n                <p>{rowData.Email}</p>\n            </div>\n        )\n    }\n\n    formatVesselData(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.VesselClassName}</p>\n                <p>{rowData.VesselTypeName}</p>\n            </div>\n        )\n    }\n\n    formatPremiun(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.SumInsured}</p>\n                <p>{rowData.CurrentPremium}</p>\n            </div>\n        )\n    }\n\n    formatDate(rowData) {\n        return (\n            <div className=\"policy-list-data\">\n                <p>{rowData.InceptionDate}</p>\n                <p>{rowData.RenewalDate}</p>\n            </div>\n        )\n    }\n\n    actionTemplate(rowData, column) {\n        return <div className=\"policy-list-data\">\n            <Button type=\"button\" icon=\"pi pi-eye\" className=\"p-button-warning\" onClick={() => this.edit(rowData)}\n                style={{ marginRight: '.5em' }} tooltip=\"View\" tooltipOptions={{ position: 'bottom' }}>\n            </Button>\n            {/* <Button type=\"button\" icon=\"pi pi-trash\" className=\"p-button-danger\" tooltip=\"Delete\" tooltipOptions={{ position: 'bottom' }}></Button> */}\n        </div>;\n    }\n\n    export() {\n        this.dt.exportCSV();\n    }\n\n    componentDidMount() {\n        this.getDropDownValues('COUNTRY', 'countryList');\n        this.getDropDownValues('POLICYSTATUS', 'policyStatusList');\n        this.getDropDownValues('POLICYTYPE', 'policyTypeArray');\n        this.getLanguage();\n        this.getCurrency();\n        this.getVesselClass();\n        this.getPolicyList(0);\n        this.getPolicyClientName();\n        this.getAllEmailList();\n        this.getAllcontactList();\n        this.getAllpolicyNumber();\n        this.getAllBinder();\n    }\n\n    componentWillUpdate(nextProps) {\n        if (nextProps.match.isExact !== this.props.match.isExact) {\n            setTimeout(() => {\n                this.getPolicyList(0);\n            }, 100);\n        }\n    }\n\n    getPolicyClientName() {\n        try {\n            api.post(APIConstant.path.getPolicyClientName).then(res => {\n                if (res.success) {\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.data.length; i++) {\n                        formattedData.push({\n                            value: res.data.data[i].EntityId,\n                            label: res.data.data[i].FullName,\n                        });\n                    }\n                    this.setState({ clientArray: formattedData });\n                } else {\n                }\n            }).catch(err => {\n                console.log('error', err);\n\n            });\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n    getAllEmailList() {\n        try {\n            api.post(APIConstant.path.getAllEmailList).then(res => {\n                if (res.success) {\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.data.length; i++) {\n                        formattedData.push({\n                            value: res.data.data[i].Email,\n                            label: res.data.data[i].Email,\n                        });\n                    }\n                    console.log('formattedData', formattedData);\n                    this.setState({ emailArray: formattedData });\n                } else {\n                }\n            }).catch(err => {\n                console.log('error', err);\n\n            });\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n    getAllcontactList() {\n        try {\n            api.post(APIConstant.path.getAllcontactList).then(res => {\n                if (res.success) {\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.data.length; i++) {\n                        formattedData.push({\n                            value: res.data.data[i].PhoneNumber,\n                            label: res.data.data[i].PhoneNumber,\n                        });\n                    }\n                    console.log('formattedData', formattedData);\n                    this.setState({ phoneArray: formattedData });\n                } else {\n                }\n            }).catch(err => {\n                console.log('error', err);\n\n            });\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n    getAllpolicyNumber() {\n        try {\n            api.post(APIConstant.path.getAllpolicyNumber).then(res => {\n                if (res.success) {\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.data.length; i++) {\n                        formattedData.push({\n                            value: res.data.data[i].PolicyNumber,\n                            label: res.data.data[i].PolicyNumber,\n                        });\n                    }\n                    console.log('formattedData', formattedData);\n                    this.setState({ policyNumberArray: formattedData });\n                } else {\n                }\n            }).catch(err => {\n                console.log('error', err);\n\n            });\n        } catch (error) {\n            console.log('error', error);\n        }\n    }\n\n    getAllBinder() {\n        try {\n            let data = {};\n            api.post(APIConstant.path.getAllBinder, data).then(res => {\n                if (res.success) {\n                    console.log('res.datares.data', res.data.res);\n\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.res.length; i++) {\n                        formattedData.push({\n                            value: res.data.res[i].BinderId,\n                            label: res.data.res[i].UMRN,\n                        });\n                    }\n\n                    this.setState({ binderArray: formattedData });\n                } else {\n                    console.log('getBinderData_error');\n                }\n            }).catch(err => {\n                console.log('getBinderData_error', err);\n            });\n        } catch (error) {\n            console.log('getBinderData_error', error);\n        }\n    }\n\n    getSubBinderByBinderId(id) {\n        debugger\n        try {\n            let data = {\n                BinderId: id\n            };\n            api.post(APIConstant.path.getSubBinderByBinderId, data).then(res => {\n                if (res.success) {\n                    console.log('res.datares.data', res.data.res);\n\n                    let formattedData = [];\n                    let i;\n                    for (i = 0; i < res.data.res.length; i++) {\n                        formattedData.push({\n                            value: res.data.res[i].SubBinderId,\n                            label: res.data.res[i].Title,\n                        });\n                    }\n\n                    this.setState({ subBinderArray: formattedData });\n                } else {\n                    console.log('getBinderData_error');\n                }\n            }).catch(err => {\n                console.log('getBinderData_error', err);\n            });\n        } catch (error) {\n            console.log('getBinderData_error', error);\n        }\n    }\n\n    getLanguage() {\n        try {\n            api.get(APIConstant.path.getLanguage).then(res => {\n                if (res.success) {\n                    this.setState({ languageArray: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n    }\n\n    getCurrency() {\n        try {\n            api.get(APIConstant.path.getCurrency).then(res => {\n                if (res.success) {\n                    this.setState({ currencyArray: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n    }\n\n    getVesselClass() {\n        try {\n            api.get(APIConstant.path.getVesselClass).then(res => {\n                if (res.success) {\n                    let formattedArray = [];\n                    for (let i = 0; i < res.data.length; i++) {\n                        formattedArray.push({\n                            label: res.data[i].VesselClassName,\n                            value: res.data[i].VesselClassId\n                        });\n                    }\n                    this.setState({ vesselClassArray: formattedArray, vesselClassCopy: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n\n    }\n\n    getVesselType(id) {\n        try {\n            const data = {\n                VesselClassId: id\n            };\n            api.post(APIConstant.path.getVesselType, data).then(res => {\n                if (res.success) {\n                    console.log('-o-p-o-o-p-o-p-p-o', res.data);\n\n                    var formattedData = [];\n                    for (var i = 0; i < res.data.length; i++) {\n                        formattedData.push({\n                            label: res.data[i].VesselTypeName,\n                            value: res.data[i].VesselTypeId,\n                        });\n                    }\n                    this.setState({ vesselTypeArray: formattedData });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n        }\n\n    }\n\n    getPolicyList(IsAdvance) {\n        try {\n            let data = {};\n            var splitData = this.props.location.pathname.split(\"/\");\n            if (splitData[2] !== undefined && splitData[3] !== undefined) {\n                data = {\n                    entityId: splitData[2] || '',\n                    entityType: splitData[3] || '',\n                    isAdvance: 0,\n                };\n            } else {\n                data = {\n                    isAdvance: IsAdvance\n                }\n            }\n            console.log('0o-0o-o-kl0k-0k-0k-0k-0k-0k-0kj', data);\n\n            api.post('api/getPolicyList', data).then(res => {\n                if (res.success) {\n                    var formattedData = [];\n                    for (var i = 0; i < res.data.length; i++) {\n                        // console.log(\"getPolicyList > \", res.data[i]);\n                        formattedData.push({\n                            SrNo: i + 1,\n                            Name: res.data[i].Name,\n                            CountryCode: res.data[i].CountryCode,\n                            PhoneNumber: res.data[i].PhoneNumber,\n                            Email: res.data[i].Email,\n                            PolicyId: res.data[i].PolicyId,\n                            PolicyType: res.data[i].PolicyType,\n                            PolicyNumber: res.data[i].PolicyNumber,\n                            Status: res.data[i].Status,\n                            Department: res.data[i].Department,\n                            InsuranceCompanyName: res.data[i].InsuranceCompanyName,\n                            Vessel: res.data[i].VesselName,\n                            Value: res.data[i].SumInsured,\n                            VesselClassName: res.data[i].VesselClassName,\n                            VesselTypeName: res.data[i].VesselTypeName,\n                            SumInsured: res.data[i].SumInsured,\n                            CurrentPremium: res.data[i].CurrentPremium,\n                            InceptionDate: moment(res.data[i].InceptionDate).format(CommonConfig.dateFormat.forDatePicker),\n                            RenewalDate: CommonConfig.isEmpty(res.data[i].RenewalDate) ? '' : moment(res.data[i].RenewalDate).format(CommonConfig.dateFormat.forDatePicker),\n                            Premium: \"\",\n                            Created: moment(res.data[i].InceptionDate).format(CommonConfig.dateFormat.dateOnly),\n                            Renewal: moment(res.data[i].RenewalDate).format(CommonConfig.dateFormat.dateOnly),\n                            Updated: moment(res.data[i].UpdatedOn).format(CommonConfig.dateFormat.dateOnly),\n                            LastUpdatedBy: \"\",\n                            CreatedBy: res.data[i].CreatedBy,\n                            LastUpdated: \"\",\n                            Currency: res.data[i].Currency,\n                            Client: res.data[i].EntityType === 'person' ? res.data[i].Forename + '' + res.data[i].SurName : \"\",\n                            Country: res.data[i].Country,\n                            ClientDetails: res.data[i].Name + \"\" + CommonConfig.formatPhoneNumber(res.data[i].CountryCode + res.data[i].PhoneNumber) + \"\" + res.data[i].Email,\n                            PolicyData: res.data[i].PolicyType + \"\" + res.data[i].PolicyNumber,\n                            VesselDetails: res.data[i].VesselClassName + \"\" + res.data[i].VesselTypeName,\n                        });\n                    }\n\n                    let firstPage = (formattedData.length) ? '1' : '0';\n                    let lastPage = (this.state.rowsPerPage < formattedData.length) ? this.state.rowsPerPage : formattedData.length;\n                    let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';\n                    this.setState({ arr: formattedData, str: str });\n                } else {\n                }\n            }).catch(err => {\n\n            });\n        } catch (err) {\n\n        }\n    }\n\n    filterSingle(e) {\n        let results = this.state.contactArray.filter((contact) => {\n            return contact.label.toLowerCase().startsWith(e.query.toLowerCase());\n        });\n        this.setState({ filteredcontactsSingle: results });\n\n    }\n\n    getPageString = (e) => {\n        let firstPage = e.first + 1;\n        let l = e.rows * (e.page + 1);\n        let lastPage = (l < this.state.arr.length) ? l : this.state.arr.length\n        var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arr.length + ' records';\n        this.setState({ selectedPage: e.first, str: str, rowsPerPage: e.rows });\n    }\n\n    getDropDownValues(stringMapType, setStateName) {\n        try {\n            const data = {\n                stringmaptype: stringMapType,\n                orderby: 'sortorder'\n            };\n            api.post(APIConstant.path.dropdownbycode, data).then(res => {\n                if (res.success) {\n                    this.setState({ [setStateName]: res.data });\n                } else {\n                }\n            }).catch(err => {\n            });\n        } catch (error) {\n            console.log(\"error...\", error);\n        }\n    }\n\n    toggleLargeAdd = () => {\n        this.setState({ toggleModalAdd: false });\n    }\n\n    gotoNextPage() {\n        this.props.history.push('/newPolicy1');\n    }\n\n    toggleCustom = (tab) => {\n        const prevState = this.state.custom;\n        const state = prevState.map((x, index) => tab === index ? !x : false);\n        this.setState({ custom: state });\n    }\n\n    selectType(value, type) {\n        if (type === 'vesselclass') {\n\n            if (value === '' || value === null) {\n                // this.setState({ VesselClassError: true, vesselClass: value.value });\n                // this.show('vesselclass', true);\n            } else {\n                this.setState({ VesselClassError: false, vesselClass: value });\n                // this.show('vesselclass', false);\n                this.getVesselType(value.value);\n            }\n        }\n        if (type === 'client') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ client: value });\n            } else {\n                this.setState({ client: value.value });\n            }\n        }\n        if (type === 'binder') {\n            if (value === '' || value === undefined || value === null) {\n                this.setState({ binder: value });\n            } else {\n                this.getSubBinderByBinderId(value);\n                this.setState({ binder: value.value });\n            }\n        }\n    }\n\n    filterData() {\n        let date = {\n\n        }\n    }\n\n    redirectToNewPolicy = () => {\n        var splitData = this.props.location.pathname.split(\"/\");\n        if (splitData[2] !== undefined && splitData[3] !== undefined) {\n            this.props.history.push({\n                pathname: '/CreatePolicy/' + splitData[2],\n                state: {\n                    id: splitData[2]\n                }\n            });\n        } else {\n            this.props.history.push({\n                pathname: '/NewPolicy/',\n                state: {}\n            });\n        }\n    }\n\n    render() {\n        const { t } = this.props;\n        var header = <div>\n            <Row>\n                <Col md=\"1\">\n                    <MultiSelect value={this.state.cols} options={this.colOptions}\n                        fixedPlaceholder={true} placeholder={CommonConfig.dataTableConfig.columnToggleIcon} tooltip=\"Show / Hide Column\"\n                        onChange={this.onColumnToggle} style={{ width: '50px' }} />\n                </Col>\n                <Col md=\"11\">\n                    <div style={{ textAlign: 'right' }}>\n                        <i className=\"pi pi-search\" style={{ margin: '4px 4px 0 0' }}></i>\n                        <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" size=\"30\" style={{ marginRight: 10 }} />\n\n                        <Button type=\"button\" icon=\"pi pi-external-link\" iconPos=\"left\" tooltip=\"Export as CSV\" tooltipOptions={{ position: 'left' }} onClick={this.export} style={{ marginRight: 10 }}></Button>\n                    </div>\n                </Col>\n            </Row>\n        </div>;\n\n        let columns = this.state.cols.map((col, i) => {\n            return <Column key={i} field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode={col.filterMatchMode} />;\n        });\n\n        return (\n            <div>\n                <div className=\"basic-header\">\n                    <h1>{t(\"policyList:PolicyList\")}</h1>\n\n                    <div className=\"header-right-option\">\n                        <MultiSelect value={this.state.cols} options={this.colOptions}\n                            fixedPlaceholder={true} placeholder={CommonConfig.dataTableConfig.columnToggleIcon} tooltip=\"Show / Hide Column\"\n                            onChange={this.onColumnToggle} style={{ width: '50px' }}\n                        />\n\n                        <Button type=\"button\" icon=\"pi pi-plus\" tooltip=\"New Policy Setup\" tooltipOptions={{ position: 'bottom' }} onClick={() => this.redirectToNewPolicy()}></Button>\n                        <Button type=\"button\" icon=\"pi pi-external-link\" tooltip=\"Export as CSV\" tooltipOptions={{ position: 'bottom' }} onClick={this.export} style={{ marginRight: 10 }}></Button>\n                    </div>\n                </div>\n                {/* <div className=\"input-box\" id=\"accordion\">\n                    <Card className=\"mb-0\">\n                        <CardHeader id=\"headingOne\">\n                            <BTN block color=\"link\" className=\"text-left m-0 p-0\" onClick={() => this.setState({ custom: !this.state.custom })} aria-expanded={this.state.custom} aria-controls=\"collapseOne\">\n                                <h5 className=\"m-0 p-0\">\n                                    {t(\"policyList:SearchPolicy\")}\n                                    <i style={{ float: 'right' }} className={this.state.custom ? \"fa fa-chevron-down\" : \"fa fa-chevron-up\"}></i>\n                                </h5>\n                            </BTN>\n                        </CardHeader>\n                        <Collapse isOpen={this.state.custom} data-parent=\"#accordion\" id=\"collapseOne\" aria-labelledby=\"headingOne\">\n                            <CardBody>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Client.label\")}</label>\n                                            <Select name=\"client\" id=\"client\" options={this.state.clientArray} value={this.state.client} onChange={(data) => this.selectType(data, 'client')} placeholder=\"Select\" />\n                                            <em id=\"cruisingRangeError\" className=\"error invalid-feedback\"></em>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Phone.label\")}</label>\n                                            <Select name=\"phone\" id=\"phone\" options={this.state.phoneArray} value={this.state.phone} onChange={(data) => this.selectType(data, 'phone')} placeholder=\"Select\" />\n                                            <em id=\"cruisingRangeError\" className=\"error invalid-feedback\"></em>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Email.label\")}</label>\n                                            <Select name=\"email\" id=\"email\" options={this.state.emailArray} value={this.state.email} onChange={(data) => this.selectType(data, 'email')} placeholder=\"Select\" />\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:PolicyNumber.label\")}</label>\n                                            <Select name=\"policyNumber\" id=\"policyNumber\" options={this.state.policyNumberArray} value={this.state.policyNumber} onChange={(data) => this.selectType(data, 'policyNumber')} placeholder=\"Select\" />\n                                            <em id=\"cruisingRangeError\" className=\"error invalid-feedback\"></em>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Binder.label\")}</label>\n                                            <Select name=\"binder\" id=\"binder\" options={this.state.binderArray} value={this.state.binder} onChange={(data) => this.selectType(data, 'binder')} placeholder=\"Select\" />\n                                            <em id=\"cruisingRangeError\" className=\"error invalid-feedback\"></em>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:SubBinder.label\")}</label>\n                                            <Select name=\"subBinder\" id=\"subBinder\" options={this.state.subBinderArray} value={this.state.subBinder} onChange={(data) => this.selectType(data, 'subBinder')} placeholder=\"Select\" />\n                                            <em id=\"cruisingRangeError\" className=\"error invalid-feedback\"></em>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"5\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:PolicyStartDateFrom.label\")}</label>\n\n                                            <DatePicker name=\"dob\" value={this.state.dob} maxDate={moment().toDate()} minDate={moment().subtract(100, 'years').toDate()}\n                                            />\n\n                                            <span style={{ paddingRight: 5, paddingLeft: 5 }}>{t(\"policyList:PolicyStartDateFrom.tolabel\")}</span>\n\n                                            <DatePicker name=\"dob\"\n                                                value={this.state.dob} maxDate={moment().toDate()} minDate={moment().subtract(100, 'years').toDate()}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col md=\"6\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:PolicyRenewalDateFrom.label\")}</label>\n\n                                            <DatePicker name=\"dob\"\n                                                value={this.state.dob} maxDate={moment().toDate()} minDate={moment().subtract(100, 'years').toDate()}\n                                            />\n\n                                            <span style={{ paddingRight: 5, paddingLeft: 5 }}>{t(\"policyList:PolicyRenewalDateFrom.tolabel\")}</span>\n\n                                            <DatePicker name=\"dob\" value={this.state.dob} maxDate={moment().toDate()} minDate={moment().subtract(100, 'years').toDate()}\n                                            />\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Country.label\")}</label>\n                                            <Select options={this.state.countryList} value={this.state.country}\n                                                // onChange={(data) => this.selectType(data, 'country')}\n                                                placeholder={t(\"policyList:Country.label\")}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Language.label\")}</label>\n                                            <Input type=\"select\" name=\"language\" id=\"language\">\n                                                <option value=''>{t(\"policyList:Language.defaultValue\")}</option>\n                                                {this.state.languageArray.map((language, i) => {\n                                                    return (<option value={language.LanguageId} key={i}>{language.Language}</option>)\n                                                })\n                                                }\n                                            </Input>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Currency.label\")}</label>\n                                            <Input type=\"select\" name=\"currency\" id=\"currency\">\n                                                <option value=''>{t(\"policyList:Currency.defaultValue\")}</option>\n                                                {this.state.currencyArray.map((currency, i) => {\n                                                    return (<option value={currency.CurrncyCode} key={i}>{currency.CurrncyCode}</option>)\n                                                })\n                                                }\n                                            </Input>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:PolicyStatus.label\")}</label>\n                                            <Input type=\"select\" name=\"policystatus\" id=\"policystatus\" value={this.state.policyStatus}>\n                                                {this.state.policyStatusList.map((policyStatus, i) => {\n                                                    return (\n                                                        <option value={policyStatus.StringMapKey} key={i} selected={policyStatus.StringMapKey === 'Active' ? true : false}>\n                                                            {policyStatus.StringMapName}\n                                                        </option>\n                                                    )\n                                                })\n                                                }\n                                            </Input>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:PolicyType.label\")}</label>\n                                            <Input type=\"select\" name=\"policytype\" id=\"policytype\">\n                                                <option value={this.state.policyType}>{t(\"policyList:PolicyType.defaultValue\")}</option>\n                                                {this.state.policyTypeArray.map((policytype, i) => {\n                                                    return (<option value={policytype.StringMapKey} key={i}>{policytype.StringMapName}</option>)\n                                                })\n                                                }\n                                            </Input>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:VesselClass.label\")}</label>\n                                            <Select id=\"vesselclass\" name=\"vesselclass\" options={this.state.vesselClassArray} value={this.state.vesselClass}\n                                                onChange={(e) => this.selectType(e, 'vesselclass')}\n                                                placeholder={t(\"policyList:VesselClass.label\")}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:VesselType.label\")}</label>\n                                            <Select id=\"vesselType\" name=\"vesselType\" options={this.state.vesselTypeArray} value={this.state.vesselType}\n                                                onChange={(e) => this.selectType(e, 'vesselType')}\n                                                placeholder={t(\"policyList:VesselType.label\")}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:Agent/ServiceCenter.label\")}</label>\n                                            <Input type=\"text\" name=\"phonetype\" id=\"phonetype\"></Input>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:SumInsuredFrom.label\")}</label>\n                                            <Input type=\"text\" name=\"phonetype\" id=\"phonetype\"></Input>\n                                        </div>\n                                    </Col>\n                                    <Col md=\"4\">\n                                        <div className=\"input-box\">\n                                            <label>{t(\"policyList:SumInsuredTo.label\")}</label>\n                                            <Input type=\"text\" name=\"phonetype\" id=\"phonetype\"></Input>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <div style={{ width: \"100%\", textAlign: \"right\" }}>\n                                    <BTN color=\"success\" style={{ marginRight: '.5em', borderRadius: \"20px\" }} title=\"Go\" onClick={() => this.filterData()}> Go </BTN>\n                                </div>\n                            </CardBody>\n\n                        </Collapse>\n                    </Card>\n                </div> */}\n                <div className=\"table-custom\">\n                    <DataTable ref={(el) => this.dt = el} value={this.state.arr} first={this.state.selectedPage} onPage={(e) => this.getPageString(e)}\n                        paginator={true} rows={this.state.rowsPerPage} totalRecords={this.state.arr.length} exportFilename=\"Policy List\"\n                        currentPageReportTemplate={this.state.str} scrollable={true} scrollHeight=\"340px\"\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                        rowsPerPageOptions={this.state.rowsPerPageOptions} globalFilter={this.state.globalFilter} emptyMessage=\"No records found\"\n                        responsive={true} resizableColumns={true} columnResizeMode=\"fit\" //stateKey=\"contactList\" stateStorage=\"local\" header={header} \n                    >\n                        {columns}\n                    </DataTable>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(PolicyDetails);\n"]},"metadata":{},"sourceType":"module"}