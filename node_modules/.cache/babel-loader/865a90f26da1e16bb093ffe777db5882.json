{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst Transform = stream.Transform;\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */\n\nfunction encode(buffer) {\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer, 'utf-8');\n  }\n\n  return buffer.toString('base64');\n}\n/**\n * Decodes a base64 encoded string to a Buffer object\n *\n * @param {String} str base64 encoded string\n * @returns {Buffer} Decoded value\n */\n\n\nfunction decode(str) {\n  str = str || '';\n  return Buffer.from(str, 'base64');\n}\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */\n\n\nfunction wrap(str, lineLength) {\n  str = (str || '').toString();\n  lineLength = lineLength || 76;\n\n  if (str.length <= lineLength) {\n    return str;\n  }\n\n  let result = [];\n  let pos = 0;\n  let chunkLength = lineLength * 1024;\n\n  while (pos < str.length) {\n    let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\\r\\n').trim();\n    result.push(wrappedLines);\n    pos += chunkLength;\n  }\n\n  return result.join('\\r\\n').trim();\n}\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping\n */\n\n\nclass Encoder extends Transform {\n  constructor(options) {\n    super(); // init Transform\n\n    this.options = options || {};\n\n    if (this.options.lineLength !== false) {\n      this.options.lineLength = Number(this.options.lineLength) || 76;\n    }\n\n    this.skipStartBytes = Number(this.options.skipStartBytes) || 0;\n    this.limitOutbutBytes = Number(this.options.limitOutbutBytes) || 0; // startPadding can be used together with skipStartBytes\n\n    this._curLine = this.options.startPadding || '';\n    this._remainingBytes = false;\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n  }\n\n  _writeChunk(chunk\n  /*, isFinal */\n  ) {\n    if (this.skipStartBytes) {\n      if (chunk.length <= this.skipStartBytes) {\n        this.skipStartBytes -= chunk.length;\n        return;\n      }\n\n      chunk = chunk.slice(this.skipStartBytes);\n      this.skipStartBytes = 0;\n    }\n\n    if (this.limitOutbutBytes) {\n      if (this.outputBytes + chunk.length <= this.limitOutbutBytes) {// ignore, can use entire chunk\n      } else if (this.outputBytes >= this.limitOutbutBytes) {\n        // chunks already processed\n        return;\n      } else {\n        // use partial chunk\n        chunk = chunk.slice(0, this.limitOutbutBytes - this.outputBytes);\n      }\n    }\n\n    this.outputBytes += chunk.length;\n    this.push(chunk);\n  }\n\n  _getWrapped(str, isFinal) {\n    str = wrap(str, this.options.lineLength);\n\n    if (!isFinal && str.length === this.options.lineLength) {\n      str += '\\r\\n';\n    }\n\n    return str;\n  }\n\n  _transform(chunk, encoding, done) {\n    if (encoding !== 'buffer') {\n      chunk = Buffer.from(chunk, encoding);\n    }\n\n    if (!chunk || !chunk.length) {\n      return setImmediate(done);\n    }\n\n    this.inputBytes += chunk.length;\n\n    if (this._remainingBytes && this._remainingBytes.length) {\n      chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);\n      this._remainingBytes = false;\n    }\n\n    if (chunk.length % 3) {\n      this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n      chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n    } else {\n      this._remainingBytes = false;\n    }\n\n    let b64 = this._curLine + encode(chunk);\n\n    if (this.options.lineLength) {\n      b64 = this._getWrapped(b64); // remove last line as it is still most probably incomplete\n\n      let lastLF = b64.lastIndexOf('\\n');\n\n      if (lastLF < 0) {\n        this._curLine = b64;\n        b64 = '';\n      } else if (lastLF === b64.length - 1) {\n        this._curLine = '';\n      } else {\n        this._curLine = b64.substr(lastLF + 1);\n        b64 = b64.substr(0, lastLF + 1);\n      }\n    }\n\n    if (b64) {\n      this._writeChunk(Buffer.from(b64, 'ascii'), false);\n    }\n\n    setImmediate(done);\n  }\n\n  _flush(done) {\n    if (this._remainingBytes && this._remainingBytes.length) {\n      this._curLine += encode(this._remainingBytes);\n    }\n\n    if (this._curLine) {\n      this._curLine = this._getWrapped(this._curLine, true);\n\n      this._writeChunk(Buffer.from(this._curLine, 'ascii'), true);\n\n      this._curLine = '';\n    }\n\n    done();\n  }\n\n}\n/**\n * Creates a transform stream for decoding base64 encoded strings\n *\n * @constructor\n * @param {Object} options Stream options\n */\n\n\nclass Decoder extends Transform {\n  constructor(options) {\n    super(); // init Transform\n\n    this.options = options || {};\n    this._curLine = '';\n    this.inputBytes = 0;\n    this.outputBytes = 0;\n  }\n\n  _transform(chunk, encoding, done) {\n    if (!chunk || !chunk.length) {\n      return setImmediate(done);\n    }\n\n    this.inputBytes += chunk.length;\n    let b64 = this._curLine + chunk.toString('ascii');\n    this._curLine = '';\n\n    if (/[^a-zA-Z0-9+/=]/.test(b64)) {\n      b64 = b64.replace(/[^a-zA-Z0-9+/=]/g, '');\n    }\n\n    if (b64.length < 4) {\n      this._curLine = b64;\n      b64 = '';\n    } else if (b64.length % 4) {\n      this._curLine = b64.substr(-b64.length % 4);\n      b64 = b64.substr(0, b64.length - this._curLine.length);\n    }\n\n    if (b64) {\n      let buf = decode(b64);\n      this.outputBytes += buf.length;\n      this.push(buf);\n    }\n\n    setImmediate(done);\n  }\n\n  _flush(done) {\n    if (this._curLine) {\n      let buf = decode(this._curLine);\n      this.outputBytes += buf.length;\n      this.push(buf);\n      this._curLine = '';\n    }\n\n    setImmediate(done);\n  }\n\n} // expose to the world\n\n\nmodule.exports = {\n  encode,\n  decode,\n  wrap,\n  Encoder,\n  Decoder\n};","map":null,"metadata":{},"sourceType":"script"}