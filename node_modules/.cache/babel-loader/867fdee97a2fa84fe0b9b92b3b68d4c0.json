{"ast":null,"code":"var _jsxFileName = \"/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Binder/AddUdateBinder/BulkUpload.js\";\nimport React, { Component } from 'react';\nimport Stepper from 'react-js-stepper';\nimport { Col, Row, Modal, ModalBody, ModalHeader, ModalFooter, Button as BTN, Input } from 'reactstrap';\nimport { DataTable } from 'primereact/datatable';\nimport readXlsxFile from 'read-excel-file';\nimport { Column } from 'primereact/column';\nimport sampleCSV from \"../../../assets/files/Bulk Import Binder Rating1.csv\";\nimport uuid from \"uuid\";\nimport moment from 'moment';\nimport api from '../../../utils/apiClient';\nimport APIConstant from '../../../utils/constants';\nimport { CommonConfig } from '../../../utils/constants';\nimport { toast } from 'react-toastify';\nconst steps = [{\n  title: 'File Upload'\n}, {\n  title: 'Check File Data'\n}, {\n  title: 'Import Result'\n}];\nexport class BulkUpload extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClickStepper = step => {\n      this.setState({\n        currStep: step\n      });\n    };\n\n    this.handleOnClickNext1 = () => {\n      this.upload();\n    };\n\n    this.handleOnClickNext = () => {\n      let nextStep = this.state.currStep + 1;\n      this.setState({\n        currStep: nextStep\n      });\n    };\n\n    this.handleOnClickNext2 = () => {\n      this.bulkInsertBinderRatingBands();\n    };\n\n    this.handleOnClickBack = () => {\n      let prevStep = this.state.currStep - 1;\n      this.setState({\n        currStep: prevStep,\n        FileNameError: true,\n        FileName: '',\n        Extension: ''\n      });\n    };\n\n    this.getPageString = e => {\n      let firstPage = e.first + 1;\n      let l = e.rows * (e.page + 1);\n      let lastPage = l < this.state.fileData.length ? l : this.state.fileData.length;\n      var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.fileData.length + ' records';\n      this.setState({\n        selectedPage: e.first,\n        str: str,\n        rowsPerPage: e.rows\n      });\n    };\n\n    this.selectFile = event => {\n      if (event.target.files && event.target.files[0]) {\n        var docname = event.target.files[0].name.split('.').slice(0, -1).join('.');\n        var ext = event.target.files[0].name.split('.').pop();\n        this.setState({\n          selectedfile: event.target.files[0],\n          FileName: docname,\n          FileNameError: false,\n          Extension: ext\n        });\n        let reader = new FileReader();\n\n        reader.onload = e => {\n          this.setState({\n            file: e.target.result\n          });\n        };\n\n        reader.readAsDataURL(event.target.files[0]);\n      } else {\n        this.setState({\n          FileNameError: true,\n          FileName: '',\n          Extension: ''\n        });\n      }\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n\n      if (e.target.name === 'effectiveDate') {\n        if (e.target.value === '' || e.target.value === null) {\n          this.setState({\n            effectiveDateError: true\n          });\n          this.show(\"effectiveDate\", true);\n        } else {\n          this.setState({\n            effectiveDateError: false,\n            effectiveDate: e.target.value\n          });\n          this.show(\"effectiveDate\", false);\n        }\n      }\n    };\n\n    let columns = [{\n      field: \"RowNum\",\n      header: \"RowNum\",\n      sortable: true,\n      filter: true,\n      id: 0\n    }, {\n      field: \"Country\",\n      header: \"Country\",\n      sortable: true,\n      filter: true,\n      id: 0\n    }, {\n      field: \"VesselClass\",\n      header: \"VesselClass\",\n      sortable: true,\n      filter: true,\n      id: 1\n    }, {\n      field: \"VesselType\",\n      header: \"VesselType\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"ValueFrom\",\n      header: \"Value From\",\n      sortable: true,\n      filter: true,\n      id: 3\n    }, {\n      field: \"ValueTo\",\n      header: \"Value To\",\n      sortable: true,\n      filter: true,\n      id: 0\n    }, {\n      field: \"Excess\",\n      header: \"Excess\",\n      sortable: true,\n      filter: true,\n      id: 1\n    }, {\n      field: \"BaseRateNewBusiness\",\n      header: \"Base Rate(%)\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"AbsoluteNewBusiness\",\n      header: \"AbsoluteNewBusiness Rate(%)\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"RateRenewal\",\n      header: \"Rate Renewal Rate(%)\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"AbsoluteRenewal\",\n      header: \"Absolute Renewal Rate(%)\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"Status\",\n      header: \"Status\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }, {\n      field: \"ErrorMsg\",\n      header: \"Error Message\",\n      sortable: true,\n      filter: true,\n      id: 2\n    }];\n    this.state = {\n      currStep: 1,\n      //for step one \n      fullReplaceMent: true,\n      incremental: false,\n      file: null,\n      insertsucessRecord: [],\n      //for step two \n      totalRecords: 0,\n      recordWithError: 0,\n      recordWithSucess: 0,\n      cols: columns,\n      fileData: [],\n      totalfinaldata: [],\n      selectedPage: 0,\n      documentList: [],\n      directoryList: [],\n      selecteddirectory: '',\n      selectedfile: '',\n      headerId: '',\n      operationType: '',\n      file: '',\n      fileError: true,\n      Extension: '',\n      FileName: '',\n      BinderId: \"\",\n      FileNameError: true,\n      rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n      //for step three\n      totalRecordsInsert: 0,\n      totalRecordsInsertSuccess: 0,\n      totalRecordsInsertFail: 0,\n      effectiveDate: moment().format(\"YYYY-MM-DD\")\n    };\n    this.fileOnChange = this.fileOnChange.bind(this);\n    this.downloadErrorFile = this.downloadErrorFile.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      BinderId: this.props.BinderId\n    });\n  }\n\n  show(field, condition) {\n    if (condition) {\n      document.getElementById(field).className = \"form-control is-invalid\";\n    } else {\n      document.getElementById(field).className = \"form-control\";\n    }\n  }\n\n  upload() {\n    if (this.state.selectedfile !== \"\" && this.state.FileNameError === false) {\n      var formData = new FormData();\n      formData.append('directory', 'BinderRatingBands');\n      formData.append('FileName', this.state.FileName.trim());\n      formData.append('Extension', this.state.Extension);\n      formData.append('bulkImportDocument', this.state.selectedfile);\n      formData.append('BinderId', this.state.BinderId);\n      formData.append('SubBinderId', \"\");\n      formData.append('UserId', CommonConfig.loggedInUserId());\n      formData.append('inscreamental', this.state.fullReplaceMent == true ? \"I\" : \"U\");\n      api.post(APIConstant.path.bulkInsertBinderRatingBands, formData).then(res => {\n        if (res.success) {\n          toast.success(\"Binder File Uploaded With Validation\");\n          this.setState({\n            headerId: res.data.headerId,\n            totalRecords: res.data.totalRecords,\n            recordWithSucess: res.data.successRecords,\n            recordWithError: res.data.errorRecords,\n            totalfinaldata: res.data.data,\n            fileData: res.data.data.map(obj => {\n              return {\n                AbsoluteNewBusiness: obj.AbsoluteNewBusiness,\n                AbsoluteRenewal: obj.AbsoluteRenewal,\n                Status: obj.Status,\n                ErrorMsg: obj.ErrorMsg,\n                LanguageId: obj.LanguageId,\n                BulkImportDetailId: obj.BulkImportDetailId,\n                BulkImportHeaderId: obj.BulkImportHeaderId,\n                RowNum: obj.RowNum,\n                Country: obj.Country,\n                VesselClass: obj.VesselClass,\n                VesselType: obj.VesselType,\n                ValueFrom: obj.ValueFrom,\n                ValueTo: obj.ValueTo,\n                Excess: obj.Excess,\n                BaseRateNewBusiness: obj.BaseRateNewBusiness,\n                RateRenewal: obj.RateRenewal\n              };\n            })\n          });\n          let nextStep = this.state.currStep + 1;\n          this.setState({\n            currStep: nextStep\n          });\n        } else {}\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      if (this.state.selectedfile === '' || this.state.selectedfile === undefined || this.state.selectedfile === null) ;\n    }\n  }\n\n  bulkInsertBinderRatingBands() {\n    debugger;\n\n    try {\n      const data = {\n        operationType: this.state.fullReplaceMent == true ? \"I\" : \"U\",\n        headerId: this.state.headerId,\n        UserId: CommonConfig.loggedInUserId(),\n        EffectiveDate: moment(this.state.effectiveDate).format(\"YYYY-MM-DD\")\n      };\n      api.post(APIConstant.path.insertRatingBandsFromDetail, data).then(res => {\n        if (res.success) {\n          let nextStep = this.state.currStep + 1;\n          this.setState({\n            currStep: nextStep,\n            totalRecordsInsert: this.state.totalRecords,\n            totalRecordsInsertSuccess: res.data.affectedRows,\n            totalRecordsInsertFail: this.state.totalRecords - res.data.affectedRows\n          });\n        } else {\n          console.log(res);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault(); // Stop form submit\n\n    this.fileUpload(this.state.file).then(response => {\n      console.log(response.data);\n    });\n  }\n\n  fileOnChange(e) {\n    this.setState({\n      file: e.target.files[0]\n    });\n    readXlsxFile(e.target.files[0]).then(rows => {\n      if (Array.isArray(rows)) {\n        var sucessRecord = [];\n        var errRecord = [];\n\n        for (var i = 1; i < rows.length; i++) {\n          var temp = {\n            Country: rows[i][0],\n            Class: rows[i][1],\n            Type: rows[i][2],\n            ValueFrom: rows[i][3],\n            ValueTo: rows[i][4],\n            Excess: rows[i][5],\n            BaseRate: rows[i][6]\n          };\n          var insertdata = [uuid.v4(), this.state.BinderId, rows[i][1], rows[i][2], rows[i][0], rows[i][3], rows[i][4], rows[i][5], 0, 0, rows[i][6], 0, CommonConfig.loggedInUserId(), \"Active\", moment().format(\"YYYY-MM-DD\"), CommonConfig.loggedInUserId(), moment().format(\"YYYY-MM-DD\"), moment().format(\"YYYY-MM-DD\"), moment().format(\"YYYY-MM-DD\"), \"en-GB\"];\n          this.state.insertsucessRecord.push(insertdata);\n\n          if (rows[i][0] == \"\" && rows[i][0] == null) {\n            errRecord.push(temp);\n          } else {\n            sucessRecord.push(temp);\n          }\n        }\n\n        this.setState({\n          fileData: sucessRecord,\n          totalRecords: rows.length - 1,\n          recordWithSucess: sucessRecord.length,\n          recordWithError: errRecord.length\n        });\n      }\n    });\n  }\n\n  download() {\n    window.location.href = sampleCSV;\n  }\n\n  downloadErrorFile() {\n    this.dt.exportCSV();\n  }\n\n  renderfileUpload() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }\n    }, \"Bulk Import Rating Bands for Binder\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }, \"Import Type\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rc-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"radio\",\n      name: \"fullReplaceMent\",\n      checked: this.state.fullReplaceMent,\n      value: this.state.radioSelected,\n      onChange: () => this.setState({\n        fullReplaceMent: true,\n        incremental: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 33\n      }\n    }), \"Full Replacement\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 41\n      }\n    }, \"This Option will completly replace the existing band values with the file value being imported. the band values that are not specifield in new file will not be inactivated.\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rc-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"radio\",\n      disabled: \"disabled\",\n      name: \"incremental\",\n      checked: this.state.incremental,\n      value: this.state.radioSelected,\n      onChange: () => this.setState({\n        fullReplaceMent: false,\n        incremental: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    }), \"Incremental\"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 29\n      }\n    }, \"This Option will only add or update the band values with the file values being imported. The band values that are not specified in the file will stay intact.\")))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      onClick: this.download,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }\n    }, \"Download Sample File \")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 29\n      }\n    }, \"Specify File to Import\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      accept: \".csv\",\n      type: \"file\",\n      onChange: this.selectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 33\n      }\n    }))))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.handleOnClickNext1(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    }, \" Check File Data  \", /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-arrow-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 102\n      }\n    })), ' ')));\n  }\n\n  rendercheckFiledata() {\n    let columns = this.state.cols.map((col, i) => {\n      return /*#__PURE__*/React.createElement(Column, {\n        field: col.field,\n        header: col.header,\n        body: col.body,\n        sortable: col.sortable,\n        filter: col.filter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        paddingTop: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }\n    }, \"Total Records in file : \", this.state.totalRecords)), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 25\n      }\n    }, \"Record With Error : \", this.state.recordWithError)), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 25\n      }\n    }, \"Record With Successful Data Check : \", this.state.recordWithSucess))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      ref: el => this.dt = el,\n      value: this.state.fileData,\n      first: this.state.selectedPage,\n      onPage: e => this.getPageString(e),\n      paginator: true,\n      rows: this.state.rowsPerPage,\n      totalRecords: this.state.fileData.length,\n      exportFilename: \"Binder Rating Error List\",\n      currentPageReportTemplate: this.state.str,\n      scrollable: true,\n      scrollHeight: \"250px\",\n      paginatorTemplate: \"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\",\n      rowsPerPageOptions: this.state.rowsPerPageOptions,\n      globalFilter: this.state.globalFilter,\n      emptyMessage: \"No records found\",\n      responsive: true,\n      resizableColumns: true,\n      columnResizeMode: \"fit\",\n      scrollable: true,\n      scrollHeight: \"265px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 21\n      }\n    }, columns)), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        padding: '10px 0px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 25\n      }\n    }, \"Effective Date\")), /*#__PURE__*/React.createElement(Col, {\n      md: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"date\",\n      name: \"effectiveDate\",\n      id: \"effectiveDate\",\n      onChange: e => this.handleChange(e),\n      value: this.state.effectiveDate,\n      min: moment().format('YYYY-MM-DD'),\n      max: moment().add(100, 'years').format('YYYY-MM-DD'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      className: \"error invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 25\n      }\n    }, \"Please Enter Valid Effective Date\")))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 13\n      }\n    }, this.state.recordWithError > 0 ? /*#__PURE__*/React.createElement(BTN, {\n      onClick: this.downloadErrorFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 54\n      }\n    }, \"Download File \") : '', /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.handleOnClickBack(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-arrow-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 79\n      }\n    }), \"  Back\"), ' ', this.state.recordWithError > 0 || this.state.effectiveDate == \"\" ? /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      disabled: \"disabled\",\n      onClick: () => this.handleOnClickNext2(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 22\n      }\n    }, \" Proceed with import  \", /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-arrow-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 129\n      }\n    })) : /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => this.handleOnClickNext2(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 24\n      }\n    }, \" Proceed with import  \", /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-arrow-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 109\n      }\n    }))));\n  }\n\n  renderimportresult() {\n    var handleCallBack = this.props.handleCallBack;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      style: {\n        color: \"#00ff00\",\n        fontSize: 70\n      },\n      color: \"success\",\n      class: \"fa fa-check-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }\n    }, this.state.totalRecordsInsertSuccess, \" Record Importd \")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 21\n      }\n    }, this.state.totalRecordsInsertFail, \" Record Importd Fail\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 21\n      }\n    }, \"Data Imported Sucessfully! \"))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BTN, {\n      color: \"primary\",\n      onClick: () => this.setState({\n        currStep: 1\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }, \"  Import Again\"), ' ', /*#__PURE__*/React.createElement(BTN, {\n      color: \"success\",\n      onClick: () => handleCallBack(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 17\n      }\n    }, \" Ok  \", /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 81\n      }\n    })), ' '));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Stepper, {\n      steps: steps,\n      activeStep: this.state.currStep,\n      onSelect: this.handleOnClickStepper,\n      showNumber: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: '40px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 13\n      }\n    }, this.state.currStep === 1 ? this.renderfileUpload() : this.state.currStep === 2 ? this.rendercheckFiledata() : this.state.currStep === 3 ? this.renderimportresult() : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/bhavik/Downloads/Cognisun/Evolution/Evolution_React/evolution_new/src/views/Binder/AddUdateBinder/BulkUpload.js"],"names":["React","Component","Stepper","Col","Row","Modal","ModalBody","ModalHeader","ModalFooter","Button","BTN","Input","DataTable","readXlsxFile","Column","sampleCSV","uuid","moment","api","APIConstant","CommonConfig","toast","steps","title","BulkUpload","constructor","props","handleOnClickStepper","step","setState","currStep","handleOnClickNext1","upload","handleOnClickNext","nextStep","state","handleOnClickNext2","bulkInsertBinderRatingBands","handleOnClickBack","prevStep","FileNameError","FileName","Extension","getPageString","e","firstPage","first","l","rows","page","lastPage","fileData","length","str","selectedPage","rowsPerPage","selectFile","event","target","files","docname","name","split","slice","join","ext","pop","selectedfile","reader","FileReader","onload","file","result","readAsDataURL","handleChange","value","effectiveDateError","show","effectiveDate","columns","field","header","sortable","filter","id","fullReplaceMent","incremental","insertsucessRecord","totalRecords","recordWithError","recordWithSucess","cols","totalfinaldata","documentList","directoryList","selecteddirectory","headerId","operationType","fileError","BinderId","dataTableConfig","totalRecordsInsert","totalRecordsInsertSuccess","totalRecordsInsertFail","format","fileOnChange","bind","downloadErrorFile","componentDidMount","condition","document","getElementById","className","formData","FormData","append","trim","loggedInUserId","post","path","then","res","success","data","successRecords","errorRecords","map","obj","AbsoluteNewBusiness","AbsoluteRenewal","Status","ErrorMsg","LanguageId","BulkImportDetailId","BulkImportHeaderId","RowNum","Country","VesselClass","VesselType","ValueFrom","ValueTo","Excess","BaseRateNewBusiness","RateRenewal","catch","err","console","log","undefined","UserId","EffectiveDate","insertRatingBandsFromDetail","affectedRows","error","onFormSubmit","preventDefault","fileUpload","response","Array","isArray","sucessRecord","errRecord","i","temp","Class","Type","BaseRate","insertdata","v4","push","download","window","location","href","dt","exportCSV","renderfileUpload","marginTop","radioSelected","rendercheckFiledata","col","body","paddingTop","el","rowsPerPageOptions","globalFilter","padding","add","renderimportresult","handleCallBack","color","fontSize","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Stepper from 'react-js-stepper'\nimport { Col, Row, Modal, ModalBody, ModalHeader, ModalFooter, Button as BTN, Input } from 'reactstrap';\nimport { DataTable } from 'primereact/datatable';\nimport readXlsxFile from 'read-excel-file'\nimport { Column } from 'primereact/column';\nimport sampleCSV from \"../../../assets/files/Bulk Import Binder Rating1.csv\"\nimport uuid from \"uuid\";\nimport moment from 'moment';\nimport api from '../../../utils/apiClient';\nimport APIConstant from '../../../utils/constants';\nimport { CommonConfig } from '../../../utils/constants';\nimport { toast } from 'react-toastify';\nconst steps = [{ title: 'File Upload' }, { title: 'Check File Data' }, { title: 'Import Result' },]\n\nexport class BulkUpload extends Component {\n\n\n    constructor(props) {\n\n        super(props);\n        let columns = [\n            { field: \"RowNum\", header: \"RowNum\", sortable: true, filter: true, id: 0 },\n            { field: \"Country\", header: \"Country\", sortable: true, filter: true, id: 0 },\n            { field: \"VesselClass\", header: \"VesselClass\", sortable: true, filter: true, id: 1 },\n            { field: \"VesselType\", header: \"VesselType\", sortable: true, filter: true, id: 2 },\n            { field: \"ValueFrom\", header: \"Value From\", sortable: true, filter: true, id: 3 },\n            { field: \"ValueTo\", header: \"Value To\", sortable: true, filter: true, id: 0 },\n            { field: \"Excess\", header: \"Excess\", sortable: true, filter: true, id: 1 },\n            { field: \"BaseRateNewBusiness\", header: \"Base Rate(%)\", sortable: true, filter: true, id: 2 },\n            { field: \"AbsoluteNewBusiness\", header: \"AbsoluteNewBusiness Rate(%)\", sortable: true, filter: true, id: 2 },\n            { field: \"RateRenewal\", header: \"Rate Renewal Rate(%)\", sortable: true, filter: true, id: 2 },\n            { field: \"AbsoluteRenewal\", header: \"Absolute Renewal Rate(%)\", sortable: true, filter: true, id: 2 },\n            { field: \"Status\", header: \"Status\", sortable: true, filter: true, id: 2 },\n            { field: \"ErrorMsg\", header: \"Error Message\", sortable: true, filter: true, id: 2 },\n        ];\n\n        this.state = {\n            currStep: 1,\n            //for step one \n            fullReplaceMent: true,\n            incremental: false,\n            file: null,\n            insertsucessRecord: [],\n            //for step two \n            totalRecords: 0,\n            recordWithError: 0,\n            recordWithSucess: 0,\n            cols: columns,\n            fileData: [],\n            totalfinaldata: [],\n            selectedPage: 0,\n            documentList: [],\n            directoryList: [],\n            selecteddirectory: '',\n            selectedfile: '',\n            headerId: '',\n            operationType: '',\n            file: '',\n            fileError: true,\n            Extension: '',\n            FileName: '',\n            BinderId: \"\",\n            FileNameError: true,\n            rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,\n            //for step three\n            totalRecordsInsert: 0,\n            totalRecordsInsertSuccess: 0,\n            totalRecordsInsertFail: 0,\n            effectiveDate: moment().format(\"YYYY-MM-DD\"),\n        }\n        this.fileOnChange = this.fileOnChange.bind(this)\n        this.downloadErrorFile = this.downloadErrorFile.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.setState({ BinderId: this.props.BinderId })\n    }\n\n    show(field, condition) {\n        if (condition) {\n            document.getElementById(field).className = \"form-control is-invalid\";\n        } else {\n            document.getElementById(field).className = \"form-control\";\n        }\n    }\n\n    handleOnClickStepper = (step) => {\n        this.setState({ currStep: step });\n    }\n\n    handleOnClickNext1 = () => {\n        this.upload()\n    }\n\n    handleOnClickNext = () => {\n        let nextStep = this.state.currStep + 1;\n        this.setState({ currStep: nextStep })\n    }\n\n    handleOnClickNext2 = () => {\n        this.bulkInsertBinderRatingBands()\n    }\n\n    upload() {\n\n        if (\n            this.state.selectedfile !== \"\" &&\n            this.state.FileNameError === false\n        ) {\n            var formData = new FormData();\n            formData.append('directory', 'BinderRatingBands');\n            formData.append('FileName', (this.state.FileName).trim());\n            formData.append('Extension', this.state.Extension);\n            formData.append('bulkImportDocument', this.state.selectedfile);\n            formData.append('BinderId', this.state.BinderId);\n            formData.append('SubBinderId', \"\");\n            formData.append('UserId', CommonConfig.loggedInUserId());\n            formData.append('inscreamental', this.state.fullReplaceMent == true ? \"I\" : \"U\");\n\n            api.post(APIConstant.path.bulkInsertBinderRatingBands, formData).then(res => {\n                if (res.success) {\n                    toast.success(\"Binder File Uploaded With Validation\");\n                    this.setState({\n                        headerId: res.data.headerId,\n                        totalRecords: res.data.totalRecords,\n                        recordWithSucess: res.data.successRecords,\n                        recordWithError: res.data.errorRecords,\n                        totalfinaldata: res.data.data,\n                        fileData: res.data.data.map((obj) => {\n                            return {\n                                AbsoluteNewBusiness: obj.AbsoluteNewBusiness,\n                                AbsoluteRenewal: obj.AbsoluteRenewal,\n                                Status: obj.Status,\n                                ErrorMsg: obj.ErrorMsg,\n                                LanguageId: obj.LanguageId,\n                                BulkImportDetailId: obj.BulkImportDetailId,\n                                BulkImportHeaderId: obj.BulkImportHeaderId,\n                                RowNum: obj.RowNum,\n                                Country: obj.Country,\n                                VesselClass: obj.VesselClass,\n                                VesselType: obj.VesselType,\n                                ValueFrom: obj.ValueFrom,\n                                ValueTo: obj.ValueTo,\n                                Excess: obj.Excess,\n                                BaseRateNewBusiness: obj.BaseRateNewBusiness,\n                                RateRenewal: obj.RateRenewal\n                            }\n                        })\n                    })\n                    let nextStep = this.state.currStep + 1;\n                    this.setState({ currStep: nextStep })\n                } else {\n                }\n            }).catch(err => {\n                console.log(err)\n            });\n        }\n        else {\n            if (this.state.selectedfile === '' || this.state.selectedfile === undefined || this.state.selectedfile === null);\n        }\n    }\n\n    bulkInsertBinderRatingBands() {\n        debugger;\n        try {\n            const data = {\n                operationType: this.state.fullReplaceMent == true ? \"I\" : \"U\",\n                headerId: this.state.headerId,\n                UserId: CommonConfig.loggedInUserId(),\n                EffectiveDate: moment(this.state.effectiveDate).format(\"YYYY-MM-DD\"),\n            };\n            api.post(APIConstant.path.insertRatingBandsFromDetail, data).then(res => {\n                if (res.success) {\n                    let nextStep = this.state.currStep + 1;\n\n                    this.setState({\n                        currStep: nextStep,\n                        totalRecordsInsert: this.state.totalRecords,\n                        totalRecordsInsertSuccess: res.data.affectedRows,\n                        totalRecordsInsertFail: this.state.totalRecords - res.data.affectedRows\n                    })\n                } else {\n                    console.log(res)\n                }\n            }).catch(err => {\n                console.log(err)\n            });\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    handleOnClickBack = () => {\n        let prevStep = this.state.currStep - 1;\n        this.setState({ currStep: prevStep, FileNameError: true, FileName: '', Extension: '' })\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault() // Stop form submit\n        this.fileUpload(this.state.file).then((response) => {\n            console.log(response.data);\n        })\n    }\n\n    getPageString = (e) => {\n        let firstPage = e.first + 1;\n        let l = e.rows * (e.page + 1);\n        let lastPage = (l < this.state.fileData.length) ? l : this.state.fileData.length\n        var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.fileData.length + ' records';\n        this.setState({ selectedPage: e.first, str: str, rowsPerPage: e.rows });\n    }\n\n    selectFile = (event) => {\n        if (event.target.files && event.target.files[0]) {\n            var docname = event.target.files[0].name.split('.').slice(0, -1).join('.');\n            var ext = event.target.files[0].name.split('.').pop();\n            this.setState({ selectedfile: event.target.files[0], FileName: docname, FileNameError: false, Extension: ext });\n            let reader = new FileReader();\n            reader.onload = (e) => {\n                this.setState({ file: e.target.result });\n            };\n            reader.readAsDataURL(event.target.files[0]);\n        }\n        else {\n            this.setState({ FileNameError: true, FileName: '', Extension: '' });\n        }\n    }\n\n    fileOnChange(e) {\n        this.setState({ file: e.target.files[0] })\n        readXlsxFile(e.target.files[0]).then((rows) => {\n            if (Array.isArray(rows)) {\n                var sucessRecord = [];\n                var errRecord = [];\n                for (var i = 1; i < rows.length; i++) {\n                    var temp = {\n                        Country: rows[i][0],\n                        Class: rows[i][1],\n                        Type: rows[i][2],\n                        ValueFrom: rows[i][3],\n                        ValueTo: rows[i][4],\n                        Excess: rows[i][5],\n                        BaseRate: rows[i][6],\n                    }\n                    var insertdata = [\n                        uuid.v4(),\n                        this.state.BinderId,\n                        rows[i][1],\n                        rows[i][2],\n                        rows[i][0],\n                        rows[i][3],\n                        rows[i][4],\n                        rows[i][5],\n                        0,\n                        0,\n                        rows[i][6],\n                        0,\n                        CommonConfig.loggedInUserId(),\n                        \"Active\",\n                        moment().format(\"YYYY-MM-DD\"),\n                        CommonConfig.loggedInUserId(),\n                        moment().format(\"YYYY-MM-DD\"),\n                        moment().format(\"YYYY-MM-DD\"),\n                        moment().format(\"YYYY-MM-DD\"),\n                        \"en-GB\"\n                    ]\n\n                    this.state.insertsucessRecord.push(insertdata)\n                    if (rows[i][0] == \"\" && rows[i][0] == null) {\n                        errRecord.push(temp)\n                    }\n                    else {\n                        sucessRecord.push(temp)\n                    }\n                }\n                this.setState({\n                    fileData: sucessRecord,\n                    totalRecords: rows.length - 1,\n                    recordWithSucess: sucessRecord.length,\n                    recordWithError: errRecord.length\n                })\n            }\n        })\n    }\n\n    download() {\n        window.location.href = sampleCSV;\n    }\n\n    downloadErrorFile() {\n\n        this.dt.exportCSV();\n    }\n    handleChange = (e) => {\n\n        this.setState({ [e.target.name]: e.target.value });\n        if (e.target.name === 'effectiveDate') {\n            if (e.target.value === '' || e.target.value === null) {\n                this.setState({ effectiveDateError: true });\n                this.show(\"effectiveDate\", true);\n            } else {\n                this.setState({ effectiveDateError: false, effectiveDate: e.target.value });\n                this.show(\"effectiveDate\", false);\n            }\n        }\n\n    }\n\n    renderfileUpload() {\n        return <div>\n            <div>Bulk Import Rating Bands for Binder</div>\n            <div style={{ marginTop: '40px' }}>\n                <Row>\n                    <Col md=\"3\">\n                        <label>Import Type</label>\n                    </Col>\n                    <Col md=\"9\">\n                        <div className=\"rc-inline\">\n                            <label>\n                                <Input type=\"radio\" name=\"fullReplaceMent\" checked={(this.state.fullReplaceMent)}\n                                    value={this.state.radioSelected} onChange={() => this.setState({\n                                        fullReplaceMent: true, incremental: false\n                                    })} />\n                                Full Replacement\n                                </label><label>This Option will completly replace the existing band values with the file value being imported. the band values that are not specifield in new file will not be inactivated.</label>\n                        </div>\n                        <div className=\"rc-inline\">\n                            <label >\n                                <Input type=\"radio\" disabled={\"disabled\"} name=\"incremental\" checked={(this.state.incremental)}\n                                    value={this.state.radioSelected} onChange={() => this.setState({\n                                        fullReplaceMent: false, incremental: true\n                                    })} />\n                                Incremental\n                                                                </label>\n                            <label>This Option will only add or update the band values with the file values being imported. The band values that are not specified in the file will stay intact.</label>\n                        </div>\n\n                        {/* <label>New Business Rate (%)</label> */}\n                    </Col>\n                </Row>\n                <div style={{ marginTop: '40px' }}>\n                    <BTN onClick={this.download}>Download Sample File </BTN>\n                </div>\n                <div style={{ marginTop: '40px' }}>\n                    <Row>\n                        <Col md=\"3\">\n                            <label>Specify File to Import</label>\n                        </Col>\n                        <Col md=\"9\">\n                            <form onSubmit={this.onFormSubmit}>\n                                <input accept=\".csv\" type=\"file\" onChange={this.selectFile} />\n                            </form>\n                        </Col>\n                    </Row>\n                </div>\n\n                <ModalFooter>\n                    <BTN color=\"success\" onClick={() => this.handleOnClickNext1()}> Check File Data  <i class=\"fa fa-arrow-right\"></i></BTN>{' '}\n                </ModalFooter>\n            </div>\n        </div>\n    }\n\n    rendercheckFiledata() {\n        let columns = this.state.cols.map((col, i) => {\n            return <Column field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} />;\n        });\n        return <div>\n            <div style={{ paddingTop: '40px' }}>\n                <Row>\n                    <Col md=\"3\">\n                        <label>Total Records in file : {this.state.totalRecords}</label>\n                    </Col>\n                    <Col md=\"3\">\n                        <label>Record With Error : {this.state.recordWithError}</label>\n                    </Col>\n                    <Col md=\"6\">\n                        <label>Record With Successful Data Check : {this.state.recordWithSucess}</label>\n                    </Col>\n                </Row>\n                <div className=\"table-custom\">\n                    <DataTable ref={(el) => this.dt = el} value={this.state.fileData} first={this.state.selectedPage} onPage={(e) => this.getPageString(e)}\n                        paginator={true} rows={this.state.rowsPerPage} totalRecords={this.state.fileData.length} exportFilename=\"Binder Rating Error List\"\n                        currentPageReportTemplate={this.state.str} scrollable={true} scrollHeight=\"250px\"\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\n                        rowsPerPageOptions={this.state.rowsPerPageOptions} globalFilter={this.state.globalFilter} emptyMessage=\"No records found\"\n                        responsive={true} resizableColumns={true} columnResizeMode=\"fit\"\n                        scrollable={true} scrollHeight=\"265px\">\n                        {columns}\n                    </DataTable></div>\n                <Row style={{ padding: '10px 0px' }}>\n                    <Col md=\"2\">\n                        <label>Effective Date</label>\n                    </Col>\n                    <Col md=\"3\">\n                        <Input type=\"date\" name=\"effectiveDate\" id=\"effectiveDate\" onChange={(e) => this.handleChange(e)} value={this.state.effectiveDate}\n                            min={moment().format('YYYY-MM-DD')}\n                            max={moment().add(100, 'years').format('YYYY-MM-DD')}\n                        >\n                        </Input>\n                        <em className=\"error invalid-feedback\" >Please Enter Valid Effective Date</em>\n                    </Col>\n                </Row>\n            </div>\n            <ModalFooter>\n                {(this.state.recordWithError > 0) ? (<BTN onClick={this.downloadErrorFile}>Download File </BTN>) : ''}\n                <BTN color=\"success\" onClick={() => this.handleOnClickBack()}><i class=\"fa fa-arrow-left\"></i>  Back</BTN>{' '}\n                {(this.state.recordWithError > 0 || this.state.effectiveDate == \"\") ?\n                    (<BTN color=\"success\" disabled={\"disabled\"} onClick={() => this.handleOnClickNext2()}> Proceed with import  <i class=\"fa fa-arrow-right\"></i></BTN>)\n                    : (<BTN color=\"success\" onClick={() => this.handleOnClickNext2()}> Proceed with import  <i class=\"fa fa-arrow-right\"></i></BTN>)\n                }\n\n            </ModalFooter>\n        </div>\n    }\n\n    renderimportresult() {\n        var handleCallBack = this.props.handleCallBack;\n        return <div>\n\n            <Col>\n                <Row>\n                    <i style={{ color: \"#00ff00\", fontSize: 70 }} color=\"success\" class=\"fa fa-check-circle\"></i>\n                </Row>\n                <Row>\n                    <label>{this.state.totalRecordsInsertSuccess} Record Importd </label>\n                </Row>\n                <Row>\n                    <label>{this.state.totalRecordsInsertFail} Record Importd Fail</label>\n                </Row>\n                <Row>\n                    <label>Data Imported Sucessfully! </label>\n                </Row>\n            </Col>\n\n\n            <ModalFooter>\n                <BTN color=\"primary\" onClick={() => this.setState({\n                    currStep: 1\n                }\n                )}>  Import Again</BTN>{' '}\n                <BTN color=\"success\" onClick={() => handleCallBack(false)}> Ok  <i class=\"fa fa-check\"></i></BTN>{' '}\n            </ModalFooter>\n        </div>\n    }\n\n\n    render() {\n        return <div>\n            <Stepper\n                steps={steps}\n                activeStep={this.state.currStep}\n                onSelect={this.handleOnClickStepper}\n                showNumber={true}\n            />\n            <div style={{ marginTop: '40px' }}>\n                {this.state.currStep === 1 ? this.renderfileUpload() :\n                    this.state.currStep === 2 ? this.rendercheckFiledata() : this.state.currStep === 3 ? this.renderimportresult() :\n                        <div></div>\n                }\n            </div>\n\n        </div>;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}