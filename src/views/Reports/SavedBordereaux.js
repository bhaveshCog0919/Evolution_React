import React, { Component } from 'react';
import api from '../../utils/apiClient';
import moment from 'moment';
import { withTranslation } from 'react-i18next';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { CommonConfig } from '../../utils/constants';
import { Button } from 'primereact/button';
import { MultiSelect } from 'primereact/multiselect';
import { Button as BTN, Input, Row, Col, UncontrolledTooltip } from 'reactstrap';
import { toast } from 'react-toastify';
import APIConstant from '../../utils/constants';

class SavedBordereaux extends Component {

	constructor(props) {
		super(props);

		let columns = [
			{ field: "BReference", header: "Bordereaux Reference", sortable: true, filter: true, id: 0 },
			{ field: "Params", header: "Params", sortable: true, filter: true, id: 1 },
			{ field: "Generated", header: "Generated On / Generated By", sortable: true, filter: true, id: 2 },
			{ body: this.qualifierTemplate.bind(this), header: "Qualifier", sortable: false, filter: false, id: 3 },
			{ body: this.actionTemplate.bind(this), header: "Actions", sortable: false, filter: false, id: 4 },
		];

		let columnsB = [
			{ body: this.actionTemplateB.bind(this), header: "Actions", sortable: false, filter: false, id: -1, style: { 'width': '100px' } },
			{ field: "PolicyNumber", header: "Policy Number", sortable: true, filter: true, id: 0, style: { 'width': '100px' } },
			{ field: "ClientName", header: "Name", sortable: true, filter: true, id: 1, style: { 'width': '150px' } },
			{ field: "TransactionDescription", header: "Transaction", sortable: true, filter: true, id: 2, style: { 'width': '200px' } },
			{ field: "PaymentStatus", header: "Status", sortable: true, filter: true, id: 3, style: { 'width': '100px' } },
			{ field: "SubAgentId", header: "Sub Agent Id", sortable: true, filter: true, id: 4, style: { 'width': '100px' } },
			{ field: "Department", header: "Department", sortable: true, filter: true, id: 5, style: { 'width': '150px' } },
			{ field: "SourceName", header: "Source Name", sortable: true, filter: true, id: 6, style: { 'width': '200px' } },
			{ field: "VesselRegistrationLocation", header: "Where is The boat Registered?", sortable: true, filter: true, id: 7, style: { 'width': '200px' } },
			{ field: "Income", header: "Income", sortable: true, filter: true, id: 8, style: { 'width': '100px' } },
			{ field: "Outstanding", header: "Outstanding", sortable: true, filter: true, id: 9, style: { 'width': '150px' } },
			{ field: "Gross", header: "Gross", sortable: true, filter: true, id: 10, style: { 'width': '150px' } },
			{ field: "GrossLessLevy", header: "Gross Less Levy", sortable: true, filter: true, id: 11, style: { 'width': '150px' } },
			{ field: "TotalCommission", header: "Total Commission", sortable: true, filter: true, id: 12, style: { 'width': '150px' } },
			{ field: "ArcFees", header: "Arc & Fees (Add On Cost)", sortable: true, filter: true, id: 13, style: { 'width': '150px' } },
			{ field: "AdminFeeAmount", header: "FEES (Admin Fee)", sortable: true, filter: true, id: 14, style: { 'width': '150px' } },
			{ field: "GovtLevyPercent", header: "Gvt Levy Rate", sortable: true, filter: true, id: 15, style: { 'width': '150px' } },
			{ field: "GovtLevyAmount", header: "Gvt Levy Amount", sortable: true, filter: true, id: 16, style: { 'width': '150px' } },
			{ field: "NetPay", header: "Net Pay", sortable: true, filter: true, id: 19, style: { 'width': '150px' } },
			{ field: "TransactionDate", header: "Date Completed", sortable: true, filter: true, id: 20, style: { 'width': '150px' } },
			{ field: "InsuranceCompany", header: "Insurance Company (Binder Name)", sortable: true, filter: true, id: 21, style: { 'width': '250px' } },
			{ field: "PolicyClass", header: "Policy Class", sortable: true, filter: true, id: 22, style: { 'width': '150px' } },
			{ field: "VesselTypeName", header: "Vessel Type", sortable: true, filter: true, id: 53, style: { 'width': '150px' } },
			{ field: "PolicyType", header: "Policy Type", sortable: true, filter: true, id: 23, style: { 'width': '150px' } },
			{ field: "PolicyStatus", header: "Policy Status", sortable: true, filter: true, id: 24, style: { 'width': '150px' } },
			{ field: "CruisingRange", header: "Cruising Range", sortable: true, filter: true, id: 25, style: { 'width': '250px' } },
			{ field: "MooringName", header: "Mooring Name", sortable: true, filter: true, id: 26, style: { 'width': '200px' } },
			{ field: "MooringType", header: "Mooring Type", sortable: true, filter: true, id: 27, style: { 'width': '200px' } },
			{ field: "GeoTags", header: "Geo Tags", sortable: true, filter: true, id: 28, style: { 'width': '200px' } },
			{ field: "VesselName", header: "Vessel Name", sortable: true, filter: true, id: 29, style: { 'width': '200px' } },
			{ field: "YearBuilt", header: "Year Built", sortable: true, filter: true, id: 'YearBuilt', style: { 'width': '100px' } },
			{ field: "VesselMakeModel", header: "Vessel Make & Mode", sortable: true, filter: true, id: 30, style: { 'width': '200px' } },
			{ field: "SumInsured", header: "Sum Insured", sortable: true, filter: true, id: 31, style: { 'width': '150px' } },
			{ field: "RRE", header: "RRE", sortable: true, filter: true, id: 32, style: { 'width': '100px' } },
			{ field: "ExcessAmount", header: "Excess Amount", sortable: true, filter: true, id: 33, style: { 'width': '150px' } },
			{ field: "SurveyDueDate", header: "Survey Due Date", sortable: true, filter: true, id: 34, style: { 'width': '150px' } },
			{ field: "InceptionDate", header: "Inception Date", sortable: true, filter: true, id: 35, style: { 'width': '150px' } },
			{ field: "PolicyCreated", header: "Policy Created", sortable: true, filter: true, id: 36, style: { 'width': '150px' } },
			{ field: "PolicyRenewalDate", header: "Policy Renewal Date", sortable: true, filter: true, id: 37, style: { 'width': '150px' } },
			{ field: "PolicyLastBound", header: "Policy Last Bound", sortable: true, filter: true, id: 38, style: { 'width': '150px' } },
			{ field: "PolicyUpdated", header: "Policy Updated", sortable: true, filter: true, id: 39, style: { 'width': '150px' } },
			{ field: "YCommissionRate", header: "Yachtsman Commision Rate", sortable: true, filter: true, id: 40, style: { 'width': '150px' } },
			{ field: "YCommissionAmount", header: "Yachtsman Commision Amount", sortable: true, filter: true, id: 41, style: { 'width': '150px' } },
			{ field: "AgentCommissionRate", header: "Agent Commission Rate", sortable: true, filter: true, id: 17, style: { 'width': '150px' } },
			{ field: "AgentCommissionAmount", header: "Agent Commission Amount", sortable: true, filter: true, id: 18, style: { 'width': '150px' } },
			{ field: "TransactionCreated", header: "Transaction Created", sortable: true, filter: true, id: 42, style: { 'width': '150px' } },
			{ field: "TransactionCompleted", header: "Transaction Completed", sortable: true, filter: true, id: 43, style: { 'width': '150px' } },
			{ field: "PXStatus", header: "PX Status", sortable: true, filter: true, id: 44, style: { 'width': '150px' } },
			{ field: "PaymentMode", header: "PX Type", sortable: true, filter: true, id: 45, style: { 'width': '200px' } },
			{ field: "Currency", header: "PX Currency", sortable: true, filter: true, id: 46, style: { 'width': '150px' } },
			{ field: "MidtermAdjustmentEffectiveDate", header: "Midterm Adjustment Effective Date", sortable: true, filter: true, id: 47, style: { 'width': '150px' } },
			{ field: "ReasonForCancellation", header: "Reason for Cancellation", sortable: true, filter: true, id: 48, style: { 'width': '200px' } },
			{ field: "PolicyIssuanceDate", header: "Policy Issuance Date (Policy Document Generation Date)", sortable: true, filter: true, id: 49, style: { 'width': '200px' } },
			{ field: "ContactAddress", header: "Contact Address", sortable: true, filter: true, id: 50, style: { 'width': '300px' } },
			{ field: "Email", header: "Email", sortable: true, filter: true, id: 51, style: { 'width': '300px' } },
			{ field: "Phone", header: "Phone", sortable: true, filter: true, id: 52, style: { 'width': '200px' } }
		];

		this.state = {
			LanguageId: (props.i18n.language === 'en') ? 'en-GB' : (props.i18n.language === 'es') ? 'es-ES' : (props.i18n.language === 'ie') ? 'en-IE' : props.i18n.language,
			viewBordereauxData: [],
			cols: columns,
			colsB: columnsB,
			arr: [],
			arrB: [],
			selectedPage: 0,
			selectedPageB: 0,
			rowsPerPageOptions: CommonConfig.dataTableConfig.rowsPerPageOptions,
			rowsPerPageOptionsB: CommonConfig.dataTableConfig.rowsPerPageOptions,
			str: '',
			strB: '',
			rowsPerPage: CommonConfig.dataTableConfig.rowsPerPage,
			rowsPerPageB: CommonConfig.dataTableConfig.rowsPerPage,
			globalFilter: null,
			globalFilterB: null,
			transactionDateError: false,
			showExcluded: false,
			onlyDiscrepancy: false,
			isViewBordereaux: false,
			BordereauxViewData: null
		};

		this.colOptions = [];
		for (let col of columns) {
			this.colOptions.push({ label: col.header, value: col });
		}

		this.colOptionsB = [];
		for (let col of columnsB) {
			this.colOptionsB.push({ label: col.header, value: col });
		}

		this.export = this.export.bind(this);
	}

	componentDidMount() {
		this.getPremiumBorderauxList();
		this.getCurrency();
		this.getDropDownValues('BORDEREAUXCOUNTRY', 'countryList', 'StringMapName');
		this.getDropDownValues('BOD', 'BODList', 'StringMapName');
		this.getDropDownValues('BSTATEMENTTYPE', 'statementTypeList', 'SortOrder');
	}

	actionTemplate(rowData, column) {
		return <div className="policy-list-data">
			<Button type="button" icon="pi pi-eye" className="p-button-primary" onClick={() => this.viewBordereaux(rowData)}
				style={{ marginRight: '.5em' }} tooltip="View" tooltipOptions={{ position: 'bottom' }}>
			</Button>

			{(rowData.IsSaved === 1) ? (null) : (
				<Button type="button" icon="pi pi-check" className="p-button-success" onClick={() => this.processBordereaux(rowData.BordereauxHeaderId, 'Save')}
					style={{ marginRight: '.5em' }} tooltip="Save" tooltipOptions={{ position: 'bottom' }}>
				</Button>
			)}

			{/* <Button type="button" icon="pi pi-undo" className="p-button-warning" onClick={() => this.regenerateBordereaux(rowData)}
				style={{ marginRight: '.5em' }} tooltip="Regenerate" tooltipOptions={{ position: 'bottom' }}>
			</Button> */}

			{(CommonConfig.isEmpty(rowData.SentDate)) ? (
				<Button type="button" icon="pi pi-cloud-upload" className="p-button-success" onClick={() => this.processBordereaux(rowData.BordereauxHeaderId, 'Sent')}
					style={{ marginRight: '.5em' }} tooltip="Mark As Sent" tooltipOptions={{ position: 'bottom' }}>
				</Button>
			) : (null)}

			{(CommonConfig.isEmpty(rowData.LockedDate)) ? (
				<Button type="button" icon="pi pi-clock" className="p-button-warning" onClick={() => this.processBordereaux(rowData.BordereauxHeaderId, 'Freeze')}
					style={{ marginRight: '.5em' }} tooltip="Freeze" tooltipOptions={{ position: 'bottom' }}>
				</Button>
			) : (null)}

			{(CommonConfig.isEmpty(rowData.LockedDate)) ? (
				<Button type="button" icon="pi pi-trash" className="p-button-danger" onClick={() => this.processBordereaux(rowData.BordereauxHeaderId, 'Discard')}
					style={{ marginRight: '.5em' }} tooltip="Discard" tooltipOptions={{ position: 'bottom' }}>
				</Button>
			) : (null)}

		</div>;
	}

	qualifierTemplate(rowData, column) {
		console.log("qualifierTemplate>",rowData);
		return <div className="policy-list-data">
			{(rowData.IsSaved === 1) ? (
				<span>
					<i style={{ fontSize: '25px' }} className="pi pi-check" href="#" id={"SavedTooltip"+ rowData.BReference}></i>
					<UncontrolledTooltip placement="top" target={"SavedTooltip"+ rowData.BReference}>
						Saved ({moment(rowData.UpdatedOn).format(CommonConfig.dateFormat.dateTime)})
					</UncontrolledTooltip>
				</span>
			) : (null)}

			{(CommonConfig.isEmpty(rowData.SentDate)) ? (null) : (
				<span>
					<i style={{ fontSize: '25px' }} className="pi pi-cloud-upload" href="#" id={"SentTooltip"+ rowData.BReference}></i>
					<UncontrolledTooltip placement="top" target={"SentTooltip"+ rowData.BReference}>
						Sent ({moment(rowData.SentDate).format(CommonConfig.dateFormat.dateOnly)})
					</UncontrolledTooltip>
				</span>
			)}

			{(CommonConfig.isEmpty(rowData.LockedDate)) ? (null) : (
				<span>
					<i style={{ fontSize: '25px' }} className="pi pi-lock" href="#" id={"LockedTooltip"+ rowData.BReference}></i>
					<UncontrolledTooltip placement="top" target={"LockedTooltip"+ rowData.BReference}>
						Locked ({moment(rowData.LockedDate).format(CommonConfig.dateFormat.dateOnly)})
					</UncontrolledTooltip>
				</span>
			)}
		</div>;
	}

	getDropDownValues(stringMapType, setStateName, orderBy) {
		try {
			const data = {
				stringmaptype: stringMapType,
				orderby: orderBy
			};
			api.post(APIConstant.path.dropdownbycode, data).then(res => {
				if (res.success) {
					this.setState({ [setStateName]: res.data });
				} else {
				}
			}).catch(err => {
			});
		} catch (error) {
		}
	}

	getCurrency() {
		try {
			api.get(APIConstant.path.getCurrency).then(res => {
				if (res.success) {
					this.setState({ currencyList: res.data });
				} else {
				}
			}).catch(err => {
			});
		} catch (error) {
			console.log("error...", error);
		}
	}

	getPremiumBorderauxList() {
		var data = {};
		api.post('api/getPremiumBorderauxList', data).then(res => {
			console.log("getPremiumBorderauxList----", res);
			if (res.success) {
				console.log("getPremiumBorderauxList---- IN");

				let formattedData = [];

				let dataLength = res.data[0].length;
				if (dataLength > 0) {
					for (let i = 0; i < dataLength; i++) {
						let tempData = res.data[0][i];

						formattedData.push({
							BordereauxHeaderId: tempData.BordereauxHeaderId,
							BReference: tempData.BReference,
							Params: tempData.ParamString,
							Generated: moment(tempData.GenerationDate).format(CommonConfig.dateFormat.dateTime) + " / " + tempData.CreatedByName,
							ParamFromDate: tempData.ParamFromDate,
							ParamToDate: tempData.ParamToDate,
							ParamDateType: tempData.ParamDateType,
							ParamCurrency: tempData.ParamCurrency,
							ParamCountry: tempData.ParamCountry,
							ParamStatementType: tempData.ParamStatementType,
							IsShowExcluded: tempData.IsShowExcluded.data[0],
							IsSaved: tempData.IsSaved.data[0],
							SentDate: tempData.SentDate,
							LockedDate: tempData.LockedDate,
							Status: tempData.Status,
							UpdatedOn: tempData.UpdatedOn
						});

						// BordereauxHeaderId, GenerationDate, BReference, ParamString, ParamFromDate,  ParamToDate, ParamDateType, ParamCurrency, ParamCountry, ParamStatementType, IsShowExcluded, IsSaved, SentDate, LockedDate, CreatedOn, Status, CreatedByName 
					}
				}

				console.log("getPremiumBorderauxList---- IN -- formattedData");
				let firstPage = (formattedData.length) ? '1' : '0';
				let lastPage = (this.state.rowsPerPage < formattedData.length) ? this.state.rowsPerPage : formattedData.length;
				let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';
				this.setState({ arr: formattedData, str: str });
				console.log("getPremiumBorderauxList---- IN -- formattedData - pagination");
			}
		});
	}

	getPageString = (e) => {
		let firstPage = e.first + 1;
		let l = e.rows * (e.page + 1);
		let lastPage = (l < this.state.arr.length) ? l : this.state.arr.length
		var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arr.length + ' records';
		this.setState({ selectedPage: e.first, str: str, rowsPerPage: e.rows });
	}

	getPageStringB = (e) => {
		let firstPage = e.first + 1;
		let l = e.rows * (e.page + 1);
		let lastPage = (l < this.state.arrB.length) ? l : this.state.arrB.length
		var str = firstPage + ' to ' + lastPage + ' out of ' + this.state.arrB.length + ' records';
		this.setState({ selectedPageB: e.first, strB: str, rowsPerPageB: e.rows });
	}

	export() {
		this.dt.exportCSV();
	}

	show(field, condition, errorField, message) {
		if (condition) {
			if (document.getElementById(field))
				document.getElementById(field).className = "form-control is-invalid";

			if (document.getElementById(errorField))
				document.getElementById(errorField).innerHTML = '<p>' + message + ' </p>';
		} else {
			if (document.getElementById(field))
				document.getElementById(field).className = "form-control";

			if (document.getElementById(errorField))
				document.getElementById(errorField).innerHTML = null;
		}
	}

	goBackToList = () => {
		this.setState({
			isViewBordereaux: false,
			BordereauxViewData: null,
			viewBordereauxData: []
		});
	}

	viewBordereaux = (rowData) => {
		console.log("viewBordereaux >", rowData);
		this.setState({
			isViewBordereaux: true,
			BordereauxViewData: rowData
		});

		var data = {
			BordereauxHeaderId: rowData.BordereauxHeaderId,
			languageId: this.state.LanguageId,
			loggedInUserId: CommonConfig.loggedInUserId()
		};

		console.log("viewBordereaux----", data);

		api.post('api/viewBordereaux', data).then(res => {
			console.log("viewBordereaux----", res);
			if (res.success) {
				toast.success(res.data.message);

				let formattedData = [];

				let dataLength = res.data[0].length;
				if (dataLength > 0) {

					let Income = 0;
					let Outstanding = 0;
					let Gross = 0;
					let GrossLessLevy = 0;
					let TotalCommission = 0;
					let ArcFees = 0;
					let AdminFeeAmount = 0;
					let GovtLevyPercent = 0;
					let GovtLevyAmount = 0;
					let NetPay = 0;
					let AgentCommissionRate = 0;
					let AgentCommissionAmount = 0;
					let YCommissionAmount = 0;

					for (let i = 0; i < dataLength; i++) {
						let tempData = res.data[0][i];

						formattedData.push({
							Id: i,
							BordereauxDetailId: tempData.BordereauxDetailId,
							BordereauxHeaderId: tempData.BordereauxHeaderId,
							PolicyNumber: tempData.PolicyNumber,
							ClientName: tempData.ClientName,
							TransactionDescription: tempData.TransactionDescription,
							PaymentStatus: tempData.PaymentStatus,
							VesselRegistrationLocation: tempData.VesselRegistrationLocation,
							TransactionType: tempData.TransactionType,
							Income: tempData.Income,
							Outstanding: tempData.Outstanding,
							Gross: tempData.Gross,
							GrossLessLevy: tempData.GrossLessLevy,
							TotalCommission: tempData.TotalCommission,
							ArcFees: tempData.ArcFees,
							AdminFeeAmount: tempData.AdminFeeAmount,
							GovtLevyPercent: tempData.GovtLevyPercent,
							GovtLevyAmount: tempData.GovtLevyAmount,
							NetPay: tempData.NetPay,
							TransactionDate: moment(tempData.TransactionDate).format(CommonConfig.dateFormat.dateOnly),
							InsuranceCompany: tempData.InsuranceCompany,
							PolicyClass: tempData.PolicyClass,
							VesselTypeName: tempData.VesselTypeName,
							PolicyType: tempData.PolicyType,
							PolicyStatus: tempData.PolicyStatus,
							CruisingRange: tempData.CruisingRange,
							MooringName: tempData.MooringName,
							YearBuilt: tempData.YearBuilt,
							MooringType: tempData.MooringType,
							GeoTags: tempData.GeoTags,
							VesselName: tempData.VesselName,
							VesselMakeModel: tempData.VesselMakeModel,
							SumInsured: CommonConfig.formatMoney(tempData.SumInsured),
							RRE: tempData.RRE,
							ExcessAmount: tempData.ExcessAmount,
							SurveyDueDate: (CommonConfig.isEmpty(tempData.SurveyDueDate) || tempData.SurveyDueDate === '0000-00-00 00:00:00') ? '' : moment(tempData.SurveyDueDate).format(CommonConfig.dateFormat.dateOnly),
							InceptionDate: (CommonConfig.isEmpty(tempData.InceptionDate) || tempData.InceptionDate === '0000-00-00 00:00:00') ? '' : moment(tempData.InceptionDate).format(CommonConfig.dateFormat.dateOnly),
							PolicyCreated: (CommonConfig.isEmpty(tempData.PolicyCreated) || tempData.PolicyCreated === '0000-00-00 00:00:00') ? '' : moment(tempData.PolicyCreated).format(CommonConfig.dateFormat.dateOnly),
							PolicyRenewalDate: (CommonConfig.isEmpty(tempData.PolicyRenewalDate) || tempData.PolicyRenewalDate === '0000-00-00 00:00:00') ? '' : moment(tempData.PolicyRenewalDate).format(CommonConfig.dateFormat.dateOnly),
							PolicyLastBound: (CommonConfig.isEmpty(tempData.PolicyLastBound) || tempData.PolicyLastBound === '0000-00-00 00:00:00') ? '' : moment(tempData.PolicyLastBound).format(CommonConfig.dateFormat.dateOnly),
							PolicyUpdated: (CommonConfig.isEmpty(tempData.PolicyUpdated) || tempData.PolicyUpdated === '0000-00-00 00:00:00') ? '' : moment(tempData.PolicyUpdated).format(CommonConfig.dateFormat.dateOnly),
							YCommissionRate: tempData.YCommissionRate,
							YCommissionAmount: tempData.YCommissionAmount,
							TransactionCreated: (CommonConfig.isEmpty(tempData.TransactionCreated) || tempData.TransactionCreated === '0000-00-00 00:00:00') ? '' : moment(tempData.TransactionCreated).format(CommonConfig.dateFormat.dateOnly),
							TransactionCompleted: (CommonConfig.isEmpty(tempData.TransactionCompleted) || tempData.TransactionCompleted === '0000-00-00 00:00:00') ? '' : moment(tempData.TransactionCompleted).format(CommonConfig.dateFormat.dateOnly),
							PXStatus: 'Paid',
							PaymentMode: tempData.PaymentMode,
							Currency: tempData.Currency,
							MidtermAdjustmentEffectiveDate: (CommonConfig.isEmpty(tempData.MidtermAdjustmentEffectiveDate) || tempData.MidtermAdjustmentEffectiveDate === '0000-00-00 00:00:00') ? '' : moment(tempData.MidtermAdjustmentEffectiveDate).format(CommonConfig.dateFormat.dateOnly),
							ReasonForCancellation: tempData.ReasonForCancellation,
							PolicyIssuanceDate: (CommonConfig.isEmpty(tempData.PolicyIssuanceDate) || tempData.PolicyIssuanceDate === '0000-00-00 00:00:00') ? '' : moment(tempData.PolicyIssuanceDate).format(CommonConfig.dateFormat.dateOnly),
							ContactAddress: tempData.ContactAddress,
							Email: tempData.Email,
							Phone: tempData.Phone,
							SubAgentId: tempData.SubAgentId,
							Department: tempData.Department,
							SourceName: tempData.SourceName,
							AgentCommissionRate: tempData.AgentCommissionRate,
							AgentCommissionAmount: tempData.AgentCommissionAmount,
							LastKnownPremium: tempData.LastKnownPremium,
							IsExcluded: tempData.IsExcluded.data[0],
							IsDiscrepancy: tempData.IsDiscrepancy.data[0],
							ErrorMessage: tempData.ErrorMessage
						});

						Income = tempData.Income + Income;
						Outstanding = tempData.Outstanding + Outstanding;
						Gross = tempData.Gross + Gross;
						GrossLessLevy = tempData.GrossLessLevy + GrossLessLevy;
						TotalCommission = tempData.TotalCommission + TotalCommission;
						ArcFees = tempData.ArcFees + ArcFees;
						AdminFeeAmount = tempData.AdminFeeAmount + AdminFeeAmount;
						GovtLevyPercent = tempData.GovtLevyPercent + GovtLevyPercent;
						GovtLevyAmount = tempData.GovtLevyAmount + GovtLevyAmount;
						NetPay = tempData.NetPay + NetPay;
						AgentCommissionRate = tempData.AgentCommissionRate + AgentCommissionRate;
						AgentCommissionAmount = tempData.AgentCommissionAmount + AgentCommissionAmount;
						YCommissionAmount = tempData.YCommissionAmount + YCommissionAmount;
					}

					formattedData.push({
						Income: CommonConfig.formatMoney(Income),
						Outstanding: CommonConfig.formatMoney(Outstanding),
						Gross: CommonConfig.formatMoney(Gross),
						GrossLessLevy: CommonConfig.formatMoney(GrossLessLevy),
						TotalCommission: CommonConfig.formatMoney(TotalCommission),
						ArcFees: CommonConfig.formatMoney(ArcFees),
						AdminFeeAmount: CommonConfig.formatMoney(AdminFeeAmount),
						// GovtLevyPercent: CommonConfig.formatMoney(GovtLevyPercent),
						GovtLevyAmount: CommonConfig.formatMoney(GovtLevyAmount),
						NetPay: CommonConfig.formatMoney(NetPay),
						// AgentCommissionRate: CommonConfig.formatMoney(AgentCommissionRate),
						AgentCommissionAmount: CommonConfig.formatMoney(AgentCommissionAmount),
						YCommissionAmount: CommonConfig.formatMoney(YCommissionAmount),
					});
				}

				let firstPage = (formattedData.length) ? '1' : '0';
				let lastPage = (this.state.rowsPerPageB < formattedData.length) ? this.state.rowsPerPageB : formattedData.length;
				let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';
				this.setState({ arrB: formattedData, viewBordereauxData: formattedData, strB: str });
			}
		});
	}

	toggleExcluded = (e) => {
		document.getElementById('onlyDiscrepancy').checked = false;
		let isToggleExcluded = false;
		if (e.target.checked) {
			isToggleExcluded = true;
		}

		let formattedData = [];
		let viewBordereauxData = this.state.viewBordereauxData;
		let dataLength = viewBordereauxData.length;

		if (dataLength > 0) {

			let Income = 0;
			let Outstanding = 0;
			let Gross = 0;
			let GrossLessLevy = 0;
			let TotalCommission = 0;
			let ArcFees = 0;
			let AdminFeeAmount = 0;
			let GovtLevyPercent = 0;
			let GovtLevyAmount = 0;
			let NetPay = 0;
			let AgentCommissionRate = 0;
			let AgentCommissionAmount = 0;
			let YCommissionAmount = 0;

			for (let i = 0; i < dataLength; i++) {

				let tempData = viewBordereauxData[i];
				if (isToggleExcluded) {
					if (tempData.IsExcluded) {
						formattedData.push(tempData);

						Income = tempData.Income + Income;
						Outstanding = tempData.Outstanding + Outstanding;
						Gross = tempData.Gross + Gross;
						GrossLessLevy = tempData.GrossLessLevy + GrossLessLevy;
						TotalCommission = tempData.TotalCommission + TotalCommission;
						ArcFees = tempData.ArcFees + ArcFees;
						AdminFeeAmount = tempData.AdminFeeAmount + AdminFeeAmount;
						GovtLevyPercent = tempData.GovtLevyPercent + GovtLevyPercent;
						GovtLevyAmount = tempData.GovtLevyAmount + GovtLevyAmount;
						NetPay = tempData.NetPay + NetPay;
						AgentCommissionRate = tempData.AgentCommissionRate + AgentCommissionRate;
						AgentCommissionAmount = tempData.AgentCommissionAmount + AgentCommissionAmount;
						YCommissionAmount = tempData.YCommissionAmount + YCommissionAmount;
					}
				} else {
					formattedData.push(tempData);

					Income = tempData.Income + Income;
					Outstanding = tempData.Outstanding + Outstanding;
					Gross = tempData.Gross + Gross;
					GrossLessLevy = tempData.GrossLessLevy + GrossLessLevy;
					TotalCommission = tempData.TotalCommission + TotalCommission;
					ArcFees = tempData.ArcFees + ArcFees;
					AdminFeeAmount = tempData.AdminFeeAmount + AdminFeeAmount;
					GovtLevyPercent = tempData.GovtLevyPercent + GovtLevyPercent;
					GovtLevyAmount = tempData.GovtLevyAmount + GovtLevyAmount;
					NetPay = tempData.NetPay + NetPay;
					AgentCommissionRate = tempData.AgentCommissionRate + AgentCommissionRate;
					AgentCommissionAmount = tempData.AgentCommissionAmount + AgentCommissionAmount;
					YCommissionAmount = tempData.YCommissionAmount + YCommissionAmount;

				}
			}

			formattedData.push({
				Income: CommonConfig.formatMoney(Income),
				Outstanding: CommonConfig.formatMoney(Outstanding),
				Gross: CommonConfig.formatMoney(Gross),
				GrossLessLevy: CommonConfig.formatMoney(GrossLessLevy),
				TotalCommission: CommonConfig.formatMoney(TotalCommission),
				ArcFees: CommonConfig.formatMoney(ArcFees),
				AdminFeeAmount: CommonConfig.formatMoney(AdminFeeAmount),
				GovtLevyAmount: CommonConfig.formatMoney(GovtLevyAmount),
				NetPay: CommonConfig.formatMoney(NetPay),
				AgentCommissionAmount: CommonConfig.formatMoney(AgentCommissionAmount),
				YCommissionAmount: CommonConfig.formatMoney(YCommissionAmount),
			});
		}

		let firstPage = (formattedData.length) ? '1' : '0';
		let lastPage = (this.state.rowsPerPageB < formattedData.length) ? this.state.rowsPerPageB : formattedData.length;
		let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';
		this.setState({ arrB: formattedData, strB: str });
	}

	toggleDiscrepancy = (e) => {
		document.getElementById('showExcluded').checked = false;

		let isToggleDiscrepancy = false;
		if (e.target.checked) {
			isToggleDiscrepancy = true;
		}

		let formattedData = [];
		let viewBordereauxData = this.state.viewBordereauxData;
		let dataLength = viewBordereauxData.length;

		if (dataLength > 0) {

			let Income = 0;
			let Outstanding = 0;
			let Gross = 0;
			let GrossLessLevy = 0;
			let TotalCommission = 0;
			let ArcFees = 0;
			let AdminFeeAmount = 0;
			let GovtLevyPercent = 0;
			let GovtLevyAmount = 0;
			let NetPay = 0;
			let AgentCommissionRate = 0;
			let AgentCommissionAmount = 0;
			let YCommissionAmount = 0;

			for (let i = 0; i < dataLength; i++) {

				let tempData = viewBordereauxData[i];
				if (isToggleDiscrepancy) {
					if (tempData.IsDiscrepancy) {
						formattedData.push(tempData);

						Income = tempData.Income + Income;
						Outstanding = tempData.Outstanding + Outstanding;
						Gross = tempData.Gross + Gross;
						GrossLessLevy = tempData.GrossLessLevy + GrossLessLevy;
						TotalCommission = tempData.TotalCommission + TotalCommission;
						ArcFees = tempData.ArcFees + ArcFees;
						AdminFeeAmount = tempData.AdminFeeAmount + AdminFeeAmount;
						GovtLevyPercent = tempData.GovtLevyPercent + GovtLevyPercent;
						GovtLevyAmount = tempData.GovtLevyAmount + GovtLevyAmount;
						NetPay = tempData.NetPay + NetPay;
						AgentCommissionRate = tempData.AgentCommissionRate + AgentCommissionRate;
						AgentCommissionAmount = tempData.AgentCommissionAmount + AgentCommissionAmount;
						YCommissionAmount = tempData.YCommissionAmount + YCommissionAmount;
					}
				} else {
					formattedData.push(tempData);

					Income = tempData.Income + Income;
					Outstanding = tempData.Outstanding + Outstanding;
					Gross = tempData.Gross + Gross;
					GrossLessLevy = tempData.GrossLessLevy + GrossLessLevy;
					TotalCommission = tempData.TotalCommission + TotalCommission;
					ArcFees = tempData.ArcFees + ArcFees;
					AdminFeeAmount = tempData.AdminFeeAmount + AdminFeeAmount;
					GovtLevyPercent = tempData.GovtLevyPercent + GovtLevyPercent;
					GovtLevyAmount = tempData.GovtLevyAmount + GovtLevyAmount;
					NetPay = tempData.NetPay + NetPay;
					AgentCommissionRate = tempData.AgentCommissionRate + AgentCommissionRate;
					AgentCommissionAmount = tempData.AgentCommissionAmount + AgentCommissionAmount;
					YCommissionAmount = tempData.YCommissionAmount + YCommissionAmount;
				}
			}

			formattedData.push({
				Income: CommonConfig.formatMoney(Income),
				Outstanding: CommonConfig.formatMoney(Outstanding),
				Gross: CommonConfig.formatMoney(Gross),
				GrossLessLevy: CommonConfig.formatMoney(GrossLessLevy),
				TotalCommission: CommonConfig.formatMoney(TotalCommission),
				ArcFees: CommonConfig.formatMoney(ArcFees),
				AdminFeeAmount: CommonConfig.formatMoney(AdminFeeAmount),
				GovtLevyAmount: CommonConfig.formatMoney(GovtLevyAmount),
				NetPay: CommonConfig.formatMoney(NetPay),
				AgentCommissionAmount: CommonConfig.formatMoney(AgentCommissionAmount),
				YCommissionAmount: CommonConfig.formatMoney(YCommissionAmount),
			});
		}

		let firstPage = (formattedData.length) ? '1' : '0';
		let lastPage = (this.state.rowsPerPageB < formattedData.length) ? this.state.rowsPerPageB : formattedData.length;
		let str = firstPage + ' to ' + lastPage + ' out of ' + formattedData.length + ' records';
		this.setState({ arrB: formattedData, strB: str });
	}

	includeExcludeBordereaux = (rowData, vMode) => {
		console.log("includeExcludeBordereaux >", rowData);
		var data = {
			BordereauxHeaderId: rowData.BordereauxDetailId,
			Mode: vMode,
			loggedInUserId: CommonConfig.loggedInUserId()
		};
		console.log("processBordereaux > res", data);
		api.post('api/processBordereaux', data).then(res => {
			console.log("processBordereaux > res", res);
			if (res.success) {
				document.getElementById('showExcluded').checked = false;
				document.getElementById('onlyDiscrepancy').checked = false;
				this.viewBordereaux(this.state.BordereauxViewData);
			}
		});
	}

	actionTemplateB(rowData, column) {
		return (<div className="policy-list-data">
			{
				(!CommonConfig.isEmpty(rowData.Id)) ? (
					<div>
						{(CommonConfig.isEmpty(this.state.BordereauxViewData.LockedDate)) ? (
							(rowData.IsExcluded === 1) ? (
								<a title="Include" style={{ color: 'blue', textDecoration: 'underline', cursor: 'pointer' }} onClick={() => this.includeExcludeBordereaux(rowData, 'Include')}>Include</a>
							) : (
									<a title="Exclude" style={{ color: 'blue', textDecoration: 'underline', cursor: 'pointer' }} onClick={() => this.includeExcludeBordereaux(rowData, 'Exclude')}>Exclude</a>
								)
						) : (
								<span> 
									<i className="pi pi-lock" style={{ fontSize: '25px', verticalAlign: 'middle' }} href="#" id={"Locked"+ rowData.BordereauxDetailId}></i> 
									<UncontrolledTooltip placement="top" target={"Locked"+ rowData.BordereauxDetailId}>
										Locked ({moment(this.state.BordereauxViewData.LockedDate).format(CommonConfig.dateFormat.dateOnly)})
									</UncontrolledTooltip>
								</span>
							)}

						{(rowData.IsDiscrepancy === 1) ? (
							<span>
								<i className="pi pi-info-circle" style={{ fontSize: '25px', color: 'red', verticalAlign: 'middle' }} href="#" id={"Discrepancy"+ rowData.BordereauxDetailId}></i>
								<UncontrolledTooltip placement="right" target={"Discrepancy"+ rowData.BordereauxDetailId}>
									{rowData.ErrorMessage}
								</UncontrolledTooltip>
							</span>
						) : (null)}
					</div>
				) : (null)
			}
		</div>);
	}

	processBordereaux = (BordereauxHeaderId, vMode) => {
		var data = {
			BordereauxHeaderId: BordereauxHeaderId,
			Mode: vMode,
			loggedInUserId: CommonConfig.loggedInUserId()
		};
		console.log("processBordereaux > res", data);
		api.post('api/processBordereaux', data).then(res => {
			console.log("processBordereaux > res", res);
			if (res.success) {
				toast.success('Bordereaux ' + vMode + ' successfully.');
				this.goBackToList();
				this.getPremiumBorderauxList();
			} else {
				toast.error('Bordereaux report not ' + vMode + '. Please try again.');
			}
		});
	}

	/*regenerateBordereaux = (rowData) => {
		toast.success('Comming Soon...');
		var data = {
			BordereauxHeaderId: rowData.BordereauxHeaderId,
			loggedInUserId: CommonConfig.loggedInUserId()
		};
		console.log("regenerateBordereaux > res", data);
		api.post('api/regenerateBordereaux', data).then(res => {
			console.log("regenerateBordereaux > res", res);
			if (res.success) {

			}
		});
	}*/

	render() {
		const { t } = this.props;
		var header = null;

		let columns = this.state.cols.map((col, i) => {
			return <Column key={i} field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode={col.filterMatchMode} style={col.style}
			/>;
		});

		let columnsB = this.state.colsB.map((col, i) => {
			return <Column key={i} field={col.field} header={col.header} body={col.body} sortable={col.sortable} filter={col.filter} filterMatchMode={col.filterMatchMode} style={col.style}
			/>;
		});

		return (
			<div>

				{(this.state.isViewBordereaux) ? (
					<div className="table-custom">

						<div className="basic-header" style={{ marginTop: 20, marginBottom: 20 }} >
							<h5><strong>Bordereaux Reference: </strong> <label> {this.state.BordereauxViewData.BReference} </label></h5>
							<br />
							<div className="header-right-option">
								<BTN style={{ float: "right", marginRight: 10 }} color="primary" title="Bordereaux List" onClick={() => this.goBackToList()}>
									<i className="pi pi-chevron-left"></i> Bordereaux List
                                </BTN>

								<MultiSelect value={this.state.colsB} options={this.colOptionsB}
									fixedPlaceholder={true} placeholder={CommonConfig.dataTableConfig.columnToggleIcon} tooltip="Show / Hide Column" tooltipOptions={{ position: 'bottom' }}
									onChange={this.onColumnToggle} style={{ width: '50px' }}
								/>

								<Button type="button" icon="pi pi-external-link" tooltip="Export as CSV" tooltipOptions={{ position: 'bottom' }} onClick={this.export} style={{ marginRight: 10 }}></Button>
							</div>
						</div>

						<div className="filter-data">

							<Row>
								<Col md='2'>
									<label>
										<strong>Month/Year:</strong> {moment(this.state.BordereauxViewData.ParamFromDate).format('MMM/YYYY')}
									</label>
								</Col>
								<Col md='2'>
									<label>
										<strong>Type:</strong> {this.state.BordereauxViewData.ParamStatementType}
									</label>
								</Col>
								<Col md='2'>
									<label>
										<strong>Country:</strong> {this.state.BordereauxViewData.ParamCountry}
									</label>
								</Col>
								<Col md='2'>
									<label>
										<strong>Curreny:</strong> {this.state.BordereauxViewData.ParamCurrency}
									</label>
								</Col>
								<Col md='3'>
									<label>
										<strong>Based On Date:</strong> {this.state.BordereauxViewData.ParamDateType}
									</label>
								</Col>
							</Row>

							<Row style={{ margin: '20px 5px' }}>
								
								<Col md='2'>
									<Input type='checkbox' name='showExcluded' id='showExcluded'
										onChange={(e) => this.toggleExcluded(e)}></Input>
									<label for="showExcluded">Show Excluded</label>
								</Col>
								
								<Col md='2'>
									<Input type='checkbox' name='onlyDiscrepancy' id='onlyDiscrepancy'
										onChange={(e) => this.toggleDiscrepancy(e)}></Input>
									<label for="onlyDiscrepancy">Only Discrepancy</label>
								</Col>

								{(CommonConfig.isEmpty(this.state.BordereauxViewData.LockedDate)) ? (
									<Col md='2'>
										<BTN color="primary" title="Freeze" onClick={() => this.processBordereaux(this.state.BordereauxViewData.BordereauxHeaderId, 'Freeze')}> Freeze </BTN>
									</Col>
								) : (null)}

								{(this.state.BordereauxViewData.IsSaved === 0) ? (
									<Col md='2'>
										<BTN color="primary" title="Save" onClick={() => this.processBordereaux(this.state.BordereauxViewData.BordereauxHeaderId, 'Save')}> Save </BTN>
									</Col>
								) : (null)}

							</Row>
						
						</div>

						<div className="table-custom">
							<DataTable ref={(el) => this.dt = el} value={this.state.arrB} first={this.state.selectedPageB} onPage={(e) => this.getPageStringB(e)}
								paginator={true} rows={this.state.rowsPerPageB} header={header} totalRecords={this.state.arrB.length} exportFilename={this.state.BordereauxViewData.BReference}
								currentPageReportTemplate={this.state.strB}
								scrollable={true}
								paginatorTemplate="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
								rowsPerPageOptions={[5,10,20, this.state.arrB.length]} globalFilter={this.state.globalFilterB} emptyMessage="No records found"
								responsive={true} resizableColumns={true} columnResizeMode="expand">
								{columnsB}
							</DataTable>
						</div>

					</div>
				) : (
						<div className="table-custom">
							<DataTable ref={(el) => this.dt = el} value={this.state.arr} first={this.state.selectedPage} onPage={(e) => this.getPageString(e)}
								paginator={true} rows={this.state.rowsPerPage} header={header} totalRecords={this.state.arr.length} exportFilename="Premium Bordereaux List"
								currentPageReportTemplate={this.state.str}
								scrollable={true}
								paginatorTemplate="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
								rowsPerPageOptions={this.state.rowsPerPageOptions} globalFilter={this.state.globalFilter} emptyMessage="No records found"
								responsive={true} resizableColumns={true} columnResizeMode="expand">
								{columns}
							</DataTable>
						</div>
					)}
			</div>
		)
	}
}

export default withTranslation()(SavedBordereaux);
